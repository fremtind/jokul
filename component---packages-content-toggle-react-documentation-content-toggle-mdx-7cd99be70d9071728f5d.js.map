{"version":3,"sources":["webpack://@fremtind/portal/../packages/content-toggle-react/src/ContentToggle.tsx","webpack://@fremtind/portal/../packages/content-toggle-react/documentation/Example.tsx","webpack://@fremtind/portal/../packages/content-toggle-react/documentation/ContentToggle.mdx"],"names":["ContentToggle","showSecondary","secondary","children","className","variant","initialShowSecondary","useState","initial","setInitial","useEffect","cn","Example","boolValues","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","knobs","boolProps","component","parentName","isMDXComponent"],"mappings":"sQAGaA,EAKR,SAAC,GAA8E,IAA5EC,EAA2E,EAA3EA,cAAeC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,SAAiD,IAAvCC,iBAAuC,MAA3B,GAA2B,MAAvBC,eAAuB,MAAb,OAAa,EAGxEC,GAAwBC,cAASN,GAAxC,GACA,GAA8BM,eAAS,GAAhCC,EAAP,KAAgBC,EAAhB,KAOA,OANAC,gBAAU,WACFT,IAAkBK,GAClBG,GAAW,KAEhB,CAACR,EAAeK,IAGf,gCACI,wBAAMF,UAAS,0CAA4CC,EAA5C,IAAuDD,GAClE,wBACIA,UAAWO,IAAG,6BAA8B,CACxC,sCAAuCH,EACvC,uCAAwCA,EACxC,kCAAmCP,EACnC,kCAAmCA,KAGvC,wBAAMG,UAAU,4BAA4B,cAAaH,GACpDE,GAEL,wBAAMC,UAAU,gCAAgC,eAAcH,GACzDC,OC9BZU,EAA2C,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACpD,uBAAKT,UAAU,YACX,gBAACJ,EAAD,CAAeC,gBAAiBY,YAAU,MAAYX,UAAU,SAAhE,SAGA,gBAACF,EAAD,CACIC,gBAAiBY,YAAU,MAC3BR,QAAQ,OACRH,UAAU,MACVE,UAAU,kCAJd,U,iBCAKU,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,KAGZG,EAAUL,EAAc,WACxBM,EAAmBN,EAAc,oBACjCO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGT,GACF,YACD,OAAO,SAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,eAI5E,SAACP,EAAD,CAASO,QAAQ,WAAjB,8SAKA,SAACN,EAAD,CAAkBO,MAAO,CACvBC,UAAW,CAAC,OAAQ,SACnBC,UAAWlB,EAASe,QAAQ,sBAC/B,8JACA,8BACA,qNAAsM,uBAAYI,WAAW,KAAvB,YAAtM,6MAAuc,uBAAYA,WAAW,KAAvB,aAAvc,qCAAiiB,uBAAYA,WAAW,KAAvB,aAAjiB,MACA,uCACA,oOACA,oBACE,eAAIA,WAAW,MAAf,qDACA,eAAIA,WAAW,MAAf,yDAMNN,EAAWO,gBAAiB","file":"component---packages-content-toggle-react-documentation-content-toggle-mdx-7cd99be70d9071728f5d.js","sourcesContent":["import React, { ReactNode, FC, useState, useEffect } from \"react\";\nimport cn from \"classnames\";\n\nexport const ContentToggle: FC<{\n    showSecondary: boolean;\n    secondary: ReactNode;\n    className?: string;\n    variant?: \"flip\" | \"fade\";\n}> = ({ showSecondary, secondary, children, className = \"\", variant = \"flip\" }) => {\n    // this mechanism is to be able to prevent animating keyframes on the initial render.\n    // looking for actual change and then enable animating prevents initial blinking and premature animations\n    const [initialShowSecondary] = useState(showSecondary);\n    const [initial, setInitial] = useState(true);\n    useEffect(() => {\n        if (showSecondary !== initialShowSecondary) {\n            setInitial(false);\n        }\n    }, [showSecondary, initialShowSecondary]);\n\n    return (\n        <>\n            <span className={`jkl-content-toggle jkl-content-toggle--${variant} ${className}`}>\n                <span\n                    className={cn(\"jkl-content-toggle__slider\", {\n                        \"jkl-content-toggle__slider--initial\": initial,\n                        \"jkl-content-toggle__slider--animate\": !initial,\n                        \"jkl-content-toggle--show-first\": !showSecondary,\n                        \"jkl-content-toggle--show-second\": showSecondary,\n                    })}\n                >\n                    <span className=\"jkl-content-toggle__first\" aria-hidden={showSecondary}>\n                        {children}\n                    </span>\n                    <span className=\"jkl-content-toggle__secondary\" aria-hidden={!showSecondary}>\n                        {secondary}\n                    </span>\n                </span>\n            </span>\n        </>\n    );\n};\n","import React from \"react\";\nimport { ExampleComponentProps } from \"@fremtind/jkl-portal-components/src\";\nimport { ContentToggle } from \"../src\";\n\nexport const Example: React.FC<ExampleComponentProps> = ({ boolValues }) => (\n    <div className=\"jkl-body\">\n        <ContentToggle showSecondary={!!boolValues?.[\"Flip\"]} secondary=\"World\">\n            Hello\n        </ContentToggle>\n        <ContentToggle\n            showSecondary={!!boolValues?.[\"Fade\"]}\n            variant=\"fade\"\n            secondary=\"out\"\n            className=\"jkl-layout-spacing--medium-top\"\n        >\n            Fade\n        </ContentToggle>\n    </div>\n);\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Example } from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Content-toggle er en komponent for som representerer en av Jøkuls kjerneanimasjoner. Du ser denne bevelgesen på\n    pilene i select eller accordion, men det kan brukes til mye mer. Hver gang du har behov for to states som man\n    toggler mellom, så er content-toggle en måte å løse det på en elegant måte.\n    </Ingress>\n    <ComponentExample knobs={{\n      boolProps: [\"Flip\", \"Fade\"]\n    }} component={Example} mdxType=\"ComponentExample\" />\n    <p>{`Content-toggle komponenten tar inn to ReactNoder, det kan være strenger eller sammensatte komponenter, men bør ikke være store element.`}</p>\n    <h2>{`I bruk`}</h2>\n    <p>{`Content-toggle komponenten gjør sitt beste gjett på hvor store elementene inni er, så den animerer riktig avstand. Det er basert på font-størrelsen fra foreldrekomponenten. Så om du animerer `}<inlineCode parentName=\"p\">{`jkl-lead`}</inlineCode>{`, sørg for at den klassen er satt over content-toggle komponenten. Men i noen tilfellet så treffer den ikke helt. For å fortelle content-toggle at den skal bevege seg mer eller mindre, så kan du sette `}<inlineCode parentName=\"p\">{`font-size`}</inlineCode>{` på content-toggle elementet via `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{`.`}</p>\n    <h2>{`Tilgjengelighet`}</h2>\n    <p>{`Husk at du må skru av interaktive elementer når de ikke vises. Så om du en knapp er en av togglestatene, må du disable den når den ikke syntes, ellers vil det fortsatt være mulig å tabbe til den og trykke.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Aria-hidden settes på komponenten som ikke vises`}</li>\n      <li parentName=\"ul\">{`Komponenten hånterer redusert bevegelse på egenhånd`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}