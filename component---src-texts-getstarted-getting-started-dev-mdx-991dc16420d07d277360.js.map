{"version":3,"file":"component---src-texts-getstarted-getting-started-dev-mdx-991dc16420d07d277360.js","mappings":"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","sources":["webpack://@fremtind/portal/./src/texts/getstarted/GettingStartedDev.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Slik skriver du kode til Jøkul`}</h1>\n    <p>{`Jøkul er et designsystem: Et bibliotek med komponenter. Det gir litt andre utfordringer enn når du driver med klientutvikling. Her får du en liten innføring i hvordan vi jobber med Jøkul. Jøkul blir brukt til å utvikle mange forskjellige løsninger, og må derfor dekke forskjellige behov og ønsker. Det er viktig at vi balanserer funksjonalitet, brukervennlighet, pakkestørrelse og kompleksitet i hver enkelt komponent.`}</p>\n    <h2>{`Dette bruker vi`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Språk: `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.typescriptlang.org/docs/home.html\"\n        }}>{`Typescript`}</a></li>\n      <li parentName=\"ul\">{`JS-rammeverk: `}<a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/\"\n        }}>{`React`}</a></li>\n      <li parentName=\"ul\">{`Byggverktøy: `}<a parentName=\"li\" {...{\n          \"href\": \"https://rollupjs.org/guide/en/\"\n        }}>{`Rollup`}</a>{` og `}<a parentName=\"li\" {...{\n          \"href\": \"https://gulpjs.com/\"\n        }}>{`Gulp`}</a></li>\n      <li parentName=\"ul\">{`Test runner: `}<a parentName=\"li\" {...{\n          \"href\": \"https://jestjs.io/\"\n        }}>{`Jest`}</a></li>\n      <li parentName=\"ul\">{`Testrammeverk: `}<a parentName=\"li\" {...{\n          \"href\": \"https://testing-library.com/docs/react-testing-library/intro\"\n        }}>{`React Testing Library`}</a></li>\n      <li parentName=\"ul\">{`CSS-preprosessor: `}<a parentName=\"li\" {...{\n          \"href\": \"https://sass-lang.com/\"\n        }}>{`Sass`}</a></li>\n      <li parentName=\"ul\">{`CSS-metodikk: `}<a parentName=\"li\" {...{\n          \"href\": \"http://getbem.com\"\n        }}>{`BEM`}</a></li>\n    </ul>\n    <h2>{`Dette må være installert på maskinen`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Node LTS. Bruk gjerne `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/nvm-sh/nvm\"\n        }}>{`Node Version Manager`}</a>{` om du kan, eller hent fra `}<a parentName=\"li\" {...{\n          \"href\": \"https://nodejs.org/en/download/\"\n        }}>{`Node`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://classic.yarnpkg.com/lang/en/\"\n        }}>{`Yarn Classic`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://git-scm.com\"\n        }}>{`Git`}</a>{` 2.0.0 eller nyere`}</li>\n    </ul>\n    <h2>{`Slik setter du opp utviklingsmiljøet på din egen maskin`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Klon eller fork `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/fremtind/jokul\"\n        }}>{`Jøkul-biblioteket`}</a>{` fra GitHub.`}</li>\n      <li parentName=\"ol\">{`Lag en ny branch og gi den et fornuftig navn etter hva du skal lage.`}</li>\n      <li parentName=\"ol\">{`Bygg prosjektet med kommandoen `}<inlineCode parentName=\"li\">{`yarn boot`}</inlineCode></li>\n    </ol>\n    <h2>{`Slik har vi organisert pakkene`}</h2>\n    <p>{`Alle komponentene er organisert under `}<inlineCode parentName=\"p\">{`/packages`}</inlineCode>{`. De som slutter på `}<inlineCode parentName=\"p\">{`-react`}</inlineCode>{` er React-pakker. De som ikke har en endelse, er stilpakker. Stilpakkene skal være generelle og du kan bruke dem uten noe JavaScript-rammeverk. Hver enkelt pakke inneholder et eksempel, som du kan kan starte med `}<inlineCode parentName=\"p\">{`yarn dev`}</inlineCode>{` fra hver enkelt pakke. Noen av stilpakkene mangler eksempler, fordi det kreves en del JavaScript for å få eksempelet til å kjøre. `}<inlineCode parentName=\"p\">{`Select`}</inlineCode>{` og `}<inlineCode parentName=\"p\">{`Datepicker`}</inlineCode>{` er eksempler på dette.`}</p>\n    <h2>{`Slik håndterer vi brancher og versjoner`}</h2>\n    <p>{`Vi organiserer koden i et monorepo og bruker `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/lerna/lerna\"\n      }}>{`Lerna`}</a>{` for å holde kontroll på de individuelle pakkene i repositoriet. Hver enkelt pakke følger `}<a parentName=\"p\" {...{\n        \"href\": \"https://semver.org\"\n      }}>{`semantisk versjonering`}</a>{`. Nye versjoner og Changelog blir automatisk generert fra commit-loggen basert på `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.conventionalcommits.org/en/v1.0.0/\"\n      }}>{`Conventional commits`}</a>{`. Derfor er det satt regler for hvordan en commit skal se ut. Du kan bruke kommandoen `}<inlineCode parentName=\"p\">{`yarn commit`}</inlineCode>{` for å få hjelp med å lage en riktig formatert commitmelding.`}</p>\n    <p>{`All utvikling skjer på brancher basert på hovedbranchen. Når du er klar lager du en `}<a parentName=\"p\" {...{\n        \"href\": \"/komigang/pullrequests\"\n      }}>{`pull request`}</a>{` med mål om å gjøre en merge til hovedbranchen. Når endringen merges inn sørger Github Actions for å automatisk bygge og publisere nye versjoner av pakkene som er endret.`}</p>\n    <h2>{`Slik lager du en ny pakke`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Gå til rot og kjør kommandoen `}<inlineCode parentName=\"li\">{`lerna create <pakke-navn>`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Du får noen spørsmål om pakken. Fyll ut så godt du kan. Husk at navnet på pakken skal starte med `}<inlineCode parentName=\"li\">{`@fremtind/jkl-`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Når pakken er opprettet, finner du en pakke av typen du skal lage (stil eller React). Kopier de script- og oppsettfilene du trenger, for eksempel `}<inlineCode parentName=\"li\">{`tsconfig-for-declarations.json`}</inlineCode>{` for React-pakker eller `}<inlineCode parentName=\"li\">{`gulpfile.js`}</inlineCode>{` for stilpakker.`}</li>\n    </ol>\n    <h2>{`Slik lenker du pakker sammen`}</h2>\n    <p>{`Hvis du vil legge til en pakke i en annen, kan du fra hvor som helst i prosjektet kjøre `}<inlineCode parentName=\"p\">{`lerna add <pakke-som-skal-legges-til> --scope=<pakken-den-skal-inn-i>`}</inlineCode>{`. For eksempel vil `}<inlineCode parentName=\"p\">{`lerna add @fremtind/jkl-core scope=@fremtind/jkl-button`}</inlineCode>{` legge til `}<inlineCode parentName=\"p\">{`jkl-core`}</inlineCode>{` som en avhengighet i `}<inlineCode parentName=\"p\">{`jkl-button`}</inlineCode>{`-pakken. Når du legger til avhengigheter på denne måten, kan Lerna bruke den lokale versjonen av `}<inlineCode parentName=\"p\">{`jkl-core`}</inlineCode>{` i stedet for å laste ned fra NPM, slik at du kan utvikle raskere. Dette fungerer bare for andre pakker i Jøkul.`}</p>\n    <h2>{`Slik legger du til en avhengighet`}</h2>\n    <p>{`Det finnes avhengigheter på ulike nivåer i Jøkul. Globale avhengigheter, for eksempel de som trengs til å kjøre en byggejobb, ligger på rotnivå. Du kan legge til en ny pakke på rotnivå, med kommandoen `}<inlineCode parentName=\"p\">{`yarn add pakke -W`}</inlineCode>{`. For å legge til som en utviklingsavhengighet bruker du `}<inlineCode parentName=\"p\">{`-DW`}</inlineCode>{`.`}</p>\n    <p>{`Lokale avhengigheter, som trengs for at en pakke skal fungere i bruk, legger vi vanligvis på pakkenivå. Se \"Slik lenker du pakker sammen\". Bruk kommandoen `}<inlineCode parentName=\"p\">{`yarn add`}</inlineCode>{` for å legge til pakker som ikke er en del av Jøkul. Før du gjør det, er det lurt å tenke på om de skal sendes med komponenten eller om brukeren av komponenten har ansvaret for å ha avhengigheten i sitt prosjekt. React bør for eksempel være en `}<inlineCode parentName=\"p\">{`peerDependency`}</inlineCode>{`, slik at brukeren ikke ender opp med flere utgaver av React i sin pakke.`}</p>\n    <h2>{`Ende til ende tester`}</h2>\n    <p>{`Hvis du lager en ny komponent, så kan du installere Cypress lokalt og utvikle ny integrasjons- og visuell regresjonstest av komponenten din.`}</p>\n    <p>{`Hvis du gjør endring i en komponent som har visuell regresjonstest, sørg for at endringen din er ønsket og forventet på alle støttede plattformer. Så sletter du de eksisterende snapshotene av komponenten i prosjektet.`}</p>\n    <p>{`Grunnen til at vi ikke vil ha lokale snapshots inn, er fordi vi ønsker at konteineren som kjører testene på vår CI server er fastiten. Den vil ikke rendere 100% likt som din maskin, så får å unngå konflikter lar vi CI serveren styre. Den vil commite inn de nye eller oppdaterte snapshotene hvis testene passerer.`}</p>\n    <h2>{`Les mer`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Tester: `}<a parentName=\"li\" {...{\n          \"href\": \"/komigang/tester\"\n        }}>{`Kom i gang med tester`}</a></li>\n      <li parentName=\"ul\">{`Pullrequests: `}<a parentName=\"li\" {...{\n          \"href\": \"/komigang/pullrequests\"\n        }}>{`Bidra til Jøkul på GitHub`}</a></li>\n      <li parentName=\"ul\">{`Portalen: `}<a parentName=\"li\" {...{\n          \"href\": \"/komigang/portalen\"\n        }}>{`Dokumentasjon til portalen`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}