diff --git a/node_modules/@nrk/core-datepicker/jsx.js b/node_modules/@nrk/core-datepicker/jsx.js
index f1b5c26..fb0d2e6 100644
--- a/node_modules/@nrk/core-datepicker/jsx.js
+++ b/node_modules/@nrk/core-datepicker/jsx.js
@@ -351,6 +351,35 @@ var index_min = {exports: {}};
 
 var _parse = index_min.exports;
 
+var FILL = {
+  month: function month(self, value) {
+    if (!self.disabled(value)) {
+      return value;
+    }
+
+    var firstAvailableDate = daysInMonth(self.parse(value)).filter(function (day) {
+      return !self.disabled(day);
+    })[0];
+    return firstAvailableDate || value;
+  },
+  "null": function _null(_self, value) {
+    return value;
+  }
+};
+var DISABLED = {
+  month: function month(self, value) {
+    var allDays = daysInMonth(self.parse(value));
+    var allDaysDisabled = allDays.map(function (day) {
+      return self.disabled(day);
+    }).reduce(function (a, b) {
+      return a && b;
+    });
+    return allDaysDisabled;
+  },
+  "null": function _null(self, value) {
+    return self.disabled(value);
+  }
+};
 var MASK = {
   year: '*-m-d',
   month: 'y-*-d',
@@ -429,14 +458,21 @@ var CoreDatepicker = /*#__PURE__*/function (_HTMLElement) {
     value: function handleEvent(event) {
       // Filter event and target
       if (event.defaultPrevented || event.ctrlKey || event.metaKey || event.shiftKey || event.altKey || event.type === 'keydown' && !KEYS[event.keyCode]) return;
-      if (!this.contains(event.target) && !closest$1(event.target, "[for=\"".concat(this.id, "\"],[data-for=\"").concat(this.id, "\"]"))) return;
-
+      if (!this.contains(event.target) && !closest(event.target, "[for=\"".concat(this.id, "\"]").concat(", [data-for=\"".concat(this.id, "\"]")))) return;
       if (event.type === 'change') {
-        this.date = MASK[event.target.getAttribute('data-type')].replace('*', event.target.value);
-      } else if (event.type === 'click') {
+        var date = MASK[event.target.getAttribute('data-type')].replace('*', event.target.value);
+        this.date = FILL[event.target.getAttribute('data-fill')](this, date);
+      }
+      else if (event.type === 'click') {
         var button = closest$1(event.target, 'button[value]');
         var table = closest$1(event.target, 'table');
-        if (button) this.date = button.value;
+        if (button) {
+          var date = MASK[button.getAttribute('data-type')].replace('*', button.value);
+          var match = button.value.match(new RegExp(Object.keys(FILL).filter(key => key !== "null").join("\|")));
+          var fillMethod = match && match[0];
+          date = FILL[fillMethod](this, date);
+          this.date = date;
+        }
         if (button && table) dispatchEvent(this, 'datepicker.click.day');
       } else if (event.type === 'keydown') {
         var _table = closest$1(event.target, 'table');
@@ -570,7 +606,9 @@ function setupButton(self, el) {
 
   el.type = 'button'; // Ensure forms are not submitted by datepicker-buttons
 
-  el.disabled = self.disabled(el.value);
+  var match = el.value.match(new RegExp(Object.keys(DISABLED).filter(key => key !== "null").join("\|")));
+  var disabledMethod = match && match[0];
+  el.disabled = DISABLED[disabledMethod](self, el.value);
 }
 
 function setupInput(self, el) {
@@ -623,18 +661,34 @@ function setupTable(self, table) {
 function setupSelect(self, select) {
   if (!select.firstElementChild) {
     select._autofill = true;
+    select.setAttribute('data-fill', 'month');
     select.innerHTML = self.months.map(function (name, month) {
       return "<option value=\"y-".concat(month + 1, "-d\"></option>");
     }).join('');
   }
 
+  var disabled = DISABLED[select.getAttribute('data-fill')];
   queryAll(select.children).forEach(function (option, month) {
     if (select._autofill) option.textContent = self.months[month];
-    option.disabled = self.disabled(option.value);
+    option.disabled = disabled(self, option.value);
     option.selected = !self.diff(option.value);
   });
 }
 
+function daysInMonth(dateInMonth) {
+  var date = new Date(dateInMonth);
+  date.setDate(1);
+  var month = date.getMonth();
+  var days = [];
+
+  while (date.getMonth() === month) {
+    days.push(new Date(date));
+    date.setDate(date.getDate() + 1);
+  }
+
+  return days;
+}
+
 var version = "4.0.0";
 
 /**
@@ -669,7 +723,7 @@ var closest = function () {
 
 function customElementToReact(elementClass, options) {
   if (options === void 0) options = {};
-  var name = elementClass.name || String(elementClass).match(/function ([^(]+)/)[1]; // String match for IE11
+  var name = options.name || elementClass.name || String(elementClass).match(/function ([^(]+)/)[1] // String match for IE11
 
   var dashCase = name.replace(/.[A-Z]/g, function (ref) {
     var a = ref[0];
@@ -786,10 +840,8 @@ function customElementToReact(elementClass, options) {
   }(React__default["default"].Component);
 }
 
-var coreDatepicker = customElementToReact(CoreDatepicker, {
+export default customElementToReact(CoreDatepicker, {
   props: ['disabled'],
   customEvents: ['datepicker.change', 'datepicker.click.day'],
   suffix: version
 });
-
-module.exports = coreDatepicker;
