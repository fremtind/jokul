{"version":3,"file":"component---packages-toggle-switch-react-documentation-toggle-switch-mdx-584c29c8f9d379277353.js","mappings":"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","sources":["webpack://@fremtind/portal/../packages/toggle-switch-react/src/ToggleSwitch.tsx","webpack://@fremtind/portal/../packages/toggle-switch-react/src/ToggleSlider.tsx","webpack://@fremtind/portal/../packages/toggle-switch-react/documentation/Example.tsx","webpack://@fremtind/portal/../packages/toggle-switch-react/documentation/ToggleSwitch.mdx"],"sourcesContent":["import React, { ReactNode, MouseEventHandler, FC } from \"react\";\nimport { SupportLabel } from \"@fremtind/jkl-core\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    children: ReactNode;\n    pressed?: boolean;\n    className?: string;\n    onClick?: MouseEventHandler<HTMLButtonElement>;\n    disabled?: boolean;\n    /** @deprecated */\n    inverted?: boolean;\n    helpLabel?: string;\n}\n\nexport const ToggleSwitch: FC<Props> = ({ children, pressed, onClick, className, disabled, inverted, helpLabel }) => {\n    const componentClassName = classNames(\"jkl-toggle-switch\", className, {\n        \"jkl-toggle-switch--inverted\": inverted,\n    });\n\n    return (\n        <>\n            <button\n                type=\"button\"\n                aria-pressed={!!pressed}\n                disabled={disabled}\n                className={componentClassName}\n                onClick={onClick}\n            >\n                <span className=\"jkl-toggle-switch__slider\">\n                    <span className=\"jkl-toggle-switch__expanding-pill\"></span>\n                </span>\n                {children}\n            </button>\n            {helpLabel && <SupportLabel className=\"jkl-toggle-switch__help-label\" helpLabel={helpLabel} />}\n        </>\n    );\n};\n","import React, { useState, FC } from \"react\";\nimport classNames from \"classnames\";\nimport { nanoid } from \"nanoid\";\nimport { ScreenReaderOnly } from \"@fremtind/jkl-core\";\n\ninterface Props {\n    labels: [string, string];\n    onToggle: (value: string) => void;\n    defaultValue?: string;\n    className?: string;\n    /** @deprecated */\n    inverted?: boolean;\n    screenReaderLabel?: string;\n    screenReaderSelectedLabel?: string;\n}\n\nexport const ToggleSlider: FC<Props> = ({\n    labels,\n    className = \"\",\n    inverted,\n    onToggle,\n    defaultValue,\n    children,\n    screenReaderLabel,\n    screenReaderSelectedLabel,\n}) => {\n    const [checked, setChecked] = useState(defaultValue !== labels[0]);\n    const [currentLabel, setCurrentLabel] = useState(defaultValue || labels[0]);\n    const [id] = useState(nanoid(8));\n\n    const selectedLabel = screenReaderSelectedLabel || `${currentLabel} valgt`;\n    const ariaLabel = screenReaderLabel || `, ${selectedLabel}`;\n\n    const handleChange = () => {\n        const nextValue = !checked;\n        const nextLabel = labels[nextValue ? 1 : 0];\n        setChecked(nextValue);\n        setCurrentLabel(nextLabel);\n        return onToggle(nextLabel);\n    };\n\n    return (\n        <div\n            className={classNames(\n                \"jkl-toggle-slider__wrapper\",\n                { \"jkl-toggle-slider__wrapper--inverted\": inverted },\n                className,\n            )}\n        >\n            <div role=\"region\" aria-live=\"polite\">\n                <ScreenReaderOnly>{selectedLabel}</ScreenReaderOnly>\n            </div>\n\n            <label\n                id={`${id}-label`}\n                htmlFor={id}\n                className=\"jkl-toggle-slider__label jkl-component-spacing--medium-right\"\n            >\n                {children}\n                <ScreenReaderOnly>{ariaLabel}</ScreenReaderOnly>\n            </label>\n\n            <button\n                id={id}\n                data-testid=\"jkl-toggle-slider\"\n                type=\"button\"\n                role=\"switch\"\n                aria-checked={checked}\n                aria-labelledby={`${id}-label`}\n                onClick={handleChange}\n                className={classNames(\"jkl-toggle-slider\", {\n                    \"jkl-toggle-slider--checked\": checked,\n                    \"jkl-toggle-slider--not-checked\": !checked,\n                })}\n            >\n                <span className=\"jkl-toggle-slider__pill\" aria-hidden />\n                <span className=\"jkl-toggle-slider--left\">{labels[0]}</span>\n                <span className=\"jkl-toggle-slider--right\">{labels[1]}</span>\n            </button>\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { ExampleComponentProps } from \"../../../doc-utils\";\nimport { ToggleSlider, ToggleSwitch } from \"../src\";\n\nexport const Switch: React.FC<ExampleComponentProps> = ({ boolValues }) => {\n    const [isOn, setIsOn] = useState(false);\n    const helpLabel =\n        boolValues && boolValues[\"Med hjelpetekst\"] ? \"Du må være koblet til wifi for å velge dette\" : undefined;\n    return (\n        <ToggleSwitch\n            pressed={isOn}\n            onClick={() => setIsOn(!isOn)}\n            inverted={boolValues && boolValues[\"Invertert\"]}\n            disabled={boolValues && boolValues[\"Deaktivert\"]}\n            helpLabel={helpLabel}\n        >\n            Send inn data om min kjørestil\n        </ToggleSwitch>\n    );\n};\n\nexport const Slider: React.FC<ExampleComponentProps> = ({ boolValues }) => {\n    return (\n        <ToggleSlider\n            defaultValue=\"måned\"\n            labels={[\"måned\", \"år\"]}\n            onToggle={console.log}\n            inverted={boolValues && boolValues[\"Invertert\"]}\n        >\n            Pris per\n        </ToggleSlider>\n    );\n};\n\nconst Example: React.FC<ExampleComponentProps> = (props) => (\n    <section>\n        <Switch {...props} />\n        <div className=\"jkl-layout-spacing--large-top\">\n            <Slider {...props} />\n        </div>\n    </section>\n);\n\nexport default Example;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Switch, Slider } from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Med veksleknapper kan brukerne bytte mellom to statuser (av eller på) uten at de må bekrefte valget. Ledeteksten forteller hva brukeren slår av og på. Vi har to varianter, en ren av/på knapp og en slider variant der man velger mellom to states.\n    </Ingress>\n    <h2>{`ToggleSwitch`}</h2>\n    <ComponentExample component={Switch} knobs={{\n      boolProps: [\"Invertert\", \"Deaktivert\", \"Med hjelpetekst\"]\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Veksleknapper passer til situasjoner der brukerne selv kan velge å ha en funksjon av eller på, for eksempel automatisk oppdatering eller automatisk lagring.`}</p>\n    <p>{`Ikke bruk veksleknapp hvis brukeren må bekrefte valget sitt.`}</p>\n    <h2>{`ToggleSlider`}</h2>\n    <ComponentExample component={Slider} knobs={{\n      boolProps: []\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Brukes der brukeren kan velge mellom to valg.`}</p>\n    <h2>{`Eksempler på bruk`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Slå innstillinger av eller på i en applikasjon.`}</li>\n      <li parentName=\"ul\">{`Bytte mellom lys eller mørk modus i et grensesnitt.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["ToggleSwitch","children","pressed","onClick","className","disabled","inverted","helpLabel","componentClassName","classNames","type","ToggleSlider","labels","onToggle","defaultValue","screenReaderLabel","screenReaderSelectedLabel","useState","checked","setChecked","currentLabel","setCurrentLabel","id","nanoid","selectedLabel","ariaLabel","role","htmlFor","nextValue","nextLabel","Switch","boolValues","isOn","setIsOn","undefined","Slider","console","log","_frontmatter","makeShortcode","name","props","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","boolProps","parentName","isMDXComponent"],"sourceRoot":""}