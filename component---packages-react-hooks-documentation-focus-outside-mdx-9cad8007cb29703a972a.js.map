{"version":3,"file":"component---packages-react-hooks-documentation-focus-outside-mdx-9cad8007cb29703a972a.js","mappings":"wKAEO,SAASA,EAAgBC,EAAoCC,GAChE,SAASC,EAAmBC,GACpBH,MAAAA,GAAAA,EAAKI,UAAYJ,EAAII,QAAQC,SAASF,EAAMG,SAC5CL,KAIRM,EAAAA,EAAAA,YAAU,WAIN,OAHIP,GACAQ,UAAYA,SAASC,iBAAiB,UAAWP,GAE9C,WACCF,GACAQ,UAAYA,SAASE,oBAAoB,UAAWR,S,yJCsBpE,EAlCiC,WAC7B,OAAwCS,EAAAA,EAAAA,UAAS,GAA1CC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAApCG,EAAP,KAAkBC,EAAlB,KACMf,GAAMgB,EAAAA,EAAAA,QAAO,MAUnB,OANAjB,EAAAA,EAAAA,GAAgBC,GAAK,WACbc,GACAD,EAAgBD,EAAe,MAKnC,+BACI,qBAAGK,UAAU,kCAAb,gHAIA,uBAAKjB,IAAKA,EAAKiB,UAAU,2DAAzB,yBAC0B,8BAASL,GAC/B,2BACA,0BAAQK,UAAU,uDAAuDC,QAjB/D,kBAAMH,GAAcD,KAkBzBA,EAAY,YAAc,WAE/B,0BAAQG,UAAU,kCAAkCC,QArBtC,kBAAML,EAAgB,KAqBpC,qBAIJ,0BAAQI,UAAU,wDAAlB,oB,iBCvBCE,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,KAGZG,EAAUL,EAAc,WACxBM,EAAmBN,EAAc,oBACjCO,EAAc,CAClBR,aAAAA,GAEIS,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGT,GACF,YACD,OAAO,SAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,eAI5E,SAACP,EAAD,CAASO,QAAQ,WAAjB,0JAIA,SAACN,EAAD,CAAkBO,UAAWC,EAAqBF,QAAQ,sBAK9DF,EAAWK,gBAAiB","sources":["webpack://@fremtind/portal/../packages/react-hooks/src/useFocusOutside.ts","webpack://@fremtind/portal/../packages/react-hooks/documentation/FocusOutsideExample.tsx","webpack://@fremtind/portal/../packages/react-hooks/documentation/focusOutside.mdx"],"sourcesContent":["import { RefObject, useEffect } from \"react\";\n\nexport function useFocusOutside(ref: RefObject<HTMLElement> | null, fn: () => void): void {\n    function handleFocusOutside(event: FocusEvent) {\n        if (ref?.current && !ref.current.contains(event.target as Node)) {\n            fn();\n        }\n    }\n\n    useEffect(() => {\n        if (ref) {\n            document && document.addEventListener(\"focusin\", handleFocusOutside);\n        }\n        return () => {\n            if (ref) {\n                document && document.removeEventListener(\"focusin\", handleFocusOutside);\n            }\n        };\n    });\n}\n","import React, { useState, useRef, VFC } from \"react\";\nimport { useFocusOutside } from \"../src/useFocusOutside\";\n\nconst FocusOutsideExample: VFC = () => {\n    const [focusCounter, setFocusCounter] = useState(0);\n    const [isEnabled, setIsEnabled] = useState(false);\n    const ref = useRef(null);\n    const resetFocusCounter = () => setFocusCounter(0);\n    const toggleEnabled = () => setIsEnabled(!isEnabled);\n\n    useFocusOutside(ref, () => {\n        if (isEnabled) {\n            setFocusCounter(focusCounter + 1);\n        }\n    });\n\n    return (\n        <section>\n            <p className=\"jkl-body jkl-spacing-l--bottom\">\n                Fokuser på et element utenfor kortet for å øke telleren. Når du flytter fokus tilbake vil ikke telleren\n                øke.\n            </p>\n            <div ref={ref} className=\"jkl-card focus-outside-example__card jkl-spacing-l--top\">\n                Antall fokus utenfor: <strong>{focusCounter}</strong>\n                <br />\n                <button className=\"jkl-button jkl-button--secondary jkl-spacing-l--left\" onClick={toggleEnabled}>\n                    {isEnabled ? \"Deaktiver\" : \"Aktiver\"}\n                </button>\n                <button className=\"jkl-button jkl-button--tertiary\" onClick={resetFocusCounter}>\n                    Nullstill teller\n                </button>\n            </div>\n            <button className=\"jkl-button jkl-button--secondary jkl-spacing-xl--top\">Utenfor kortet</button>\n        </section>\n    );\n};\n\nexport default FocusOutsideExample;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport FocusOutsideExample from \"./FocusOutsideExample\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    useFocusOutside lar deg lytte etter elementfokus utenfor et gitt element, for eksempel når du tabber ut av en\n    datovelger, og utføre en gitt handling.\n    </Ingress>\n    <ComponentExample component={FocusOutsideExample} mdxType=\"ComponentExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["useFocusOutside","ref","fn","handleFocusOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useState","focusCounter","setFocusCounter","isEnabled","setIsEnabled","useRef","className","onClick","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","FocusOutsideExample","isMDXComponent"],"sourceRoot":""}