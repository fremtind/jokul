@charset "UTF-8";
@use "../../../core/jkl/" as jkl;
@use "sass:math";
@use "sass:map";

/* ==========================================================================
   1. Konfigurasjon
   ========================================================================== */

// Angir globale CSS custom properties for maksimale container-bredder.
:root {
    --container-md: 43.75rem;
    --container-lg: 60rem;
    --container-xl: 75rem;
    --container-xxl: 90rem;
    --container-full: 100%;
}

// Definerer responsive breakpoints som brukes for media queries.
$breakpoints: (
    "xs": 0,
    "sm": 37.5em,
    "md": 50em,
    "lg": 64em,
    "xl": 75em,
    "xxl": 101.25em,
);

// Map for å generere `gap`-klasser.
// Verdiene tilsvarer våre unit-variabler.
$gap-values: (
    "none": 0,
    "xs": var(--jkl-unit-10),
    "sm": var(--jkl-unit-20),
    "md": var(--jkl-unit-30),
    "lg": var(--jkl-unit-40),
    "xl": var(--jkl-unit-50),
    "xxl": var(--jkl-unit-130),
);

// Map for å generere klasser for uniforme (jevnt fordelte) kolonner.
// Nøkkelen (key) representerer antall elementer, og verdien (value) er hvor mange
// av de 12 grid-kolonnene hvert element skal oppta.
$uniform-layouts: (
    "0": "auto",
    // Automatisk bredde basert på innhold
    "1": 12,
    // 1 element i full bredde
    "2": 6,
    // 2 elementer, 50% bredde hver
    "3": 4,
    // 3 elementer, 33.3% bredde hver
    "4": 3,
    // 4 elementer, 25% bredde hver
    "6": 2,
    // 6 elementer, 16.6% bredde hver
);

// Map for å generere asymmetriske layout-klasser (f.eks. .sm-2\.10).
// Nøkkelen (key) er klassens suffiks, og verdien (value) angir bredden i antall
// grid-kolonner for elementer på oddetallsplassering (1, 3, 5, ...).
// Bredden for partallselementer beregnes automatisk (12 - verdi).
$asymmetric-layouts: (
    "2\\.10": 2,
    "10\\.2": 10,
    "3\\.9": 3,
    "9\\.3": 9,
    "4\\.8": 4,
    "8\\.4": 8,
    "5\\.7": 5,
    "7\\.5": 7,
);

// Sass-map for å generere generiske hjelpeklasser (utility classes).
// Hver nøkkel på toppnivå er en CSS-egenskap, og de nøstede map-ene
// definerer klassenavn og tilhørende verdi.
$utility-classes: (
    "display": ("inline": inline-flex,
    ),
    "flex-wrap": ("wrap-reverse": wrap-reverse,
        "wrap-nowrap": nowrap,
    ),
    "flex-direction": ("column": column,
        "column-reverse": column-reverse,
        "row-reverse": row-reverse,
    ),
    "text-align": ("text-left": left,
        "text-center": center,
        "text-right": right,
    ),
    "align-items": ("align-start": flex-start,
        "align-center": center,
        "align-end": flex-end,
        "align-baseline": baseline,
        "align-stretch": stretch,
    ),
    "align-content": ("align-content-start": flex-start,
        "align-content-center": center,
        "align-content-end": flex-end,
        "align-content-stretch": stretch,
        "align-content-baseline": baseline,
        "align-content-space-around": space-around,
        "align-content-space-between": space-between,
        "align-content-space-evenly": space-evenly,
    ),
    "justify-content": ("justify-start": flex-start,
        "justify-center": center,
        "justify-end": flex-end,
        "justify-space-around": space-around,
        "justify-space-between": space-between,
        "justify-space-evenly": space-evenly,
    ),
);

// Map som definerer maksimale bredder for sentrerte containere (`.center-*`).
// Brukes til å generere responsive breddebegrensninger.
$containers: (
    "md": var(--container-md),
    "lg": var(--container-lg),
    "xl": var(--container-xl),
    "xxl": var(--container-xxl),
);

/* ==========================================================================
   2. Verktøy (Mixins)
   ========================================================================== */

// Mixin for å generere responsive layout-klasser basert på $asymmetric-layouts og $uniform-layouts.
@mixin generate-layout-classes($prefix) {

    // --- Asymmetriske layouts ---
    // Genererer klasser for layouts der oddetalls- og partalls-elementer har ulik bredde.
    @each $class-suffix, $odd-child-columns in $asymmetric-layouts {
        $even-child-columns: 12 - $odd-child-columns;

        .#{$prefix}-#{$class-suffix} {

            > :where(:nth-child(odd)) {
                --jkl-flex-layout: #{$odd-child-columns};
            }

            > :where(:nth-child(even)) {
                --jkl-flex-layout: #{$even-child-columns};
            }
        }
    }

    // --- Uniforme layouts ---
    // Genererer klasser for layouts der alle elementer har lik bredde.
    @each $layout, $value in $uniform-layouts {
        .#{$prefix}-#{$layout} > * {
            --jkl-flex-layout: #{$value};
        }
    }
}

// Mixin for å generere klasser for `row-gap` og `column-gap`.
@mixin generate-gap-classes($prefix) {
    @each $gap-name, $gap-value in $gap-values {
        .#{$prefix}-row-gap-#{$gap-name} {
            row-gap: $gap-value;
        }

        .#{$prefix}-col-gap-#{$gap-name} {
            column-gap: $gap-value;

            // Setter en custom property for å kunne kalkulere nøyaktig kolonnebredde
            // i `flex-basis`, justert for `column-gap`.
            & > * {
                @if $gap-name =="none" {
                    --jkl-flex-gap: #{$gap-value}px;
                }

                @else {
                    --jkl-flex-gap: #{$gap-value};
                }
            }
        }
    }
}

// Generell mixin som itererer gjennom `$utility-classes` for å lage hjelpeklasser.
@mixin generate-utility-classes() {
    @each $property, $map in $utility-classes {
        @each $class-name, $value in $map {
            .#{$class-name} {
                #{$property}: $value;
            }
        }
    }
}

/* ==========================================================================
   3. Kjernestiler
   ========================================================================== */

// Basisstil for alle flex-containere.
:is(.flex) {
    box-sizing: border-box;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
}

// Sørger for at direkte barn av .fill-elementer fyller tilgjengelig plass.
// :where brukes for å holde spesifisiteten lav.
:where(.fill > *) {
    flex-grow: 1;
}

// Definerer standardoppførsel for alle direkte elementer av en `.flex`-container.
:where(.flex > *) {
    --jkl-flex-gap: 0px; // Standard gap er null.
    --jkl-flex-layout: auto; // Standard layout er automatisk bredde.

    box-sizing: border-box;

    // Kalkulerer `flex-basis` for å lage et grid-system som tar hensyn til `gap`.
    // Formelen fordeler bredden basert på antall kolonner definert av `--jkl-flex-layout`.
    flex-basis: calc((100% - (12 / var(--jkl-flex-layout) - 1) * var(--jkl-flex-gap)) / 12 * var(--jkl-flex-layout));

    // Sørger for at elementene kan krympe, for å unngå at de flyter ut av containeren.
    min-width: calc(var(--jkl-flex-layout) * 0px);
    min-height: calc(var(--jkl-flex-layout) * 0px);
}

// Hindrer at elementer krymper når `flex-wrap: nowrap` er satt.
:where(.wrap-nowrap > *) {
    flex-shrink: calc(var(--jkl-flex-layout) * 0);
}

/* ==========================================================================
   4. CSS-generering
   ========================================================================== */

@include generate-utility-classes();

// Stiler for sentrerte containere.
:is(.center-md, .center-lg, .center-xl, .center-xxl) {
    box-sizing: border-box;
    margin-inline: auto;
    width: calc(100% - var(--jkl-unit-50));
}

// Genererer responsive `max-width` for hver container-størrelse.
@each $size, $width in $containers {
    @media (width >=#{map.get($breakpoints, $size)}) {
        .center-#{$size} {
            max-width: $width;
        }
    }
}

// Itererer gjennom alle definerte breakpoints for å generere responsive layout- og gap-klasser.
@each $name, $width in $breakpoints {
    @if $name =="xs" {
        @include generate-layout-classes($name);
        @include generate-gap-classes($name);
    }

    @else {

        @media (width >=#{$width}) {
            @include generate-layout-classes($name);
            @include generate-gap-classes($name);
        }
    }
}
