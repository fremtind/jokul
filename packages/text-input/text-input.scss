@use "~@fremtind/jkl-core/jkl";
@use "~@fremtind/jkl-core/variables/colors";

@import "~@fremtind/jkl-core/_functions.scss";
@import "~@fremtind/jkl-core/mixins/_all.scss";

@import "./autosuggest.scss";

$text-input-height: rem(48px);
$text-input-height--compact: rem(40px);
$text-input-button-width: rem(48px);
$text-input-padding: jkl.$spacing-xs jkl.$spacing-s;

// These are used to calculate textarea height,
// and MUST equal the line height in the text style used
$text-input-line-height: rem(32px);
$text-input-line-height--compact: rem(28px);

$text-input-border-color: jkl.$color-stein;
$text-input-text-color: jkl.$color-granitt;
$text-input-placeholder-color: jkl.$color-stein;
$text-input-background-color: jkl.$color-hvit;
$text-input-focus-color: jkl.$color-granitt;
$text-input-error-background-color: colors.varslingsfarge("feil");
$text-input-error-text-color: jkl.$color-granitt;
$text-input-error-placeholder-color: jkl.$color-stein;
$text-input-selection-color: transparentize(
    $color: $text-input-focus-color,
    $amount: 0.8,
);

$text-input-border-color--inverted: jkl.$color-svaberg;
$text-input-text-color--inverted: jkl.$color-snohvit;
$text-input-placeholder-color--inverted: jkl.$color-svaberg;
$text-input-background-color--inverted: jkl.$color-svart;
$text-input-focus-color--inverted: jkl.$color-snohvit;
$text-input-selection-color--inverted: transparentize(
    $color: $text-input-focus-color--inverted,
    $amount: 0.75,
);

@include light-mode-variables {
    --text-input-border-color: #{$text-input-border-color};
    --text-input-text-color: #{$text-input-text-color};
    --text-input-placeholder-color: #{$text-input-placeholder-color};
    --text-input-background-color: #{$text-input-background-color};
    --text-input-focus-color: #{$text-input-focus-color};
    --text-input-error-background-color: #{$text-input-error-background-color};
    --text-input-error-text-color: #{$text-input-error-text-color};
    --text-input-error-placeholder-color: #{$text-input-error-placeholder-color};
    --text-input-selection-color: #{$text-input-selection-color};
    --text-input-error-selection-color-color: #{$text-input-selection-color};
}

@include dark-mode-variables {
    --text-input-border-color: #{$text-input-border-color--inverted};
    --text-input-text-color: #{$text-input-text-color--inverted};
    --text-input-placeholder-color: #{$text-input-placeholder-color--inverted};
    --text-input-background-color: #{$text-input-background-color--inverted};
    --text-input-focus-color: #{$text-input-focus-color--inverted};
    --text-input-selection-color: #{$text-input-selection-color--inverted};
    --text-input-error-background-color: #{$text-input-error-background-color};
    --text-input-error-text-color: #{$text-input-error-text-color};
    --text-input-error-placeholder-color: #{$text-input-error-placeholder-color};
    --text-input-error-selection-color-color: #{$text-input-selection-color};
}

@mixin shared-input-styles {
    border: none;
    background: none;
    -webkit-appearance: none;

    @include reset-outline;
    @include jkl.text-style("body/large-screen");
    @include motion("standard");

    color: $text-input-text-color;
    color: var(--text-input-text-color);
    background-color: transparent;

    /* Placeholder text style */
    &::placeholder {
        opacity: 1;
        color: $text-input-placeholder-color;
        color: var(--text-input-placeholder-color);
    }

    /* Color of text selection */
    &::selection {
        background-color: $text-input-selection-color;
        background-color: var(--text-input-selection-color);

        [data-theme="dark"] & {
            background-color: $text-input-selection-color--inverted;
            background-color: var(--text-input-selection-color);
        }
    }

    /*  Invalid states */
    &[aria-invalid="true"],
    &:invalid {
        background: $text-input-error-background-color;
        background: var(--text-input-error-background-color);
        color: $text-input-error-text-color;
        color: var(--text-input-error-text-color);

        &::placeholder {
            color: $text-input-error-placeholder-color;
            color: var(--text-input-error-placeholder-color);
        }

        /* Color of text selection */
        &::selection {
            background-color: $text-input-selection-color;
            background-color: var(--text-input-error-selection-color-color);
        }

        & ~ .jkl-text-input__action-button {
            color: $text-input-error-placeholder-color;
            color: var(--text-input-error-placeholder-color);

            &:hover {
                color: $text-input-error-text-color;
                color: var(--text-input-error-text-color);
            }

            &:focus {
                @include keyboard-navigation {
                    &::after {
                        box-shadow: inset 0 0 0 rem(2px) $text-input-error-text-color;
                        box-shadow: inset 0 0 0 rem(2px) var(--text-input-error-text-color);
                    }
                }
            }
        }
    }
}

@mixin shared-error-styles {
    /*  Invalid states */
    &[aria-invalid="true"],
    &:invalid {
        background-color: $text-input-error-background-color;
        background-color: var(--text-input-error-background-color);
        color: $text-input-error-text-color;
        color: var(--text-input-error-text-color);

        /* Color of text selection */
        &::selection {
            background-color: $text-input-selection-color;
            background-color: var(--text-input-error-selection-color-color);
        }
    }
}

.jkl-text-input {
    @include reset-outline;

    &__input-wrapper {
        display: inline-flex;
        align-items: center;
        max-width: 100%;
    }

    &__input {
        @include shared-input-styles;

        border-radius: rem(3px);
        box-sizing: border-box;
        height: $text-input-height;
        padding: $text-input-padding;
        max-width: 100%;
        width: 100%;

        background-color: transparent;
        box-shadow: inset 0 0 0 rem(1px) $text-input-border-color, 0 0 0 rem(1px) transparent;
        box-shadow: inset 0 0 0 rem(1px) var(--text-input-border-color), 0 0 0 rem(1px) transparent;

        transition-property: color, box-shadow, background-color;

        &:hover {
            box-shadow: inset 0 0 0 rem(1px) $text-input-focus-color, 0 0 0 rem(1px) $text-input-focus-color;
            box-shadow: inset 0 0 0 rem(1px) var(--text-input-focus-color), 0 0 0 rem(1px) var(--text-input-focus-color);
            border-color: $text-input-focus-color;
            border-color: var(--text-input-focus-color);
        }

        &:focus,
        &:focus-within {
            background-color: $text-input-background-color;
            background-color: var(--text-input-background-color);
            box-shadow: inset 0 0 0 rem(1px) $text-input-focus-color, 0 0 0 rem(1px) $text-input-focus-color;
            box-shadow: inset 0 0 0 rem(1px) var(--text-input-focus-color), 0 0 0 rem(1px) var(--text-input-focus-color);
            border-color: $text-input-focus-color;
            border-color: var(--text-input-focus-color);
        }

        @include shared-error-styles;
    }

    &__action-button {
        display: inline-flex;
        box-sizing: border-box;
        align-items: center;
        justify-content: center;
        border: none;
        background-color: transparent;
        cursor: pointer;
        padding: 0;
        padding: jkl.$spacing-xs 0;
        height: $text-input-button-width;
        width: $text-input-height;
        margin-left: rem(-48px);
        color: $text-input-border-color;
        color: var(--text-input-border-color);

        &:hover {
            color: $text-input-focus-color;
            color: var(--text-input-focus-color);
        }

        &:focus {
            @include keyboard-navigation {
                position: relative;

                &::after {
                    content: "";
                    position: absolute;
                    top: rem(8px);
                    right: rem(8px);
                    bottom: rem(8px);
                    left: rem(8px);
                    box-shadow: inset 0 0 0 rem(2px) $text-input-focus-color;
                    box-shadow: inset 0 0 0 rem(2px) var(--text-input-focus-color);
                }
            }
        }
    }

    /* Modifications for inline version */
    &--inline {
        display: inline-block;
        margin: rem(-2px) rem(4px);
    }

    /* Modifications for input with action */
    &--action {
        .jkl-text-input__input {
            padding-right: $text-input-height;
        }
    }

    /* Modifications for compact variant (also inline) */
    *[data-compactlayout] &,
    &--compact,
    &--inline {
        .jkl-text-input__input {
            @include jkl.text-style("body/small-screen");
            height: $text-input-height--compact;
        }

        .jkl-text-input__action-button {
            height: $text-input-height--compact;
        }

        .jkl-text-input__action-icon {
            width: rem(18px);
        }
    }
}

.jkl-text-input:not(.jkl-text-area) {
    .jkl-text-input__input {
        line-height: $text-input-height; // Trengs for å unngå clipping av Å i Chrome, men den ødelegger placeholder i textarea (hvor clippingen ikke skjer)
    }
}

*[data-compactlayout] .jkl-text-input:not(.jkl-text-area),
.jkl-text-input--compact:not(.jkl-text-area),
.jkl-text-input--inline:not(.jkl-text-area) {
    .jkl-text-input__input {
        line-height: $text-input-height--compact; // Trengs for å unngå clipping av Å i Chrome, men den ødelegger placeholder i textarea (hvor clippingen ikke skjer)
    }
}

.jkl-text-area {
    height: auto;
    width: 100%;

    & .jkl-text-input__input {
        @include motion("standard");

        transition-property: height, box-shadow;
        font-weight: normal;
        width: 100%;
        resize: none; // Disable textarea resize
    }

    &--with-counter {
        $progress-bar-height: rem(4px);

        .jkl-text-area__content {
            position: relative;
        }

        .jkl-text-input__input {
            height: auto;
            max-height: $text-input-height;
            padding-bottom: jkl.$spacing-xs;
            transition-property: max-height, box-shadow, padding-bottom;

            &[data-has-content="true"],
            &:focus-within {
                max-height: 100%;
                background: var(--text-input-background-color);
                padding-bottom: jkl.$spacing-xl;
            }

            @include shared-error-styles;
        }

        /*
         * Textarea respekterer ikke padding (teksten rendres under det som
         * burde være tomrom), så om vi har en teller må vi wrappe textarea
         * i noe som styles som selve inputfeltet. Det er rollen
         * .jkl-text-input__input har i denne sammenhengen. Denne klassen
         * sørger for at selve textarea-elementet ikke får native styles og
         * får fonter, farger, og høyden den skal.
         */
        .jkl-text-area__text-area {
            @include reset-outline;
            @include shared-input-styles;

            background: transparent;
            font-weight: normal;
            resize: none; // Disable textarea resize
            width: 100%;

            height: calc($text-input-height - (2 * jkl.$spacing-xs));
            padding: 0;

            transition-property: height;

            @include shared-error-styles;
        }

        .jkl-text-area__counter {
            @include motion("standard");
            transition-property: opacity;
            opacity: 0;

            pointer-events: none; // Don't block interactivity when field is collapsed
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;

            &-count {
                @include jkl.text-style("small");
                padding: jkl.$spacing-xs jkl.$spacing-s;
            }

            &-progress {
                background-color: transparent;
                height: $progress-bar-height;
                width: 100%;
                overflow: hidden;

                &::after {
                    content: "";
                    width: var(--progress-width, 100%);
                    display: block;
                    height: $progress-bar-height;
                    background-color: var(--jkl-color);
                    transition-property: width;
                    @include motion("standard", "lazy");
                }
            }
        }

        &:focus-within .jkl-text-area__counter {
            opacity: 1;
            transition-delay: map-get($jkl--timings, "productive"); // Fade in once field is expanded
        }

        [aria-invalid="true"] ~ .jkl-text-area__counter {
            color: var(--text-input-error-text-color);
        }

        *[data-compactlayout] &,
        &.jkl-text-input--compact,
        &.jkl-text-input--inline {
            .jkl-text-input__input {
                max-height: $text-input-height--compact;

                &[data-has-content="true"] {
                    max-height: 100%;
                }

                &:focus-within {
                    max-height: 100%;
                }
            }

            .jkl-text-area__text-area {
                @include jkl.text-style("body/small-screen");
                height: calc($text-input-height - (2 * jkl.$spacing-xs));
            }
        }
    }
}

/* Utility classes for number of rows */
@for $num from 3 through 10 {
    .jkl-text-input__input--#{$num}-rows:focus,
    .jkl-text-input__input--#{$num}-rows:not(:placeholder-shown),
    .jkl-text-area--start-open .jkl-text-input__input--#{$num}-rows {
        max-height: 100%;
        height: $text-input-line-height * $num + jkl.$spacing-xs * 2;
        @include small-device {
            height: $text-input-line-height--compact * $num + jkl.$spacing-xs * 2;
        }

        .jkl-text-input--compact & {
            height: $text-input-line-height--compact * $num + jkl.$spacing-xs * 2;
        }
    }
}
