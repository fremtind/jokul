{"version":3,"file":"component---packages-table-react-documentation-table-mdx-204a96991025a3647b1a.js","mappings":"6MAAYA,E,uCAkBL,SAASC,EAAgBC,GAC5B,MAAO,SAAUA,GAAOA,EAAIC,OAASH,EAAaI,QAnBtD,SAAYJ,GAAAA,EAAAA,OAAAA,SAAZ,CAAYA,IAAAA,EAAAA,KCSL,IAAMK,EAAwB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMJ,EAAuB,EAAvBA,IAAKK,EAAkB,EAAlBA,YAM/C,OACI,sBAAIC,UAAU,wBAGTD,GAAeN,EAAgBC,GAC5B,qBACI,cAAY,+BACZM,UAAU,cACVC,KAAMP,EAAIO,KACVC,QAdhB,SAAuBC,GAEnBA,EAAIC,mBAcSV,EAAIW,gBAETC,EACHR,ICrBAS,EAAuB,SAAC,GAAa,IAAXb,EAAU,EAAVA,IAC7Bc,EAAoBf,EAAgBC,GAAOA,EAAIc,QAAUd,EAE3De,EAAqB,0CACrBP,OAAwEI,EACxEI,OAA4BJ,EAchC,OAZIb,EAAgBC,KAChBQ,EAAU,WACFR,EAAIiB,WACJjB,EAAIiB,WAAWjB,EAAIO,MAEnBW,OAAOC,SAASZ,KAAOP,EAAIO,MAGnCS,EAAQhB,EAAIW,UACZI,GAAsB,+BAItB,sBAAIC,MAAOA,EAAOR,QAASA,EAASF,UAAWS,GAC1CD,EAAQM,KAAI,SAAChB,EAAMiB,GAAP,OACT,gBAAClB,EAAD,CAAWC,KAAMA,EAAMJ,IAAKA,EAAKsB,IAAKD,EAAGhB,YAAmB,IAANgB,SCpBzDE,EAAoB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,KAAMnB,EAAgB,EAAhBA,UAC/C,OACI,yBAAOA,UAAS,cAAeA,GAAwB,KACnD,6BACI,sBAAIA,UAAU,kBACTkB,EAAQJ,KAAI,SAACM,EAAaC,GAAd,OACT,sBAAIrB,UAAU,qBAAqBgB,IAAKK,GACnCD,QAKjB,6BACKD,EAAKL,KAAI,SAACpB,EAAK2B,GAAN,OACN,gBAACd,EAAD,CAAUb,IAAKA,EAAKsB,IAAKK,UCrBvCH,EAAU,CAAC,OAAQ,aAAc,cAAe,YAAa,WAAY,UAAW,gBAEpFC,EAAO,CACT,CAAC,aAAc,aAAc,eAAgB,eAAgB,aAAc,YAAa,sBACxF,CACIlB,KAAM,qBACNN,KAAMH,EAAaI,OACnBS,UAAW,SACXG,QAAS,CACL,aACA,aACA,eACA,2BACA,aACA,YACA,2BAGR,CAAC,aAAc,aAAc,eAAgB,kBAAmB,aAAc,YAAa,sBAE3F,CAAC,aAAc,UAAW,eAAgB,kBAAmB,aAAc,YAAa,eAO5F,EAJqB,WACjB,OAAO,gBAACS,EAAD,CAAOC,QAASA,EAASC,KAAMA,EAAMnB,UAAW,gB,iBClB9CsB,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,KAGZG,EAAUL,EAAc,WACxBM,EAAmBN,EAAc,oBACjCO,EAAc,CAClBR,aAAAA,GAEIS,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGT,GACF,YACD,OAAO,SAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,eAI5E,SAACP,EAAD,CAASO,QAAQ,WAAjB,wFACA,SAACN,EAAD,CAAkBO,UAAWC,EAASF,QAAQ,sBAC9C,yPAKJF,EAAWK,gBAAiB","sources":["webpack://@fremtind/portal/../packages/table-react/src/types.ts","webpack://@fremtind/portal/../packages/table-react/src/TableData.tsx","webpack://@fremtind/portal/../packages/table-react/src/TableRow.tsx","webpack://@fremtind/portal/../packages/table-react/src/Table.tsx","webpack://@fremtind/portal/../packages/table-react/documentation/Example.tsx","webpack://@fremtind/portal/../packages/table-react/documentation/Table.mdx"],"sourcesContent":["export enum TableRowType {\n    Anchor = \"ANCHOR\",\n}\n\nexport interface BaseTableRowData {\n    type: TableRowType;\n}\n\nexport interface TableAnchorRowData extends BaseTableRowData {\n    rowData: string[];\n    type: TableRowType.Anchor;\n    href: string;\n    hrefLabel: string;\n    onRowClick?: (href: string) => void;\n}\n\nexport type TableRowData = string[] | TableAnchorRowData;\n\nexport function isAnchorRowData(row: string[] | TableAnchorRowData): row is TableAnchorRowData {\n    return \"type\" in row && row.type === TableRowType.Anchor;\n}\n","import React, { MouseEvent, VFC } from \"react\";\nimport { TableRowData, isAnchorRowData } from \"./types\";\n\ninterface Props {\n    data: string;\n    row: TableRowData;\n    isFirstCell: boolean;\n}\n\nexport const TableData: VFC<Props> = ({ data, row, isFirstCell }) => {\n    function onAnchorClick(evt: MouseEvent<HTMLAnchorElement>) {\n        // Stop browser link navigation and let the clickHandler on TableRow do the job\n        evt.preventDefault();\n    }\n\n    return (\n        <td className=\"jkl-table__data-cell\">\n            {/* Only create an anchor in the first cell, so that screen readers doesn't read each cell as a link */}\n            {/* The downside of this is that only the first cell can be right clicked and get the anchor context menu */}\n            {isFirstCell && isAnchorRowData(row) ? (\n                <a\n                    data-testid=\"jkl-table__screenreader-link\"\n                    className=\"jkl-sr-only\"\n                    href={row.href}\n                    onClick={onAnchorClick}\n                >\n                    {row.hrefLabel}\n                </a>\n            ) : undefined}\n            {data}\n        </td>\n    );\n};\n","import React, { MouseEvent, VFC } from \"react\";\nimport { TableRowData, isAnchorRowData } from \"./types\";\nimport { TableData } from \"./TableData\";\n\ninterface Props {\n    row: TableRowData;\n}\n\nexport const TableRow: VFC<Props> = ({ row }) => {\n    const rowData: string[] = isAnchorRowData(row) ? row.rowData : row;\n\n    let componentClassName = \"jkl-table__row jkl-table__row--data-row\";\n    let onClick: undefined | ((evt: MouseEvent<HTMLTableRowElement>) => void) = undefined;\n    let title: string | undefined = undefined;\n\n    if (isAnchorRowData(row)) {\n        onClick = () => {\n            if (row.onRowClick) {\n                row.onRowClick(row.href);\n            } else {\n                window.location.href = row.href;\n            }\n        };\n        title = row.hrefLabel;\n        componentClassName += \" jkl-table__row--anchor-row\";\n    }\n\n    return (\n        <tr title={title} onClick={onClick} className={componentClassName}>\n            {rowData.map((data, j) => (\n                <TableData data={data} row={row} key={j} isFirstCell={j === 0} />\n            ))}\n        </tr>\n    );\n};\n","import React, { VFC } from \"react\";\nimport { TableRow } from \"./TableRow\";\nimport { TableRowData } from \"./types\";\n\ninterface Props {\n    columns: string[];\n    rows: Array<TableRowData>;\n    className?: string;\n}\n\nexport const Table: VFC<Props> = ({ columns, rows, className }) => {\n    return (\n        <table className={`jkl-table ${className ? className : \"\"}`}>\n            <thead>\n                <tr className=\"jkl-table__row\">\n                    {columns.map((columnValue, i) => (\n                        <th className=\"jkl-table__heading\" key={i}>\n                            {columnValue}\n                        </th>\n                    ))}\n                </tr>\n            </thead>\n            <tbody>\n                {rows.map((row, i) => (\n                    <TableRow row={row} key={i} />\n                ))}\n            </tbody>\n        </table>\n    );\n};\n","import React, { VFC } from \"react\";\nimport { Table, TableRowType } from \"../src\";\n\nconst columns = [\"Dato\", \"Saksnummer\", \"Kundenummer\", \"Kundenavn\", \"Sakstype\", \"Milepæl\", \"Følger saken\"];\n\nconst rows = [\n    [\"24.02.2020\", \"20-1234567\", \"010203 99887\", \"Ola Nordmann\", \"Etterlatte\", \"Opprettet\", \"Siri Saksbehandler\"],\n    {\n        href: \"https://google.com\",\n        type: TableRowType.Anchor,\n        hrefLabel: \"Google\",\n        rowData: [\n            \"24.12.2020\",\n            \"20-2028732\",\n            \"010203 99887\",\n            \"Kari Nordkvinne Nordmann\",\n            \"Etterlatte\",\n            \"Opprettet\",\n            \"Freja Forsikringstaker\",\n        ],\n    },\n    [\"13.04.2019\", \"20-8382811\", \"010203 99887\", \"Kari Nordkvinne\", \"Etterlatte\", \"Opprettet\", \"Siri Saksbehandler\"],\n\n    [\"31.07.2017\", \"20-1111\", \"010203 99887\", \"Kari Nordkvinne\", \"Etterlatte\", \"Opprettet\", \"Per Persen\"],\n];\n\nconst Example: VFC = () => {\n    return <Table columns={columns} rows={rows} className={\"helloworld\"} />;\n};\n\nexport default Example;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">Vi bruker tabeller for å vise data på en ordnet måte som gjør sammenlikning enkelt.</Ingress>\n    <ComponentExample component={Example} mdxType=\"ComponentExample\" />\n    <p>{`Tabellen består av et sett med navngitte kolonner, og en eller flere rader med data som tilhører de angitte kolonnene. Rader kan være klikkbare, dersom det er naturlig å utføre en handling på eller med informasjonen som vises.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["TableRowType","isAnchorRowData","row","type","Anchor","TableData","data","isFirstCell","className","href","onClick","evt","preventDefault","hrefLabel","undefined","TableRow","rowData","componentClassName","title","onRowClick","window","location","map","j","key","Table","columns","rows","columnValue","i","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","Example","isMDXComponent"],"sourceRoot":""}