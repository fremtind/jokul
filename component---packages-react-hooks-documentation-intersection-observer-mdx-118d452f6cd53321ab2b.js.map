{"version":3,"file":"component---packages-react-hooks-documentation-intersection-observer-mdx-118d452f6cd53321ab2b.js","mappings":"0KAEMA,EAAoC,iBACpB,oBAAXC,QAA0D,oBAAzBC,sBAE/BC,EAA0B,SACnCC,EACAC,EACAC,EACAC,GAEA,IAAMC,GAAcC,EAAAA,EAAAA,QAA6B,OAEjDC,EAAAA,EAAAA,YAAU,WACN,IAAIC,EAAWH,EAAYI,QAC3B,GAAIZ,IAAqC,CACrC,IAAMa,EAAST,EAAUQ,QAErBD,GACAA,EAASG,aAGbH,EAAW,IAAIT,qBAAqBG,EAAaE,GAE7CM,GACAF,EAASI,QAAQF,QAGrBP,IAEJ,OAAO,WACCN,KAAuCW,GACvCA,EAASG,gBAGlB,CAACV,EAAWC,EAAaC,EAAUC,M,gKCH1C,EA5ByC,WACrC,OAAwCS,EAAAA,EAAAA,WAAS,GAA1CC,EAAP,KAAqBC,EAArB,KACMd,GAAYK,EAAAA,EAAAA,QAAO,MAUzB,OAFAN,EAAAA,EAAAA,GAAwBC,GANJ,SAACe,GACjBD,EAAgBC,EAAQC,MAAK,SAACC,GAAD,OAAWA,EAAMC,sBAEjC,kBAAMC,QAAQC,IAAI,wCACnB,CAAEC,WAAY,MAAOC,UAAW,CAAC,EAAK,KAKlD,uBACIC,UAAS,6BACLV,EAAe,oCAAsC,0CAGzD,qBAAGU,UAAU,+BAA+BC,MAAO,CAAEC,OAAQ,UAA7D,4BAGA,qBAAGF,UAAU,+BAA+BG,IAAK1B,GAAjD,+C,iBChBC2B,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAX,QAAQY,KAAK,aAAeF,EAAO,4EAC5B,eAASC,KAGZE,EAAUJ,EAAc,WACxBK,EAAmBL,EAAc,oBACjCM,EAAc,CAClBP,aAAAA,GAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGR,GACF,YACD,OAAO,SAACK,EAAD,iBAAeD,EAAiBJ,EAAhC,CAAuCQ,WAAYA,EAAYC,QAAQ,eAI5E,SAACP,EAAD,CAASO,QAAQ,WAAjB,qRAKA,SAACN,EAAD,CAAkBO,UAAWC,EAA6BF,QAAQ,sBAKtEF,EAAWK,gBAAiB","sources":["webpack://@fremtind/portal/../packages/react-hooks/src/useIntersectionObserver/useIntersectionObserver.ts","webpack://@fremtind/portal/../packages/react-hooks/documentation/IntersectionObserverExample.tsx","webpack://@fremtind/portal/../packages/react-hooks/documentation/intersectionObserver.mdx"],"sourcesContent":["import { useEffect, useRef, RefObject } from \"react\";\n\nconst hasWindowWithIntersectionObserver = () =>\n    typeof window !== \"undefined\" && typeof IntersectionObserver !== \"undefined\";\n\nexport const useIntersectionObserver = (\n    targetRef: RefObject<HTMLElement | SVGElement>,\n    onIntersect: IntersectionObserverCallback,\n    fallback: VoidFunction,\n    options?: Partial<IntersectionObserverInit>,\n): void => {\n    const observerRef = useRef<IntersectionObserver>(null);\n\n    useEffect(() => {\n        let observer = observerRef.current;\n        if (hasWindowWithIntersectionObserver()) {\n            const target = targetRef.current;\n\n            if (observer) {\n                observer.disconnect();\n            }\n\n            observer = new IntersectionObserver(onIntersect, options);\n\n            if (target) {\n                observer.observe(target);\n            }\n        } else {\n            fallback();\n        }\n        return () => {\n            if (hasWindowWithIntersectionObserver() && observer) {\n                observer.disconnect();\n            }\n        };\n    }, [targetRef, onIntersect, fallback, options]);\n};\n","import React, { VFC, useRef, useState } from \"react\";\nimport { useIntersectionObserver } from \"../src/useIntersectionObserver/useIntersectionObserver\";\nimport \"./index.scss\";\n\nconst IntersectionObserverExample: VFC = () => {\n    const [isInViewport, setIsInViewport] = useState(false);\n    const targetRef = useRef(null);\n\n    const onIntersect = (entires: IntersectionObserverEntry[]) => {\n        setIsInViewport(entires.some((entry) => entry.isIntersecting));\n    };\n    const fallback = () => console.log(\"IntersectionObserver not supported\");\n    const options = { rootMargin: \"0px\", threshold: [0.0, 1.0] };\n\n    useIntersectionObserver(targetRef, onIntersect, fallback, options);\n\n    return (\n        <div\n            className={`jlk-intersection-example ${\n                isInViewport ? \"jlk-intersection-example--visible\" : \"jlk-intersection-example--not-visible\"\n            }`}\n        >\n            <p className=\"jkl-body jkl-spacing-xl--all\" style={{ height: \"100vh\" }}>\n                Scroll for å endre farge\n            </p>\n            <p className=\"jkl-body jkl-spacing-xl--all\" ref={targetRef}>\n                Scroll tilbake for å endre fargen tilbake\n            </p>\n        </div>\n    );\n};\n\nexport default IntersectionObserverExample;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport IntersectionObserverExample from \"./IntersectionObserverExample\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    useIntersectionObserver lar deg lytte på om et element er synlig eller ikke. Det gjør det mulig å animere innhold\n    inn, eller prelaste innhold som er rett uten for viewporten. I eksemplet brukes det til å bytte bakgrunnsfarge når\n    andre paragrafen kommer helt inn i visning.\n    </Ingress>\n    <ComponentExample component={IntersectionObserverExample} mdxType=\"ComponentExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["hasWindowWithIntersectionObserver","window","IntersectionObserver","useIntersectionObserver","targetRef","onIntersect","fallback","options","observerRef","useRef","useEffect","observer","current","target","disconnect","observe","useState","isInViewport","setIsInViewport","entires","some","entry","isIntersecting","console","log","rootMargin","threshold","className","style","height","ref","_frontmatter","makeShortcode","name","props","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","IntersectionObserverExample","isMDXComponent"],"sourceRoot":""}