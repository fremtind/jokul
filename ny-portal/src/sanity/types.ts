/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
    _type: "sanity.imagePaletteSwatch";
    background?: string;
    foreground?: string;
    population?: number;
    title?: string;
};

export type SanityImagePalette = {
    _type: "sanity.imagePalette";
    darkMuted?: SanityImagePaletteSwatch;
    lightVibrant?: SanityImagePaletteSwatch;
    darkVibrant?: SanityImagePaletteSwatch;
    vibrant?: SanityImagePaletteSwatch;
    dominant?: SanityImagePaletteSwatch;
    lightMuted?: SanityImagePaletteSwatch;
    muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
    _type: "sanity.imageDimensions";
    height?: number;
    width?: number;
    aspectRatio?: number;
};

export type SanityFileAsset = {
    _id: string;
    _type: "sanity.fileAsset";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    altText?: string;
    sha1hash?: string;
    extension?: string;
    mimeType?: string;
    size?: number;
    assetId?: string;
    uploadId?: string;
    path?: string;
    url?: string;
    source?: SanityAssetSourceData;
};

export type Geopoint = {
    _type: "geopoint";
    lat?: number;
    lng?: number;
    alt?: number;
};

export type Jokul_storybookStory = {
    _type: "jokul_storybookStory";
    storyId?: string;
    storyName?: string;
};

export type Jokul_storybook = {
    _type: "jokul_storybook";
    stories?: Array<
        {
            _key: string;
        } & Jokul_storybookStory
    >;
};

export type Jokul_codeExample = {
    _type: "jokul_codeExample";
    showEditor?: boolean;
    codeExample?: string;
};

export type Jokul_componentProps = {
    _type: "jokul_componentProps";
    componentFolder?: string;
};

export type Jokul_component = {
    _id: string;
    _type: "jokul_component";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    slug?: Slug;
    name?: string;
    short_description?: string;
    image?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
    };
    documentation_article?: Array<
        | {
              children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: "span";
                  _key: string;
              }>;
              style?:
                  | "normal"
                  | "h1"
                  | "h2"
                  | "h3"
                  | "h4"
                  | "h5"
                  | "h6"
                  | "blockquote";
              listItem?: "bullet" | "number";
              markDefs?: Array<{
                  href?: string;
                  _type: "link";
                  _key: string;
              }>;
              level?: number;
              _type: "block";
              _key: string;
          }
        | {
              asset?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              _type: "image";
              _key: string;
          }
        | ({
              _key: string;
          } & Jokul_componentProps)
        | ({
              _key: string;
          } & Jokul_codeExample)
        | ({
              _key: string;
          } & Jokul_storybook)
    >;
};

export type SanityImageCrop = {
    _type: "sanity.imageCrop";
    top?: number;
    bottom?: number;
    left?: number;
    right?: number;
};

export type SanityImageHotspot = {
    _type: "sanity.imageHotspot";
    x?: number;
    y?: number;
    height?: number;
    width?: number;
};

export type SanityImageAsset = {
    _id: string;
    _type: "sanity.imageAsset";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    altText?: string;
    sha1hash?: string;
    extension?: string;
    mimeType?: string;
    size?: number;
    assetId?: string;
    uploadId?: string;
    path?: string;
    url?: string;
    metadata?: SanityImageMetadata;
    source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
    _type: "sanity.assetSourceData";
    name?: string;
    id?: string;
    url?: string;
};

export type SanityImageMetadata = {
    _type: "sanity.imageMetadata";
    location?: Geopoint;
    dimensions?: SanityImageDimensions;
    palette?: SanityImagePalette;
    lqip?: string;
    blurHash?: string;
    hasAlpha?: boolean;
    isOpaque?: boolean;
};

export type Slug = {
    _type: "slug";
    current?: string;
    source?: string;
};

export type AllSanitySchemaTypes =
    | SanityImagePaletteSwatch
    | SanityImagePalette
    | SanityImageDimensions
    | SanityFileAsset
    | Geopoint
    | Jokul_storybookStory
    | Jokul_storybook
    | Jokul_codeExample
    | Jokul_componentProps
    | Jokul_component
    | SanityImageCrop
    | SanityImageHotspot
    | SanityImageAsset
    | SanityAssetSourceData
    | SanityImageMetadata
    | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/queries/component.ts
// Variable: componentsQuery
// Query: *[_type == "jokul_component"]{    name,    slug,    "imageUrl": image.asset->url    } | order(name)
export type ComponentsQueryResult = Array<{
    name: string | null;
    slug: Slug | null;
    imageUrl: string | null;
}>;
// Variable: componentBySlugQuery
// Query: *[_type == "jokul_component" && slug.current == $slug][0]
export type ComponentBySlugQueryResult = {
    _id: string;
    _type: "jokul_component";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    slug?: Slug;
    name?: string;
    short_description?: string;
    image?: {
        asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
    };
    documentation_article?: Array<
        | ({
              _key: string;
          } & Jokul_codeExample)
        | ({
              _key: string;
          } & Jokul_componentProps)
        | ({
              _key: string;
          } & Jokul_storybook)
        | {
              children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: "span";
                  _key: string;
              }>;
              style?:
                  | "blockquote"
                  | "h1"
                  | "h2"
                  | "h3"
                  | "h4"
                  | "h5"
                  | "h6"
                  | "normal";
              listItem?: "bullet" | "number";
              markDefs?: Array<{
                  href?: string;
                  _type: "link";
                  _key: string;
              }>;
              level?: number;
              _type: "block";
              _key: string;
          }
        | {
              asset?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              _type: "image";
              _key: string;
          }
    >;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
    interface SanityQueries {
        '*[_type == "jokul_component"]{\n    name,\n    slug,\n    "imageUrl": image.asset->url\n    } | order(name)': ComponentsQueryResult;
        '*[_type == "jokul_component" && slug.current == $slug][0]': ComponentBySlugQueryResult;
    }
}
