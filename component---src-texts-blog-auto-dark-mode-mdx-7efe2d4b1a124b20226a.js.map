{"version":3,"file":"component---src-texts-blog-auto-dark-mode-mdx-7efe2d4b1a124b20226a.js","mappings":"8MAUsBA,E,6DAFTC,EAAe,GAOtBC,GALgBF,EAKQ,UALA,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,SAACT,EAAD,CAASS,QAAQ,WAAjB,6LAIA,4CACA,oQACA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,iBADZ,8CAIL,2CAA4B,eAAIA,WAAW,KAAf,UAA5B,6DAA2H,eAAIA,WAAW,KAAf,SAA3H,kHAA8Q,uBAAYA,WAAW,KAAvB,cAA9Q,kBACA,qEACA,8HAA+G,eAAIA,WAAW,KAAf,QAA/G,+QACA,0OACA,6DAA8C,eAAIA,WAAW,KAAf,UAA9C,sKACA,2DACA,0TACA,kDACA,sFAAuE,uBAAYA,WAAW,KAAvB,cAAvE,sGACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,iTAUL,gEACA,yRAA0Q,uBAAYA,WAAW,KAAvB,YAA1Q,MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,saAgBL,wEACA,0PACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,qIASL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,yLAUL,mBAAG,mBAAQA,WAAW,KAAnB,OAAH,6EAAuH,uBAAYA,WAAW,KAAvB,YAAvH,2HAKJH,EAAWI,gBAAiB","sources":["webpack://@fremtind/portal/./src/texts/blog/auto-dark-mode.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Ingress mdxType=\"Ingress\">\n    Automatisk dark mode bytter tema på løsninger bygget med Jøkul, basert på inn&shy;stillingene på brukerens mobil\n    eller data&shy;maskin. Her er noen tips for å gjøre din løsning klar for dette.\n    </Ingress>\n    <h2>{`Hjelp! Jeg vil ikke!`}</h2>\n    <p>{`Aller først: Hvis du vil oppgradere til siste versjon av Jøkul, men ikke ennå er klar for å aktivere automatisk dark mode, lar det seg likevel gjøre! Bare sørg for at løsningen din rendres inne i et element med følgende attributter satt:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"jkl\" data-theme=\"light\" />\n`}</code></pre>\n    <p>{`Da vil applikasjonen `}<em parentName=\"p\">{`alltid`}</em>{` vises i lyst tema. Du kan selvfølgelig også spesifisere `}<em parentName=\"p\">{`mørkt`}</em>{` tema på denne måten om du heller vil det. Merk at du også kan sette tema på enkeltdeler av løsningen din med `}<inlineCode parentName=\"p\">{`data-theme`}</inlineCode>{`-attributten.`}</p>\n    <h2>{`Ting å huske på når du designer for dark mode`}</h2>\n    <p>{`Dark mode setter Granitt som bakgrunnsfarge og Snøhvit som tekstfarge på løsningen. Det blir imidlertid `}<em parentName=\"p\">{`ikke`}</em>{` automatisk byttet bakgrunnsfarge på seksjoner der man har aktivt satt en bakgrunnsfarge (f.eks. felter som er uthevet med mørkere toner). For disse må man finne en passende bakgrunnsfarge for dark mode, som sørger for å gi tilsvarende kontrast mot Granitt bakgrunn.`}</p>\n    <p>{`Husk også på at skygger ikke vil synes mot mørke bakgrunner, og at felter som er utheves med skygge derfor bør utheves på annen måte i dark mode. For eksempel kan man bruke omriss eller endring i bakgrunnsfarge.`}</p>\n    <p>{`Hvis det er deler av løsningen din som `}<em parentName=\"p\">{`alltid`}</em>{` skal vises i mørkt tema må du sørge for at bakgrunnen har ønsket kontrast mot Granitt bakgrunnsfarge, så den ikke går i ett med resten av løsningen i dark mode.`}</p>\n    <h2>{`Verktøy for å utvikle med dark mode`}</h2>\n    <p>{`Vi har forsøkt å gjøre det så enkelt som mulig å utvikle løsninger med tanke på dark mode. Som standard vil alle Jøkul-komponentene automatisk bytte mellom lyst og mørkt tema basert på brukerens preferanser. For helt enkle løsninger er det dermed ikke sikkert man må gjøre noe ekstra arbeid!`}</p>\n    <h3>{`Overstyre automatisk bytte`}</h3>\n    <p>{`Du kan overstyre det automatiske byttet ved å sette attributten `}<inlineCode parentName=\"p\">{`data-theme`}</inlineCode>{` på elementer i DOMet. Det er også mulig å nøste seksjoner med forskjellig tema inne i hverandre.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<div className=\"jkl din-app\">\n    // Dette innholdet bytter automatisk tema\n    <div data-theme=\"dark\">\n        // Dette innholdet er alltid i mørkt tema\n        <div data-theme=\"light\">/* Dette innholdet er alltid lyst, selv om det er inne i en div med mørkt tema */</div>\n    </div>\n</div>\n`}</code></pre>\n    <h3>{`Gjøre spesifikke endringer for dark mode`}</h3>\n    <p>{`I noen tilfeller holder det ikke med de automatiske endringene av bakgrunns- og tekstfarge, for eksempel når man har felter med en annen bakgrunnsfarge enn standard. For å gjøre det enklere å løse disse tilfellene har vi laget mixins som er tilgjengelige fra `}<inlineCode parentName=\"p\">{`jkl-core`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`@import \"@fremtind/jkl-core/jkl\";\n\n@include jkl.helper-light-mode-variables {\n    --my-custom-background-color: #{jkl.$color-varde};\n}\n@include jkl.helper-dark-mode-variables {\n    --my-custom-background-color: #{jkl.$color-skifer};\n}\n\n.my-fancy-component {\n    background-color: var(--my-custom-background-color);\n    background-color: jkl.$color-varde; // Husk å ta høyde for IE om du må støtte det\n}\n`}</code></pre>\n    <h3>{`Håndtere elementer som alltid skal ha mørkt tema`}</h3>\n    <p>{`Noen løsninger har elementer som alltid skal vises med mørkt tema, også når resten av applikasjonen er i lyst tema. For disse må du huske å sette bakgrunns- og tekstfarge spesifikt, samt å markere at den er låst til mørkt tema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// MyDarkComponent.scss\n\n.my-dark-component {\n    background-color: jkl.$color-granitt;\n    color: jkl.$color-snohvit;\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// MyDarkComponent.tsx\n\n<div className=\"my-dark-component\" data-theme=\"dark\">\n    Sammendrag\n    <SummaryTable />\n    <PrimaryButton>Kjøp forsikring</PrimaryButton>\n</div>\n`}</code></pre>\n    <p><strong parentName=\"p\">{`NB!`}</strong>{`: Dersom du skal støtte Internet Explorer er du nødt til å bruke prop-en `}<inlineCode parentName=\"p\">{`inverted`}</inlineCode>{` på komponenter inne i elementer med mørkt tema, siden den automatiske løsningen benytter seg av CSS custom properties`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Ingress","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}