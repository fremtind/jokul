{"version":3,"file":"component---src-texts-profile-typography-mdx-4333ca4cea051ad6cf96.js","mappings":"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","sources":["webpack://@fremtind/portal/./src/utils/getComputedProperty.ts","webpack://@fremtind/portal/./src/texts/profile/typography.mdx","webpack://@fremtind/portal/../packages/toggle-switch-react/build/browser/index.js","webpack://@fremtind/portal/./src/components/Documentation/Typography/TypograhyTable/TableHeader.tsx","webpack://@fremtind/portal/./src/components/Documentation/Typography/TypograhyTable/TableCell.tsx","webpack://@fremtind/portal/./src/components/Documentation/Typography/TypograhyTable/ExampleRow.tsx","webpack://@fremtind/portal/./src/components/Documentation/Typography/TypograhyTable/index.tsx"],"sourcesContent":["export const getComputedProperty = (node: HTMLElement | SVGSVGElement | null, cssProperty: string) => {\n    return (node && window?.getComputedStyle(node)?.getPropertyValue(cssProperty)) || \"N/A\";\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Example } from \"../../components/Documentation/Typography/TypograhyTable\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>{`Typografi`}</h1>\n    <Ingress mdxType=\"Ingress\">\n    Typografi er et profilbærende element i løsningene vi lager. Vi bruker stor og tydelig typografi som grafisk\n    element, i stedet for illustrasjoner og ikoner. Vær modig når du bruker typografi som virkemiddel i våre løsninger.\n    </Ingress>\n    <h2>{`Skrifttype`}</h2>\n    <p>{`Vi har vår egen skrifttype: Fremtind Grotesk. Den finnes i snittene Regular, Bold, Display og Mono. Vi bruker\nhovedsakelig Regular og Bold. Som erstatningsfont bruker vi Calibri Light. Ikke bruk andre skrifttyper når du designer løsninger\nfor Fremtind.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/fremtind/jokul/tree/master/packages/webfonts/fonts\"\n      }}>{`Last ned Fremtind Grotesk ↓`}</a></p>\n    <h2>{`Typografisk skala`}</h2>\n    <p>{`Vi har to typografiske skalaer. En som er ment for desktop-visning\nog en som er egnet for kompakte og mobile løsninger. I samme grensesnitt skal man ikke blande, men bruke bare stiler fra\nen skala.`}</p>\n    <Example mdxType=\"Example\" />\n    <h2>{`Overskrifter`}</h2>\n    <p>{`De ulike overskriftsnivåene skaper et informasjonshierarki. Mindre overskrifter er underordnet de som er større. Bruk de store overskriftene så ofte som mulig, og unngå flere enn tre overskriftsstiler på samme side. Når du lager en overskrift, må du også tenke på at den skal være enkel å skanne. Bruk godt og enkelt språk. En god overskrift er en kort setning, uten komma, punktum, bindestrek eller semikolon.`}</p>\n    <h2>{`Mengdetekst`}</h2>\n    <p>{`Vi har fire stiler for mengdetekst: Lead er til kortere tekster. Den bruker vi som ingress eller når innholdet er kort og vi vil gi det fokus. Når vi setter Lead sammen med en overskrift, bør vi bruke H1 eller H2, for å sikre god kontrast. Body er hovedstilen for brødtekst. Den bruker vi alltid, så sant det ikke finnes spesielle grunner til å velge noe annet. Body Small er en alternativ brødtekst. Den kan vi bruke hvis vi må ha en mer kompakt stil. Small er den minste skriftstilen vår. Den bruker vi når vi vil spare plass, for eksempel i tabeller eller interne applikasjoner. Vi kan også bruke den i bilde- og figurtekster.`}</p>\n    <h2>{`Linjelengde`}</h2>\n    <p>{`Innhold blir lettest å lese hvis linjelengden er mellom 45 og 75 tegn. Unngå å ha over 80 tegn per linje. For korte linjer skaper også problemer, for da må blikket skifte linje for ofte og det bryter leserytmen.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React, { useState } from 'react';\nimport { SupportLabel, ScreenReaderOnly } from '@fremtind/jkl-core';\nimport classNames from 'classnames';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { nanoid } from 'nanoid';\n\nvar ToggleSwitch = function ToggleSwitch(_ref) {\n  var children = _ref.children,\n      pressed = _ref.pressed,\n      onClick = _ref.onClick,\n      className = _ref.className,\n      disabled = _ref.disabled,\n      inverted = _ref.inverted,\n      helpLabel = _ref.helpLabel;\n  var componentClassName = classNames(\"jkl-toggle-switch\", className, {\n    \"jkl-toggle-switch--inverted\": inverted\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"aria-pressed\": !!pressed,\n    disabled: disabled,\n    className: componentClassName,\n    onClick: onClick\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jkl-toggle-switch__slider\"\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jkl-toggle-switch__expanding-pill\"\n  })), children), helpLabel && /*#__PURE__*/React.createElement(SupportLabel, {\n    className: \"jkl-toggle-switch__help-label\",\n    helpLabel: helpLabel\n  }));\n};\n\nvar ToggleSlider = function ToggleSlider(_ref) {\n  var labels = _ref.labels,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? \"\" : _ref$className,\n      inverted = _ref.inverted,\n      onToggle = _ref.onToggle,\n      defaultValue = _ref.defaultValue,\n      children = _ref.children,\n      screenReaderLabel = _ref.screenReaderLabel,\n      screenReaderSelectedLabel = _ref.screenReaderSelectedLabel;\n\n  var _useState = useState(defaultValue !== labels[0]),\n      _useState2 = _slicedToArray(_useState, 2),\n      checked = _useState2[0],\n      setChecked = _useState2[1];\n\n  var _useState3 = useState(defaultValue || labels[0]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentLabel = _useState4[0],\n      setCurrentLabel = _useState4[1];\n\n  var _useState5 = useState(nanoid(8)),\n      _useState6 = _slicedToArray(_useState5, 1),\n      id = _useState6[0];\n\n  var selectedLabel = screenReaderSelectedLabel || \"\".concat(currentLabel, \" valgt\");\n  var ariaLabel = screenReaderLabel || \", \".concat(selectedLabel);\n\n  var handleChange = function handleChange() {\n    var nextValue = !checked;\n    var nextLabel = labels[nextValue ? 1 : 0];\n    setChecked(nextValue);\n    setCurrentLabel(nextLabel);\n    return onToggle(nextLabel);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"jkl-toggle-slider__wrapper\", {\n      \"jkl-toggle-slider__wrapper--inverted\": inverted\n    }, className)\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    role: \"region\",\n    \"aria-live\": \"polite\"\n  }, /*#__PURE__*/React.createElement(ScreenReaderOnly, null, selectedLabel)), /*#__PURE__*/React.createElement(\"label\", {\n    id: \"\".concat(id, \"-label\"),\n    htmlFor: id,\n    className: \"jkl-toggle-slider__label jkl-component-spacing--medium-right\"\n  }, children, /*#__PURE__*/React.createElement(ScreenReaderOnly, null, ariaLabel)), /*#__PURE__*/React.createElement(\"button\", {\n    id: id,\n    \"data-testid\": \"jkl-toggle-slider\",\n    type: \"button\",\n    role: \"switch\",\n    \"aria-checked\": checked,\n    \"aria-labelledby\": \"\".concat(id, \"-label\"),\n    onClick: handleChange,\n    className: classNames(\"jkl-toggle-slider\", {\n      \"jkl-toggle-slider--checked\": checked,\n      \"jkl-toggle-slider--not-checked\": !checked\n    })\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jkl-toggle-slider__pill\",\n    \"aria-hidden\": true\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jkl-toggle-slider--left\"\n  }, labels[0]), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jkl-toggle-slider--right\"\n  }, labels[1])));\n};\n\nexport { ToggleSlider, ToggleSwitch };\n","import React from \"react\";\n\nexport const TableHeader: React.FC = () => {\n    return (\n        <thead>\n            <tr>\n                <th className=\"jkl-typography-table__header\">Stilnavn</th>\n                <th className=\"jkl-typography-table__header\">Vekt</th>\n                <th className=\"jkl-typography-table__header\">Størrelse</th>\n                <th className=\"jkl-typography-table__header\">Linjeavstand</th>\n            </tr>\n        </thead>\n    );\n};\n","import React from \"react\";\n\ninterface Props {\n    title?: string;\n}\n\nexport const TableCell: React.FC<Props> = ({ title, children }) => (\n    <td className=\"jkl-typography-table__data\" data-rowtitle={title}>\n        <p className=\"jkl-small\">{children}</p>\n    </td>\n);\n","import React, { useState } from \"react\";\nimport { TableCell } from \"./TableCell\";\nimport { getComputedProperty } from \"../../../../utils/getComputedProperty\";\n\nexport type TypographyLevels =\n    | \"Title\"\n    | \"Heading 1\"\n    | \"Heading 2\"\n    | \"Heading 3\"\n    | \"Heading 4\"\n    | \"Heading 5\"\n    | \"Body\"\n    | \"Small\";\n\ninterface Props {\n    level: TypographyLevels;\n}\nexport const ExampleRow: React.FC<Props> = ({ level }) => {\n    const [fontWeight, setFontWeight] = useState(\"N/A\");\n    const [fontSize, setFontSize] = useState(\"N/A\");\n    const [lineHeight, setLineHeight] = useState(\"N/A\");\n    const ref = (node: HTMLParagraphElement | null) => {\n        setFontWeight(getComputedProperty(node, \"font-weight\"));\n        setFontSize(getComputedProperty(node, \"font-size\"));\n        setLineHeight(getComputedProperty(node, \"line-height\"));\n    };\n    return (\n        <tr className={\"jkl-typography-table__row\"}>\n            <td className=\"jkl-typography-table__data\">\n                <p className={`jkl-${level.toLowerCase().replace(/ /g, \"-\")}`} ref={ref}>\n                    {level}\n                </p>\n            </td>\n            <TableCell title=\"Vekt\">{fontWeight}</TableCell>\n            <TableCell title=\"Størrelse\">{fontSize}</TableCell>\n            <TableCell title=\"Linjeavstand\">{lineHeight}</TableCell>\n        </tr>\n    );\n};\n","import React, { useState } from \"react\";\nimport { ToggleSwitch } from \"@fremtind/jkl-toggle-switch-react\";\n\nimport \"./TypographyTable.scss\";\nimport { TableHeader } from \"./TableHeader\";\nimport { ExampleRow, TypographyLevels } from \"./ExampleRow\";\n\nconst levels: TypographyLevels[] = [\n    \"Title\",\n    \"Heading 1\",\n    \"Heading 2\",\n    \"Heading 3\",\n    \"Heading 4\",\n    \"Heading 5\",\n    \"Body\",\n    \"Small\",\n];\n\nexport const Example = () => {\n    const [isCompact, setIsCompact] = useState(false);\n    const toggleCompact = () => setIsCompact(!isCompact);\n\n    return (\n        <>\n            <table\n                className=\"jkl-typography-table jkl-spacing--top-2\"\n                {...(isCompact ? { \"data-compactlayout\": true } : {})}\n            >\n                <TableHeader />\n                <tbody>\n                    {levels.map((level) => (\n                        <ExampleRow key={level} level={level} />\n                    ))}\n                </tbody>\n            </table>\n            <ToggleSwitch className=\"jkl-spacing--top-3\" pressed={isCompact} onClick={toggleCompact}>\n                Kompakt\n            </ToggleSwitch>\n        </>\n    );\n};\n"],"names":["getComputedProperty","node","cssProperty","window","getComputedStyle","getPropertyValue","name","ToggleSwitch","_ref","children","pressed","onClick","className","disabled","inverted","helpLabel","componentClassName","classNames","React","type","SupportLabel","TableHeader","TableCell","title","ExampleRow","level","useState","fontWeight","setFontWeight","fontSize","setFontSize","lineHeight","setLineHeight","toLowerCase","replace","ref","levels","Example","isCompact","setIsCompact","map","key","_frontmatter","Ingress","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}