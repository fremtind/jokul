{
    "componentChunkName": "component---src-templates-doc-page-layout-tsx",
    "path": "/blog/creating-markers-google-maps/",
    "result": {"data":{"page":{"id":"5c653e78-83fc-57ae-8396-b3ea4165b36c","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creating Markers on Google Maps\",\n  \"author\": \"Sercan Leylek\",\n  \"description\": \"Google Maps video tutorial series - II\",\n  \"publishDate\": \"2021.11.05\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Ingress = makeShortcode(\"Ingress\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Ingress, {\n    mdxType: \"Ingress\"\n  }, \"This is the second post and video in a tutorial series on Google Maps, React, and TypeScript. After setting up Google Maps project in React and rendering the map, the next task is to add markers on the map with click event.\"), mdx(\"p\", null, \"You can watch the tutorial video below and this article serves as a summary of the implementation on YouTube.\"), mdx(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: \"https://www.youtube.com/embed/Id2NtV3TcMQ\",\n    title: \"YouTube video player\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true\n  }), mdx(\"h3\", null, \"IMarker Interface and marker hook\"), mdx(\"p\", null, \"First, we should create an interface for our marker, right? I want to keep three basic data attributes for a marker.\\nOf course, the label of a marker could be also added here as another string value, but I want to keep things simple.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"interface IMarker {\\n    address: string;\\n    latitude: number;\\n    longitude: number;\\n}\\n\")), mdx(\"p\", null, \"Based on this interface, I also create the marker hook which will store the content.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const [marker, setMarker] = useState<IMarker>();\\n\")), mdx(\"h3\", null, \"Event Listener\"), mdx(\"p\", null, \"While working with Google Maps on React, you should still write some Vanilla JS code as well. I don\\u2019t like this, but we do not have another choice.\\nAs soon as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \" hook is initialised, we add a click listener into this function.\\nThis event listener will return us a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LatLng\"), \" object which will be used to get the coordinates from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"geocoder.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const initEventListener = ():void => {\\n    if (map) {\\n        google.maps.event.addListener(map, 'click', function(e) {\\n            coordinateToAddress(e.latLng);\\n        })\\n    }\\n};\\nuseEffect(initEventListener, [map]);\\n\")), mdx(\"h3\", null, \"Translating coordinate to an address\"), mdx(\"p\", null, \"As you notice, I invoke a function called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"coordinateToAddress()\"), \" whenever the user clicks somewhere on the map.\\nThe click event of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"google.maps\"), \" namespace returns us a typical event (e), but this e event has a special attribute called latLng.\\nThis is our location value. In this function, I pull three different data types from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"geocoder\"), \". I get the address, latitute and longitude.\\nJust what I need to set my marker state.\"), mdx(\"p\", null, \"At this point of the program, our Map component successfully retrieves the coordinates of clicked point and\\nit stores the data in our hook (marker), but we do not illustrate any marker to the user, yet.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const coordinateToAddress = async (coordinate: GoogleLatLng) => {\\n    const geocoder = new google.maps.Geocoder();\\n    await geocoder.geocode({ location: coordinate}, function (results, status) {\\n        if (status === 'OK') {\\n            setMarker({\\n                address: results[0].formatted_address,\\n                latitude: coordinate.lat(),\\n                longitude: coordinate.lng()\\n            })\\n        }\\n    });\\n};\\n\")), mdx(\"h3\", null, \"Adding single marker\"), mdx(\"p\", null, \"I created this function just for convenience. If we decide to create an array of IMarker objects\\n(which means storing several markers on the map at the same time), we would create another function called addMultipleMarkers.\\nBut let\\u2019s see what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addSingleMarker()\"), \" does first. It simply follows the changes on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"marker\"), \" hook with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" and\\nwhenever it is updated we invoke \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addMarker()\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const addSingleMarker = () => {\\n   if (marker) {\\n       addMarker(new google.maps.LatLng(marker.latitude, marker.longitude));\\n   }\\n};\\nuseEffect(addSingleMarker, [marker]);\\n\")), mdx(\"p\", null, \"So, here is a much more reusable function. This is actually the moment where our Map component will create the marker and it will show it to the user.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const addMarker = (location: GoogleLatLng): void => {\\n    const marker: GoogleMarker = new google.maps.Marker({\\n        position: location,\\n        map: map,\\n        icon: getIconAttributes('#000000')\\n    });\\n}\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"google.maps.Marker\"), \" receives a JSON object where the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions\"\n  }, \"options are almost limitless\"), \".\\nThere are so many attributes that you can use to customise your marker, but I only used some fundamental parts here (position, map and icon).\\nI also created a dummy function called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getIconAttributes()\"), \" which is only used for the output of icon.\\nYou may refer to Google Maps manual for further customisation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const getIconAttributes = (iconColor: string) => {\\n    return {\\n        path: 'M11.0639 15.3003L26.3642 2.47559e-05L41.6646 15.3003L26.3638 51.3639L11.0639 15.3003 M22,17.5a4.5,4.5 0 1,0 9,0a4.5,4.5 0 1,0 -9,0Z',\\n        fillColor: iconColor,\\n        fillOpacity: 0.8,\\n        strokeColor: 'pink',\\n        strokeWeight: 2,\\n        anchor: new google.maps.Point(30, 50)\\n    };\\n};\\n\")), mdx(\"h3\", null, \"Homework\"), mdx(\"p\", null, \"The gif animation below shows how I create markers on the map, but there is a problem.\\nAs I click a point on the map, the component successfully creates a marker.\\nHowever, when I create once more, the previous marker is still there although the marker hook changed its value.\\nSo, try to create a function which will remove the previous marker. Good luck!\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/blog/google-maps-create-marker-example-typescript.gif\",\n    \"alt\": \"Create markers demo\"\n  })), mdx(\"p\", null, \"I hope you enjoyed the part two. Third video and tutorial will show you how to calculate distance between markers.\"), mdx(\"p\", null, \"(This article was previously published on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://storksnestblog.wordpress.com/2020/10/27/creating-markers-on-google-maps-with-react-typescript/\"\n  }, \"Stork's Nest\"), \")\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Creating Markers on Google Maps","react":null,"scss":null,"order":null,"author":"Sercan Leylek","publishDate":"2021.11.05","group":null}}},"pageContext":{"id":"5c653e78-83fc-57ae-8396-b3ea4165b36c","title":"Creating Markers on Google Maps"}},
    "staticQueryHashes": ["1583095916","1756004727","2550854682","3000541721"]}