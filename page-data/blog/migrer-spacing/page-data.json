{
    "componentChunkName": "component---src-templates-doc-page-layout-tsx",
    "path": "/blog/migrer-spacing/",
    "result": {"data":{"page":{"id":"e3fbd3a8-00b7-505a-9be0-5be6abb17b2b","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Smarte tips til refaktorering av spacing\",\n  \"author\": \"Pio Rasch-Halvorsen\",\n  \"description\": \"Gjør oppgraderingen til Jøkul 8.0 litt enklere!\",\n  \"publishDate\": \"2021.10.26\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Ingress = makeShortcode(\"Ingress\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Ingress, {\n    mdxType: \"Ingress\"\n  }, \"Etter at vi har gjort om spacing-skalaen i J\\xF8kul er det kanskje mange som har en stor refaktoreringsjobb foran seg. Her er noen tips som kan gj\\xF8re den litt lettere!\"), mdx(\"p\", null, \"Det er et par ting som b\\xF8r gj\\xF8res n\\xE5r du tar i bruk den nye spacing-skalaen. For det f\\xF8rste m\\xE5 du bytte om til de nye navnene b\\xE5de der du har brukt hjelpeklasser og der du har brukt variablene i Sass. I tillegg b\\xF8r du s\\xF8rge for \\xE5 importere Sass-variablene fra \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@fremtind/jkl-core/jkl\"), \". Med litt smart bruk av regex og s\\xF8k-og-erstatt kan vi f\\xE5 til dette litt enklere enn man skulle tro.\"), mdx(\"p\", null, \"Siden vi har endret navngivingen i skalaen kan man ikke bruke \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ett\"), \" magisk regex-uttrykk for \\xE5 refaktorere til de nye verdiene, men ved \\xE5 ta et par sm\\xE5 mellomsteg kan vi i hvert fall redusere det manuelle arbeidet ganske mye.\"), mdx(\"h2\", null, \"1. Hjelpeklassene\"), mdx(\"p\", null, \"De gamle hjelpelklassene var p\\xE5 formen \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jkl-<type>-spacing--<steg>-<posisjon>\"), \", der \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"type\"), \" er \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"layout\"), \" eller \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"steg\"), \" er steget i den gamle skalaen (f.eks. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"large\"), \"), og \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"posisjon\"), \" er \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"right\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bottom\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left\"), \" eller \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"all\"), \".\"), mdx(\"p\", null, \"De nye klassene er p\\xE5 formen \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jkl-spacing-<steg>--<posisjon>\"), \", der \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"steg\"), \" er et steg i den nye skalaen \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"posisjon\"), \" er det samme som i de gamle klassene. Med en regex s\\xF8k-og-erstatt kan vi gj\\xF8re om fra det gamle til det nye formatet, men med steg og type fra den gamle skalaen. Da er vi klare for senere \\xE5 oversette verdiene fra gammel til ny skala.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Vi s\\xF8ker etter \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jkl-(component|layout)-spacing--(\\\\w+)-(\\\\w+)\"), \", og f\\xE5r da ut grupper for type, steg og posisjon. Disse kan vi sette inn i det nye formatet, f.eks. slik: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jkl-spacing-<$1-$2>--$3\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Det finnes ogs\\xE5 en enda eldre skala med tall, som kun omfatter layout-spacing. Vi gj\\xF8r om den p\\xE5 tilsvarende m\\xE5te med s\\xF8k \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jkl-spacing--(\\\\w+)-(\\\\d)\"), \" og erstatt \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jkl-spacing-<tall-layout-$2>--$1\"), \".\"))), mdx(\"h2\", null, \"2. Variablene\"), mdx(\"p\", null, \"Variablene har ingen varianter for posisjon, s\\xE5 her blir regexen hakket enklere! Vi gj\\xF8r om b\\xE5de den gamle og den eldgamle skalaen her ogs\\xE5, til det samme formatet som vi brukte for hjelpeklassene.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For den gamle skalaen bruker du s\\xF8k \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\\$(component|layout)-spacing--(\\\\w+)\"), \" og erstatt \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$spacing-<$1-$2>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For den enda eldre skalaen med tall (som her omfatter \\\"hele\\\" skalaen) bruker du s\\xF8k \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$spacing-(\\\\d)\"), \" og erstatt \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$spacing-<tall-komplett-$1>\"))), mdx(\"h2\", null, \"3. Oversettingen\"), mdx(\"p\", null, \"N\\xE5 har du f\\xE5tt b\\xE5de hjelpeklasser og variabler over i samme format, s\\xE5 det er p\\xE5 tide \\xE5 faktisk oversette verdiene. Du m\\xE5 fortsatt g\\xE5 gjennom verdiene en og en, men siden vi har fikset formatet holder det med \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"erstatt alle\"), \" \\xE9n gang per skala og verdi!\"), mdx(\"p\", null, \"Ta utgangspunkt i \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/fremtind/jokul/blob/main/packages/core/MIGRATION.md#variabler-i-spacingskalaen\"\n  }, \"tabellene i migrasjonsguiden\"), \", og erstatt verdiene p\\xE5 f\\xF8lgende m\\xE5te (ingen regex n\\xF8dvendig!):\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For komponent-/og layoutskala s\\xF8k \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<component-xxs>\"), \" og erstatt \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"3xs\"), \". Gj\\xF8r tilsvarende med alle steg i tabellene for b\\xE5de layout- og komponentskalaene.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For den komplette tallskalaen s\\xF8k \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<tall-komplett-1>\"), \" og erstatt \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"3xs\"), \". Gj\\xF8r tilsvarende for alle tallene i skalaen.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For tall-layoutskalaen s\\xF8k \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<tall-layout-1>\"), \" og erstatt \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"l\"), \". Gj\\xF8r tilsvarende for resten av tallene i skalaen.\")), mdx(\"p\", null, \"Gratulerer! Du har n\\xE5 oversatt alle gamle varianter av spacing med de nyeste! \\uD83C\\uDF89\"), mdx(\"h2\", null, \"4. Importene\"), mdx(\"p\", null, \"Dette steget er forel\\xF8pig strengt tatt valgfritt, men vi anbefaler alle \\xE5 g\\xE5 over til den nye importen av J\\xF8kul-variablene i Sass ved hjelp av \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@use\"), \". NB! Dette krever at man bruker nyeste versjon av Sass i prosjektet sitt, noe vi ogs\\xE5 anbefaler at man gj\\xF8r.\"), mdx(\"p\", null, \"Her har vi dessverre ingen magisk regex, siden det vil kunne variere fra prosjekt til prosjekt, men man \\xF8nsker \\xE5 endre importen til \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@use '~@fremtind/jkl-core/jkl';\"), \" og prefikse alle variablene med \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jkl\"), \". Dette lar seg ogs\\xE5 i stor grad l\\xF8se med s\\xF8k-og-erstatt, du vet best hva du m\\xE5 lete etter i ditt prosjekt!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Smarte tips til refaktorering av spacing","react":null,"scss":null,"order":null,"author":"Pio Rasch-Halvorsen","publishDate":"2021.10.26","group":null}}},"pageContext":{"id":"e3fbd3a8-00b7-505a-9be0-5be6abb17b2b","title":"Smarte tips til refaktorering av spacing"}},
    "staticQueryHashes": ["1583095916","1756004727","2550854682","3000541721"]}