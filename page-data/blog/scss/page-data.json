{
    "componentChunkName": "component---src-templates-doc-page-layout-tsx",
    "path": "/blog/scss/",
    "result": {"data":{"page":{"id":"3a16acf4-e655-59de-8c47-1c9fc23769b3","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Oppdateringer i Sass\",\n  \"author\": \"lfberge\",\n  \"description\": \"Hvordan bruke JÃ¸kul med ny Sass syntax\",\n  \"publishDate\": \"2021.02.12\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Ingress = makeShortcode(\"Ingress\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Ingress, {\n    mdxType: \"Ingress\"\n  }, \"Med J\\xF8kul pr\\xF8ver vi \\xE5 holde oss oppdatert, b\\xE5de kodemessig, depdencecier, design og med andre ting og trender som beveger seg rundt oss. N\\xE5 har Sass-teamet kommet med noen oppdatering, som p\\xE5virker hvordan man skal bruke sass filene fra J\\xF8kul.\"), mdx(\"p\", null, \"La meg starte med en viktig poeng, dette er nytt, vi har ikke d\\xE5rlig tid p\\xE5 oss \\xE5 f\\xE5 fikset dette, men er greit \\xE5 ta tak i det n\\xE5r det passer. Det er ikke alle implementasjoner av Sass som har full st\\xF8tte for dette enda, men om du bruker \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sass\"), \" eller \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dart-sass\"), \" kan du migrere n\\xE5. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node-sass\"), \" har ikke st\\xF8tte per i dag, men om du bruker den b\\xF8r du vurdere \\xE5 migrere til referanse implementasjonen \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sass\"), \". Det viktige endringen for oss er at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@import\"), \" syntaxen gies tilbake til CSS. Per i dag er det m\\xE5ten vi har hentet funksjonalitet og stiler mellom ulike filer, det erstattes n\\xE5 av \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@use\"), \" og \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@forward\"), \". Dette gjelder kun ved importer av \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".scss\"), \" filer i \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".scss\"), \" filer, det p\\xE5virker ikke importen til JavaScript eller import av v\\xE5re bydge \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".css\"), \" filer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scss\"\n  }, \"@import '~@fremtind/jkl-core/_functions.scss';\\n\\n.my-class {\\n    height: rem(300px);\\n}\\n\\n\")), mdx(\"p\", null, \"Dette blir n\\xE5:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scss\"\n  }, \"@use '~@fremtind/jkl-core/_functions.scss';\\n\\n.my-class {\\n    height: functions.rem(300px);\\n}\\n\\n\")), mdx(\"p\", null, \"Import blir byttet ut med use, men importen er n\\xE5 scopet til et namespace, s\\xE5 for \\xE5 finne funksjonen m\\xE5 den kalles fra namespace. Du kan ogs\\xE5 sette det namespacet selv om du \\xF8nsker.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scss\"\n  }, \"@use '~@fremtind/jkl-core/mixins/_all.scss' as mix;\\n\\n.my-class {\\n    @include mix.small-device {\\n        display: none;\\n    }\\n}\\n\\n\")), mdx(\"p\", null, \"Med nye syntaxen har ikke lengre den importete filen tilgang til variablene satt i fila den blir importert til. Det treffer oss for \\xE5 sette opp fonten v\\xE5r. For \\xE5 fikse det m\\xE5 man gi den importerende fila tilgang via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"with\"), \" syntaxen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scss\"\n  }, \"$webfonts-dir: \\\"/relative/path/to/font/files\\\";\\n@import \\\"~@fremtind/jkl-webfonts/webfonts.scss\\\";\\n\")), mdx(\"p\", null, \"blir til\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scss\"\n  }, \"@use '~@fremtind/jkl-webfonts/webfonts.scss' with (\\n    $webfonts-dir: \\\"/privat/forsikring/open/fonts\\\"\\n);\\n\")), mdx(\"p\", null, \"Dette er litt kjipt \\xE5 fikse, men heldigvis har sass-teamet lagd et migrasjonsverkt\\xF8y som kan fikse de fleste importen (ikke webfonts). \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://sass-lang.com/documentation/cli/migrator\"\n  }, \"https://sass-lang.com/documentation/cli/migrator\"), \".\"), mdx(\"p\", null, \"For \\xE5 ta alle scss filene i samme slengen kan du gj\\xF8re noe ala dette p\\xE5 linux:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ find . -type f -name '*.scss' | xargs npx sass-migrator module --verbose --migrate-deps\\n\")), mdx(\"p\", null, \"Vi har ikke migrert J\\xF8kul enda, vi vil gi beskjed f\\xF8r vi gj\\xF8r det. Vi anbefaler klienter \\xE5 gj\\xF8re denne oppgraderingen ved f\\xF8rste tilgjengelige anledning, s\\xE5 trenger man ikke bry seg den dagen det kommer en breaking change p\\xE5 dette.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Oppdateringer i Sass","react":null,"scss":null,"order":null,"author":"lfberge","publishDate":"2021.02.12","group":null}}},"pageContext":{"id":"3a16acf4-e655-59de-8c47-1c9fc23769b3","title":"Oppdateringer i Sass"}},
    "staticQueryHashes": ["1583095916","1756004727","2550854682","3000541721"]}