{
    "componentChunkName": "component---src-templates-doc-page-layout-tsx",
    "path": "/komponenter/screen",
    "result": {"data":{"page":{"id":"ddcfe75a-69ea-5af6-9628-d96f72251988","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"useScreen\",\n  \"react\": \"react-hooks\",\n  \"group\": \"hooks\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Ingress = makeShortcode(\"Ingress\");\nvar ComponentExample = makeShortcode(\"ComponentExample\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Ingress, {\n    mdxType: \"Ingress\"\n  }, \"useScreen lar deg f\\xE5 tilgang til de samme breakpoints som cssen bruker til media queries.\"), mdx(\"p\", null, \"Av og til er kan det v\\xE6re n\\xF8dvendig \\xE5 endre strukturen p\\xE5 innholdet bassert p\\xE5 hvor stor skjerm innholdet skal presenteres p\\xE5. Anbefalt implementasjon er \\xE5 legge \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useScreen\"), \" s\\xE5 h\\xF8yt oppe i applikasjonen din som du mener er n\\xF8dvendig i en \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"context\"), \", for \\xE5 benytte den contexten n\\xE5r du trenger \\xE5 plukke ut verdiene i en komponent. Dette er for \\xE5 unng\\xE5 \\xE5 sette opp flere eventlyttere enn n\\xF8dvendig. Om du bruker server side rendering b\\xF8r denne brukes med forsiktighet, da serveren ikke vil vite hvilken size den skal rendre for.\"), mdx(ComponentExample, {\n    component: ScreenExample,\n    mdxType: \"ComponentExample\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"useScreen","react":"react-hooks","scss":null,"order":null,"author":null,"publishDate":null,"group":"hooks"}}},"pageContext":{"id":"ddcfe75a-69ea-5af6-9628-d96f72251988","types":{"useScrollIntoView":{"tags":{},"filePath":"../packages/react-hooks/src/index.ts","description":"","displayName":"useScrollIntoView","methods":[],"props":{"ref":{"defaultValue":null,"description":"","name":"ref","parent":{"fileName":"useScrollIntoView.tsx","name":"ScrollIntoViewProps"},"declarations":[{"fileName":"useScrollIntoView.tsx","name":"ScrollIntoViewProps"}],"required":true,"type":{"name":"RefObject<ValueOf<HTMLElementTagNameMap>>"}},"timeout":{"defaultValue":{"value":"0"},"description":"","name":"timeout","parent":{"fileName":"useScrollIntoView.tsx","name":"ScrollIntoViewProps"},"declarations":[{"fileName":"useScrollIntoView.tsx","name":"ScrollIntoViewProps"}],"required":false,"type":{"name":"number | undefined"}},"autoScroll":{"defaultValue":{"value":"true"},"description":"","name":"autoScroll","parent":{"fileName":"useScrollIntoView.tsx","name":"ScrollIntoViewProps"},"declarations":[{"fileName":"useScrollIntoView.tsx","name":"ScrollIntoViewProps"}],"required":false,"type":{"name":"boolean | undefined"}},"options":{"defaultValue":{"value":"{ behavior: \"smooth\" }"},"description":"","name":"options","parent":{"fileName":"useScrollIntoView.tsx","name":"ScrollIntoViewProps"},"declarations":[{"fileName":"useScrollIntoView.tsx","name":"ScrollIntoViewProps"}],"required":false,"type":{"name":"ScrollIntoViewOptions | undefined"}}}},"useProgressiveImg":{"tags":{},"filePath":"../packages/react-hooks/src/index.ts","description":"","displayName":"useProgressiveImg","methods":[],"props":{"lowQualitySrc":{"defaultValue":null,"description":"","name":"lowQualitySrc","parent":{"fileName":"useProgressiveImg.tsx","name":"ProgressiveImageProps"},"declarations":[{"fileName":"useProgressiveImg.tsx","name":"ProgressiveImageProps"}],"required":true,"type":{"name":"string"}},"highQualitySrc":{"defaultValue":null,"description":"","name":"highQualitySrc","parent":{"fileName":"useProgressiveImg.tsx","name":"ProgressiveImageProps"},"declarations":[{"fileName":"useProgressiveImg.tsx","name":"ProgressiveImageProps"}],"required":true,"type":{"name":"string"}}}},"usePreviousValue":{"tags":{},"filePath":"../packages/react-hooks/src/index.ts","description":"","displayName":"usePreviousValue","methods":[],"props":{}}},"title":"useScreen"}},
    "staticQueryHashes": ["1583095916","1756004727","2550854682","3000541721"]}