{"version":3,"file":"component---packages-text-input-react-documentation-text-input-mdx-aca1690bc98ff75f18ba.js","mappings":"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","sources":["webpack://@fremtind/portal/../packages/text-input-react/documentation/TextInputExample.tsx","webpack://@fremtind/portal/../packages/text-input-react/documentation/TextAreaExample.tsx","webpack://@fremtind/portal/../packages/text-input-react/documentation/TextInput.mdx"],"sourcesContent":["import React, { useState, ChangeEvent, VFC } from \"react\";\nimport { ExampleComponentProps } from \"../../../doc-utils\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\nimport { TextInput } from \"../src\";\nimport { Action } from \"../src/TextInput\";\n\nexport const TextInputExample: VFC<ExampleComponentProps> = ({ choiceValues, boolValues }) => {\n    const [value, setValue] = useState(\"\");\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value);\n    const variant = choiceValues && (choiceValues[\"Variant\"] as LabelVariant);\n    const inline = boolValues && boolValues[\"Inline\"];\n    const action =\n        boolValues && boolValues[\"Med handling\"]\n            ? ({\n                  icon: \"clear\",\n                  label: \"Nullstill feltet\",\n                  onClick: () => setValue(\"\"),\n              } as Action)\n            : undefined;\n    const inverted = boolValues && boolValues[\"Invertert\"];\n    const compact = boolValues && boolValues[\"Kompakt\"];\n    const helpLabel = boolValues && boolValues[\"Med hjelpetekst\"] ? \"Help label\" : undefined;\n    const errorLabel = boolValues && boolValues[\"Med feil\"] ? \"Error label\" : undefined;\n\n    return (\n        <TextInput\n            variant={variant}\n            inline={inline}\n            inverted={inverted}\n            forceCompact={compact}\n            action={action}\n            label=\"Skriv noe her\"\n            name=\"textinput\"\n            helpLabel={helpLabel}\n            errorLabel={errorLabel}\n            placeholder=\"Placeholder\"\n            maxLength={35}\n            value={value}\n            onChange={handleChange}\n            onKeyDown={() => console.log(\"onKeyDown event\")}\n        />\n    );\n};\n","import React, { useState, ChangeEvent, VFC } from \"react\";\nimport { ExampleComponentProps } from \"../../../doc-utils\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\nimport { TextArea } from \"../src\";\n\nexport const TextAreaExample: VFC<ExampleComponentProps> = ({ choiceValues, boolValues }) => {\n    const [value, setValue] = useState(\"\");\n    const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => setValue(e.target.value);\n    const variant = choiceValues && (choiceValues[\"Variant\"] as LabelVariant);\n    const inverted = boolValues && boolValues[\"Invertert\"];\n    const compact = boolValues && boolValues[\"Kompakt\"];\n    const autoExpand = boolValues && boolValues[\"Ekspanderende\"];\n    const medTeller = boolValues && boolValues[\"Med teller\"];\n    const skjulProgress = boolValues && boolValues[\"Skjul progress\"];\n    const helpLabel = boolValues && boolValues[\"Med hjelpetekst\"] ? \"Help label\" : undefined;\n    const errorLabel = boolValues && boolValues[\"Med feil\"] ? \"Error label\" : undefined;\n\n    return (\n        <TextArea\n            counter={medTeller ? { maxLength: 200, hideProgress: skjulProgress } : undefined}\n            variant={variant}\n            inverted={inverted}\n            forceCompact={compact}\n            placeholder=\"Placeholder\"\n            helpLabel={helpLabel}\n            errorLabel={errorLabel}\n            className=\"jkl-spacing--top-2\"\n            label=\"Skriv noe her\"\n            name=\"textarea\"\n            autoExpand={autoExpand}\n            value={value}\n            onChange={handleChange}\n            onKeyDown={() => console.log(\"onKeyDown event\")}\n        />\n    );\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { TextInputExample } from \"./TextInputExample\";\nimport { TextAreaExample } from \"./TextAreaExample\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Vi bruker tekstfelt når vi vil at brukerne skal legge inn informasjon. Ledeteksten skal fortelle hva brukeren skal\n    oppgi i feltet.\n    </Ingress>\n    <ComponentExample title=\"TextInput\" component={TextInputExample} knobs={{\n      boolProps: [\"Inline\", \"Kompakt\", \"Invertert\", \"Med handling\", \"Med hjelpetekst\", \"Med feil\"],\n      choiceProps: [{\n        name: \"Variant\",\n        values: [\"small\", \"medium\", \"large\"],\n        defaultValue: 0\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Tekstfelt godtar data med fast format eller fritekst. Fast format bruker du for eksempel når du vil at brukeren skal angi fødselsnummer eller et postnummer, mens fritekst passer til felt der brukerne skal fortelle noe med egne ord.`}</p>\n    <p>{`Velg størrelse på tekstefelt etter typen data brukerne skal legge inn.`}</p>\n    <p><strong parentName=\"p\">{`Vanlige tekstfelt:`}</strong>{`\nFor innhold som ikke overskrider lengden på feltet.`}</p>\n    <p><strong parentName=\"p\">{`Inline tekstfelt:`}</strong>{`\nTil spesialtilfeller, hvis vi for eksempel trenger å plassere et tekstfelt i en setning.`}</p>\n    <h2>{`Text area`}</h2>\n    <ComponentExample title=\"TextArea\" component={TextAreaExample} knobs={{\n      boolProps: [\"Kompakt\", \"Invertert\", \"Ekspanderende\", \"Med teller\", \"Skjul progress\", \"Med hjelpetekst\", \"Med feil\"],\n      choiceProps: [{\n        name: \"Variant\",\n        values: [\"small\", \"medium\", \"large\"],\n        defaultValue: 0\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Et tekstområde brukes når innholdet blir lengre enn en setning.`}</p>\n    <p>{`Vanligvis starter skjemafeltet minimert og likner et vanlig tekstfelt. Når det får fokus vil feltet ekspandere. Du kan styre antall rader feltet skal ekspanderes til. Om innholdet blir lenger enn antall rader vil feltet scrolle. Du kan velge om feltet alltid skal vise alt innhold (Ekspanderende).`}</p>\n    <p>{`Dersom du har begrensninger på antall tegn kan du velge å vise en teller. Telleren vil ha en standard hjelpetekst om feltet går over grensen. Teksten kan overstyres. Det er ingen blokkering som hindrer brukeren å gå over grensen. Brukeren skal få fullføre tankerekken sin før hen redigerer teksten til å være innenfor grensen. Dersom feltet har en teller vises som standard en `}<em parentName=\"p\">{`progress bar`}</em>{` som krymper etter hvert som teksten blir lenger. Denne kan du velge å skru av og bare vise telleren.`}</p>\n    <h2>{`Tekst og validering`}</h2>\n    <p>{`Velg størrelse på ledetekst etter prinsippene for skjemadesign. Skriv en kort og tydelig ledetekst, som forteller brukerne hva de skal oppgi i feltet. Hvis det trengs, kan vi sette inn en hjelpetekst under feltet, som forklarer mer.`}</p>\n    <p>{`Hvis tekstfeltet ikke validerer, vises en feilmelding som forteller hva som er galt. Vær oppmerskom på at feilmeldingen erstatter en eventuell hjelpetekst, slik at den feilmeldingen du lager også må fortelle hva hjelpeteksten var.`}</p>\n    <p>{`Eksempel:\nHjelpetekst for et tekstfelt med fast format: `}<em parentName=\"p\">{`Fyll ut fødselsnummer, 11 siffer.`}</em>{` Feilemeldingstekst: `}<em parentName=\"p\">{`Du må fylle ut fødselsnummer, 11 siffer`}</em>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["TextInputExample","choiceValues","boolValues","useState","value","setValue","variant","inline","action","icon","label","onClick","undefined","inverted","compact","helpLabel","errorLabel","forceCompact","name","placeholder","maxLength","onChange","e","target","onKeyDown","console","log","TextAreaExample","autoExpand","medTeller","skjulProgress","counter","hideProgress","className","_frontmatter","makeShortcode","props","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","title","component","knobs","boolProps","choiceProps","values","defaultValue","parentName","isMDXComponent"],"sourceRoot":""}