{"version":3,"file":"component---packages-message-box-react-documentation-message-box-mdx-c7ff05d9bbdae8915d1a.js","mappings":"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","sources":["webpack://@fremtind/portal/../packages/message-box-react/src/MessageBox.tsx","webpack://@fremtind/portal/../packages/message-box-react/documentation/Example.tsx","webpack://@fremtind/portal/../packages/message-box-react/documentation/MessageBox.mdx"],"sourcesContent":["import React, { AriaRole, ReactNode } from \"react\";\nimport classNames from \"classnames\";\n\nimport { IconButton } from \"@fremtind/jkl-icon-button-react\";\n\ninterface Props {\n    children: ReactNode;\n    title?: string;\n    fullWidth?: boolean;\n    className?: string;\n    /** @deprecated */\n    inverted?: boolean;\n    dismissed?: boolean;\n    dismissAction?: {\n        handleDismiss: () => void;\n        buttonTitle?: string;\n    };\n    /** Overstyr standardrollen til meldingen. Om du ønsker å \"skru av\" rollen kan du bruke verdien `none presentation`. */\n    role?: AriaRole;\n}\n\ntype messageTypes = \"info\" | \"error\" | \"success\" | \"warning\";\n\nfunction messageFactory(messageType: messageTypes) {\n    return function messageBox({\n        title,\n        fullWidth,\n        className = \"\",\n        inverted,\n        dismissed,\n        dismissAction,\n        children,\n        role,\n    }: Props) {\n        const componentClassName = classNames(\"jkl-message-box\", \"jkl-message-box--\" + messageType, className, {\n            \"jkl-message-box--full\": fullWidth,\n            \"jkl-message-box--dark\": inverted,\n            \"jkl-message-box--dismissed\": dismissed,\n        });\n\n        const getIcon = (messageType: messageTypes) => {\n            switch (messageType) {\n                case \"error\":\n                    return (\n                        <svg\n                            aria-hidden\n                            className=\"jkl-message-box__icon\"\n                            width=\"24\"\n                            height=\"24\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                            <circle cx=\"12\" cy=\"12\" r=\"11.5\" stroke=\"currentColor\" />\n                            <rect\n                                x=\"4\"\n                                y=\"4.22168\"\n                                width=\"1\"\n                                height=\"22\"\n                                transform=\"rotate(-45 4 4.22168)\"\n                                fill=\"currentColor\"\n                            />\n                        </svg>\n                    );\n                case \"info\":\n                    return (\n                        <svg\n                            aria-hidden\n                            className=\"jkl-message-box__icon\"\n                            width=\"24\"\n                            height=\"24\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                            <circle cx=\"12\" cy=\"12\" r=\"11.5\" stroke=\"currentColor\" />\n                            <path\n                                d=\"M11.952 7.328C12.384 7.328 12.688 7.072 12.688 6.624C12.688 6.192 12.384 5.92 11.952 5.92C11.536 5.92 11.248 6.192 11.248 6.624C11.248 7.072 11.536 7.328 11.952 7.328ZM11.504 18H12.512V9.408H11.504V18Z\"\n                                fill=\"currentColor\"\n                            />\n                        </svg>\n                    );\n                case \"success\":\n                    return (\n                        <svg\n                            aria-hidden\n                            className=\"jkl-message-box__icon\"\n                            width=\"24\"\n                            height=\"24\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                            <circle cx=\"12\" cy=\"12\" r=\"11.5\" stroke=\"currentColor\" />\n                            <path d=\"M7 13.5L10 16.5L19.5 7\" stroke=\"currentColor\" />\n                        </svg>\n                    );\n                case \"warning\":\n                    return (\n                        <svg\n                            aria-hidden\n                            className=\"jkl-message-box__icon\"\n                            width=\"24\"\n                            height=\"25\"\n                            viewBox=\"0 0 24 25\"\n                            fill=\"none\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                            <circle cx=\"12\" cy=\"12\" r=\"11.5\" stroke=\"currentColor\" />\n                            <path\n                                className=\"jkl-icon-exclamation\"\n                                d=\"M11.112 14.624H11.688L11.896 11.36V6H10.904V11.36L11.112 14.624ZM11.4 18.24C11.784 18.24 12.136 17.952 12.136 17.504C12.136 17.072 11.784 16.784 11.4 16.784C11.016 16.784 10.664 17.072 10.664 17.504C10.664 17.952 11.016 18.24 11.4 18.24Z\"\n                                fill=\"currentColor\"\n                            />\n                        </svg>\n                    );\n                default:\n                    return null;\n            }\n        };\n\n        const getRole = (messageType: messageTypes) => {\n            switch (messageType) {\n                case \"error\":\n                case \"warning\":\n                    return \"alert\";\n                case \"info\":\n                case \"success\":\n                    return \"status\";\n                default:\n                    return undefined;\n            }\n        };\n\n        return (\n            <div className={componentClassName} role={role || getRole(messageType)}>\n                {getIcon(messageType)}\n                <div className=\"jkl-message-box__content\">\n                    {title !== undefined && <p className=\"jkl-message-box__title\">{title}</p>}\n                    <p className=\"jkl-body\">{children}</p>\n                </div>\n                {dismissAction?.handleDismiss && (\n                    <IconButton\n                        className=\"jkl-message-box__dismiss-button\"\n                        iconType=\"clear\"\n                        buttonTitle={dismissAction.buttonTitle || \"Lukk\"}\n                        onClick={dismissAction.handleDismiss}\n                    />\n                )}\n            </div>\n        );\n    };\n}\n\nexport const InfoMessage = messageFactory(\"info\");\nexport const ErrorMessage = messageFactory(\"error\");\nexport const WarningMessage = messageFactory(\"warning\");\nexport const SuccessMessage = messageFactory(\"success\");\n","import React, { useState } from \"react\";\nimport { ExampleComponentProps } from \"../../../doc-utils\";\nimport { ErrorMessage, InfoMessage, SuccessMessage, WarningMessage } from \"../src\";\n\nconst getTypeOfBox = (typeofBox?: string) => {\n    switch (typeofBox) {\n        case \"Infomelding\":\n            return InfoMessage;\n        case \"Suksessmelding\":\n            return SuccessMessage;\n        case \"Advarselsmelding\":\n            return WarningMessage;\n        case \"Feilmelding\":\n            return ErrorMessage;\n        default:\n            return InfoMessage;\n    }\n};\n\nexport const Example: React.FC<ExampleComponentProps> = ({ boolValues, choiceValues }) => {\n    const [dismissed, setDismissed] = useState(false);\n    const C = getTypeOfBox(choiceValues ? choiceValues[\"Type\"] : \"\");\n    const dismissAction =\n        boolValues && boolValues[\"Avvisbar\"]\n            ? {\n                  handleDismiss: () => setDismissed(true),\n                  buttonTitle: \"Merk som lest\",\n              }\n            : undefined;\n    return (\n        <C\n            fullWidth={boolValues && boolValues[\"Full bredde\"]}\n            title={choiceValues && choiceValues[\"Type\"]}\n            inverted={boolValues && boolValues[\"Invertert\"]}\n            dismissed={dismissed}\n            dismissAction={dismissAction}\n        >\n            Hei, jeg er en melding av typen {choiceValues ? choiceValues[\"Type\"] : \"ʕ•ᴥ•ʔ\"}\n        </C>\n    );\n};\n\nexport default Example;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Example } from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    En melding er en beskjed til brukeren. Det kan være et varsel om at noe er feil, informasjon om at noe mangler i et\n    skjema, eller en bekreftelse på at noe har blitt oppdatert. Meldingene består av en overskrift og en meldingstekst.\n    </Ingress>\n    <ComponentExample component={Example} knobs={{\n      boolProps: [\"Full bredde\", \"Invertert\", \"Avvisbar\"],\n      choiceProps: [{\n        name: \"Type\",\n        values: [\"Infomelding\", \"Suksessmelding\", \"Advarselsmelding\", \"Feilmelding\"],\n        defaultValue: 0\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <h2>{`Meldingstyper`}</h2>\n    <p>{`Vi har fire ulike meldinger, med fargene blå, rød, gul og grønn.`}</p>\n    <p><strong parentName=\"p\">{`Blå:`}</strong>{` gir informasjon til brukeren.`}</p>\n    <p><strong parentName=\"p\">{`Gul:`}</strong>{` gir brukeren en advarsel, for eksempel at en funksjonalitet er i beta og derfor er ustabil.`}</p>\n    <p><strong parentName=\"p\">{`Rød:`}</strong>{` gir brukeren en feilmelding, for eksempel hvis det oppstår en systemfeil eller brukeren avbryter en handling.`}</p>\n    <p><strong parentName=\"p\">{`Grønn:`}</strong>{` forteller at en handling var vellykket.`}</p>\n    <h3>{`Tilgjengelighet`}</h3>\n    <p>{`Når vi bruker meldinger med farge, må vi alltid huske å ha en god og beskrivende overskrift, siden farge ikke er et godt nok kjennetegn for alle brukere. Skriv en presis meldingstekst, der du sier det viktigste først.`}</p>\n    <h2>{`Avvisbare meldinger`}</h2>\n    <p>{`Dersom meldingen ikke er koblet til en tilstand på siden (som f.eks. en feil i et skjema) kan man la brukeren lukke den. For global informasjon som driftsmeldinger bør man huske valget om å lukke meldingen, så brukeren slipper å se den på nytt.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["messageFactory","messageType","title","fullWidth","className","inverted","dismissed","dismissAction","children","role","componentClassName","classNames","getRole","width","height","viewBox","fill","xmlns","cx","cy","r","stroke","x","y","transform","d","getIcon","undefined","handleDismiss","iconType","buttonTitle","onClick","InfoMessage","ErrorMessage","WarningMessage","SuccessMessage","Example","boolValues","choiceValues","useState","setDismissed","C","typeofBox","getTypeOfBox","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","boolProps","choiceProps","values","defaultValue","parentName","isMDXComponent"],"sourceRoot":""}