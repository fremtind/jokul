{"version":3,"file":"component---src-texts-universell-utforming-essentials-uu-mdx-e256302efad68df4f051.js","mappings":"6MAUsBA,E,yDAFTC,EAAe,GAOtBC,GALgBF,EAKQ,UALA,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,oDACA,SAACT,EAAD,CAASS,QAAQ,WAAjB,oNAIA,kTACA,4YACA,sNACA,4sBAEA,6BACA,8IAA+H,uBAAYC,WAAW,KAAvB,QAA/H,oBAAmM,uBAAYA,WAAW,KAAvB,UAAnM,qFACA,+CACA,oBACE,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,MAApB,YACA,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,MAApB,aACA,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,MAApB,cACA,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,MAApB,eAEF,wHACA,2FAA4E,cAAGA,WAAW,IACtF,KAAQ,sBADgE,mBAA5E,MAGA,4XACA,kCACA,iHAAkG,uBAAYA,WAAW,KAAvB,WAAlG,cAAmK,uBAAYA,WAAW,KAAvB,UAAnK,iJACA,uUACA,4BACA,mSACA,mNAAoM,uBAAYA,WAAW,KAAvB,wBAApM,4BAAgS,uBAAYA,WAAW,KAAvB,YAAhS,+BACA,+nBACA,8EAA+D,uBAAYA,WAAW,KAAvB,QAA/D,MAAqH,uBAAYA,WAAW,KAAvB,YAArH,QAAiL,uBAAYA,WAAW,KAAvB,mBAAjL,MACA,mBAAG,cAAGA,WAAW,IACb,KAAQ,sDADT,gFAGH,iCACA,uIAAwH,uBAAYA,WAAW,KAAvB,MAAxH,iOAAuY,uBAAYA,WAAW,KAAvB,QAAvY,8HACA,iTACA,mBAAG,gBAAKA,WAAW,IACf,IAAO,gEACP,IAAO,qEAEX,6IAA8H,cAAGA,WAAW,IACxI,KAAQ,qCADkH,iCAA9H,MAOJH,EAAWI,gBAAiB","sources":["webpack://@fremtind/portal/./src/texts/universell-utforming/EssentialsUU.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Universell utforming i Jøkul`}</h1>\n    <Ingress mdxType=\"Ingress\">\n    Universell utforming handler om at vi skal lage løsninger med tanke på at brukere kan ha ulik funksjonsevne,\n    midlertidig eller varig. Ved å ta hensyn til det, når vi alle målgruppene med én og samme løsning.\n    </Ingress>\n    <p>{`Det er fort gjort å tenke at universell utforming kun gjelder en liten gruppe mennesker. Men man regner med at mellom 15% og 20% av befolkningen har en form for funksjonsnedsettelse. Dette kan være for eksempel syn, hørsel, bevegelseshemming eller psykososiale funksjonsnedsettelser.`}</p>\n    <p>{`Men dette er bare de som har permanente nedsettelser. Selv opplever vi alle flere ganger daglig å ha en form for funksjonsnedsettelse. Dette kan være en fysisk nedsettelse ved at du klemmer en finger så du ikke kan bruke ene hånden ordentlig. Eller det kan være en mental nedsettelse som når du står på perrongen og skal kjøpe togbillett mens toget ruller inn på stasjonen.`}</p>\n    <p>{`I alle tilfeller er det viktig at en løsning har tenkt på universell utforming sånn at alle kan bruke tjenesten, uansett om de har permanente, temporærere, fysiske eller mentale nedsettelser.`}</p>\n    <p>{`Lovverket definerer i dag at alle nye tjenester skal være universelt utformet fra 1. juli 2014. Eksisterende tjenester skal være universelt utformet innen 1. januar 2020. I tillegg er en oppdatering av lovverket på vei hvor kravene vil oppgraderes til å omfatte WCAG2.1 samt krav til en tilgjengelighetserklæring.\nI utgangspunktet skulle det komme en lov 1. juli 2020 som innfattet dette, men denne ble forsinket da mange land ønsket en lenger overgangsperiode for innføring av de nye kravene. Dette er derimot ingen grunn til å vente med å utvide støtten. Over tid vil denne siden ta for seg flere krav og kunne gi dokumentasjon for hvordan du kommer i gang med en tilgjengelighetserklæring.`}</p>\n    <h2>{`Språk`}</h2>\n    <p>{`For at opplesende hjelpemidler skal kunne velge riktig stemme må språk være satt i koden. Dette gjør man ved å definere `}<inlineCode parentName=\"p\">{`lang`}</inlineCode>{` attributten på `}<inlineCode parentName=\"p\">{`<html>`}</inlineCode>{` taggen. Språket må angis ved å bruke språkkode definert i ISO 639-1 standarden.`}</p>\n    <p>{`De mest brukte kodene er`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`no`}</strong>{`: norsk`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`nb`}</strong>{`: bokmål`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`nn`}</strong>{`: nynorsk`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`en`}</strong>{`: engelsk`}</li>\n    </ul>\n    <p>{`En annen sideeffekt av å bruke riktig språk er at søkemotorer får hjelp til å gi relevante traff.`}</p>\n    <p>{`I Fremtind har vi en tone of voice som heter Stemmen vår. Den kan du `}<a parentName=\"p\" {...{\n        \"href\": \"/profil/stilogtone\"\n      }}>{`lese mer om her`}</a>{`.`}</p>\n    <p>{`Når det kommer til språk er det lurt å teste med en skjermleser for å få et bilde av hvordan siden faktisk høres ut. Her vil man oppdage at man eksempelvis bør unngå bindestrek: skriv \"Fra 1 til 10\" i stedet for \"Fra 1-10\". Det kan også være behov for å gi egne tekster til skjermleseren for å gi kontekst som ikke er enkel å oppfatte uten å se selve siden.`}</p>\n    <h2>{`Sidetittel`}</h2>\n    <p>{`Sidetittel presenteres øverst i vinduet eller i fanen i nettleseren. Den er et resultat av `}<inlineCode parentName=\"p\">{`<title>`}</inlineCode>{` taggen i `}<inlineCode parentName=\"p\">{`<head>`}</inlineCode>{`. Sidetittelen er det første som leses av hjelpemidler, og skal være beskrivende for hvilke side brukeren er på og navnet på nettstedeieren.`}</p>\n    <p>{`Det er god praksis å innlede sidetittelen med beskrivelse av siden, og deretter nettstedeier. Dette er spesielt med tanke på at det kan være begrenset plass i visningen av navnet. For brukere med for eksempel skjermleser vil det ta kortere tid å få relevant informasjon når sidebeskrivelsen kommer først.`}</p>\n    <h2>{`ARIA`}</h2>\n    <p>{`ARIA, også kjent som WAI-ARIA (Accessibility Initiative – Accessible Rich Internet Applications) er en spesifikasjon som ble laget for å forbedre tilgjengelighet i HTML. Bruken av ARIA attributter er å utvide funksjonalitet for hjelpemidler hvor ikke semantikk er nok.`}</p>\n    <p>{`ARIA-attributter endrer ingenting på nettsiden. Derimot eksponerer de mer informasjon til hjelpemidler, spesielt skjermleser. Eksempelvis er ikke en knapp faktisk disabled ved bare å sette `}<inlineCode parentName=\"p\">{`aria-disabled=\"true\"`}</inlineCode>{`, men man må også bruke `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` attributten på elementet.`}</p>\n    <p>{`Det er viktig å være obs på bruk av ARIA: Det er ikke en offisielt vedtatt spesifikasjon, og støtten kan være forskjellig mellom både operativsystemer, nettlesere og hjelpemidler. En god huskeregel er å kun bruke ARIA når det er nødvendig. Så langt det er mulig skal man forholde seg til standard HTML funksjonalitet. Man kan faktisk gjøre opplevelsen av nettsiden mye dårligere av å bruke ARIA feil. Tidligere har tilgjengelighet og ARIA blitt sett på som samme ting, det er feil. ARIA er viktig for mange, og dermed viktig for oss, men det er en relativt liten komponent i å lage gode opplevelser på nett for alle.`}</p>\n    <p>{`Eksempler på mye brukte ARIA attributter er blant annet `}<inlineCode parentName=\"p\">{`role`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`tabindex`}</inlineCode>{` og `}<inlineCode parentName=\"p\">{`aria-labelledby`}</inlineCode>{`.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/wai-aria-1.1/#state_prop_def\"\n      }}>{`Her kan du lese mer om de forskjellige attributtene og når de skal brukes.`}</a></p>\n    <h2>{`Semantikk`}</h2>\n    <p>{`Når man snakker om semantikk og tilgjengelighet, er det ofte betydningen av HTML man snakker om. For eksempel er `}<inlineCode parentName=\"p\">{`h1`}</inlineCode>{` et semantisk HTML element, som gir innholdet betydningen av å være toppoverskrift på siden. Nettlesere vil ofte legge på en stil på elementet, men man kan stile semantiske elementer akkurat som man vil. Om man stiler et `}<inlineCode parentName=\"p\">{`span`}</inlineCode>{` element til å se ut som en h1, vil det gi samme visuelle betydning, men den faktiske betydningen av elementet er endret.`}</p>\n    <p>{`Semantiske HTML elementer hjelper skjermlesere med navigasjon. De gir landemerker skjermleseren kan forholde seg til, og kan gi kontekst til brukeren. I tillegg gir god semantikk bedre score hos søkemotorer, og det motiverer til god kode. Man vil også enklere få en meningsfull flyt`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"http://html5doctor.com/downloads/h5d-sectioning-flowchart.png\",\n        \"alt\": \"Flytskjema for hvordan man kan bruke semantiske HTML elementer\"\n      }}></img></p>\n    <p>{`På Mac kan man få en enkel oversikt over viktige semantiske elementer på siden ved å ta i bruk 'rotor' i VoiceOver. Se `}<a parentName=\"p\" {...{\n        \"href\": \"/universell-utforming/skjermleser\"\n      }}>{`guide til test av skjermleser`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Ingress","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}