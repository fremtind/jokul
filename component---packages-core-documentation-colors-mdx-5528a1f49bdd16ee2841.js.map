{"version":3,"file":"component---packages-core-documentation-colors-mdx-5528a1f49bdd16ee2841.js","mappings":"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","sources":["webpack://@fremtind/portal/../packages/core/documentation/Colors/Colors.tsx","webpack://@fremtind/portal/../packages/core/documentation/colors.mdx"],"sourcesContent":["import React, { FC, useRef, VFC, useState, useEffect } from \"react\";\nimport { ContentToggle } from \"../../../content-toggle-react\";\nimport \"./colors.scss\";\n\ntype colors =\n    | \"hvit\"\n    | \"snohvit\"\n    | \"sand\"\n    | \"dis\"\n    | \"varde\"\n    | \"svaberg\"\n    | \"stein\"\n    | \"fjellgra\"\n    | \"skifer\"\n    | \"granitt\"\n    | \"svart\"\n    | \"suksess\"\n    | \"info\"\n    | \"advarsel\"\n    | \"feil\"\n    | \"suksess--darkbg\"\n    | \"info--darkbg\"\n    | \"advarsel--darkbg\"\n    | \"feil--darkbg\";\n\ninterface Props {\n    color: colors;\n    handleClick: (color: string) => void;\n}\n\nconst generateColorVariableName = (color: string) => `jkl.$color-${color}`;\n\nconst useTimedToggle = (): [boolean, () => void] => {\n    const [toggle, setToggle] = useState(false);\n\n    useEffect(() => {\n        let timeoutId: NodeJS.Timeout;\n\n        if (toggle) {\n            timeoutId = setTimeout(() => {\n                setToggle(false);\n            }, 1500);\n        }\n\n        return () => clearTimeout(timeoutId);\n    }, [toggle]);\n\n    return [toggle, () => setToggle(true)];\n};\n\nconst ColorBox: VFC<Props> = ({ color, handleClick }) => {\n    const [copied, didCopy] = useTimedToggle();\n\n    return (\n        <button\n            type=\"button\"\n            onClick={() => {\n                didCopy();\n                handleClick(generateColorVariableName(color));\n            }}\n            className=\"jkl-color-box__wrapper\"\n        >\n            <span className=\"jkl-color-box__multi\">\n                <span className={`jkl-color-box jkl-color-box--left jkl-color-box--${color}`}></span>\n                <span className={`jkl-color-box jkl-color-box--right jkl-color-box--${color}`}></span>\n            </span>\n            <ContentToggle\n                secondary={<span className=\"jkl-color-box__text jkl-body\">Kopiert!</span>}\n                showSecondary={copied}\n                className=\"jkl-color-box__content-toggle\"\n            >\n                <span className=\"jkl-color-box__text jkl-body\">${color}</span>\n            </ContentToggle>\n        </button>\n    );\n};\n\ninterface MultiColorProps {\n    colors: colors[];\n    handleClick: (color: string) => void;\n}\n\nconst MultiColorBox: VFC<MultiColorProps> = ({ colors, handleClick }) => {\n    const [copied, didCopy] = useTimedToggle();\n\n    return (\n        <button\n            type=\"button\"\n            onClick={() => {\n                didCopy();\n                handleClick(`${generateColorVariableName(colors[0])}, $${generateColorVariableName(colors[1])}`);\n            }}\n            className=\"jkl-color-box__wrapper\"\n        >\n            <span className=\"jkl-color-box__multi\">\n                <span className={`jkl-color-box jkl-color-box--left jkl-color-box--${colors[0]}`}></span>\n                <span className={`jkl-color-box jkl-color-box--right jkl-color-box--${colors[1]}`}></span>\n            </span>\n            <ContentToggle\n                secondary={<span className=\"jkl-color-box__text jkl-body\">Kopiert!</span>}\n                showSecondary={copied}\n                className=\"jkl-color-box__content-toggle jkl-color-box__content-toggle--multi\"\n            >\n                <div className=\"jkl-color-box__text-wrapper\">\n                    <span className=\"jkl-color-box__text jkl-body\">${colors[0]}</span>\n                    <span className=\"jkl-color-box__text jkl-body\">${colors[1]}</span>\n                </div>\n            </ContentToggle>\n        </button>\n    );\n};\n\ninterface ColorProps {\n    title: string;\n}\n\nconst ColorGroup: FC<ColorProps> = ({ title, children }) => (\n    <section className=\"jkl-colors__section\">\n        <h2 className=\"jkl-title-small jkl-spacing--bottom-2\">{title}</h2>\n        {children}\n    </section>\n);\n\nconst Colors: VFC = () => {\n    const ref = useRef<HTMLTextAreaElement>(null);\n\n    const copyCodeToClipboard = (color: string) => {\n        if (ref.current) {\n            ref.current.value = `${color}`;\n            ref.current.select();\n            document.execCommand(\"copy\");\n        }\n    };\n\n    return (\n        <section style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n            <textarea ref={ref} className=\"jkl-color__copy\" />\n            <ColorGroup title=\"Farger\">\n                <ColorBox handleClick={copyCodeToClipboard} color=\"hvit\" />\n                <ColorBox handleClick={copyCodeToClipboard} color=\"snohvit\" />\n                <ColorBox handleClick={copyCodeToClipboard} color=\"sand\" />\n                <ColorBox handleClick={copyCodeToClipboard} color=\"dis\" />\n                <ColorBox handleClick={copyCodeToClipboard} color=\"varde\" />\n                <ColorBox handleClick={copyCodeToClipboard} color=\"svaberg\" />\n                <ColorBox handleClick={copyCodeToClipboard} color=\"stein\" />\n                <ColorBox handleClick={copyCodeToClipboard} color=\"fjellgra\" />\n                <ColorBox handleClick={copyCodeToClipboard} color=\"skifer\" />\n                <ColorBox handleClick={copyCodeToClipboard} color=\"granitt\" />\n                <ColorBox handleClick={copyCodeToClipboard} color=\"svart\" />\n            </ColorGroup>\n            <ColorGroup title=\"Bruksfarger\">\n                <MultiColorBox handleClick={copyCodeToClipboard} colors={[\"suksess\", \"suksess--darkbg\"]} />\n                <MultiColorBox handleClick={copyCodeToClipboard} colors={[\"info\", \"info--darkbg\"]} />\n                <MultiColorBox handleClick={copyCodeToClipboard} colors={[\"advarsel\", \"advarsel--darkbg\"]} />\n                <MultiColorBox handleClick={copyCodeToClipboard} colors={[\"feil\", \"feil--darkbg\"]} />\n            </ColorGroup>\n        </section>\n    );\n};\n\nexport default Colors;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport Colors from \"./Colors/Colors\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Les mer om fargene `}<a parentName=\"p\" {...{\n        \"href\": \"/profil/farger\"\n      }}>{`her`}</a>{`.`}</p>\n    <p>{`For å ta i bruk fargene må du ha oppsett for sass i ditt prosjekt, normalt vil i importen i dine sass filer bli:`}</p>\n    <p><inlineCode parentName=\"p\">{`@use \"~@fremtind/jkl-core/variables/_colors.scss\";`}</inlineCode></p>\n    <p>{`eller om du har behov for flere variabler enn farger:`}</p>\n    <p><inlineCode parentName=\"p\">{`@use \"~@fremtind/jkl-core/jkl\";`}</inlineCode></p>\n    <p>{`Fargene referers til med variabelnavn etter mønster `}<inlineCode parentName=\"p\">{`jkl.$color-hvit;`}</inlineCode></p>\n    <p>{`Klikk på fargene for å kopiere scss-variabelnavnet til clipboard`}</p>\n    <Colors mdxType=\"Colors\" />\n    <h2>{`Farger som util klasser`}</h2>\n    <p><inlineCode parentName=\"p\">{`@import \"~@fremtind/jkl-core/color-classes.scss\";`}</inlineCode></p>\n    <p>{`farger som util klasser`}</p>\n    <p>{`Vi bruker vanligvis ikke disse klassene, men først og fremst fargevariablene ovenfor.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["generateColorVariableName","color","useTimedToggle","useState","toggle","setToggle","useEffect","timeoutId","setTimeout","clearTimeout","ColorBox","handleClick","copied","didCopy","type","onClick","className","secondary","showSecondary","MultiColorBox","colors","ColorGroup","title","children","ref","useRef","copyCodeToClipboard","current","value","select","document","execCommand","style","display","flexWrap","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}