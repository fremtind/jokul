{"version":3,"file":"component---packages-slider-react-documentation-slider-mdx-49571fbc6334fb9067c8.js","mappings":"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","sources":["webpack://@fremtind/portal/../packages/slider-react/src/Slider.tsx","webpack://@fremtind/portal/../packages/slider-react/documentation/Example.tsx","webpack://@fremtind/portal/../packages/slider-react/documentation/Slider.mdx"],"sourcesContent":["import React, { ChangeEventHandler, forwardRef, useEffect, useRef, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport cn from \"classnames\";\n\nimport { Label, LabelVariant, SupportLabel } from \"@fremtind/jkl-core\";\n\ninterface Props {\n    className?: string;\n    label: string;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    name: string;\n    id?: string;\n    from?: number;\n    to?: number;\n    value?: number;\n    onChange: ChangeEventHandler<HTMLInputElement>;\n}\n\nexport const Slider = forwardRef<HTMLInputElement, Props>(\n    ({ className, label, helpLabel, errorLabel, variant = \"medium\", id, from = 1, to = 5, value, ...rest }, ref) => {\n        const numsteps = to - (from - 1);\n        const steps = [...Array(numsteps).keys()];\n        const [uid] = useState(id || `jkl-slider-${nanoid(8)}`);\n\n        const [progressWidth, setProgressWidth] = useState<number>();\n        const inputRef = useRef<HTMLInputElement>(null);\n\n        useEffect(() => {\n            const gaps = to - from;\n            const totalWidth = inputRef.current?.clientWidth || 0;\n            const partWidth = (totalWidth / gaps) * ((value || from) - from);\n            setProgressWidth(partWidth);\n        }, [value, inputRef, from, to]);\n\n        // Sync the internal ref that we need to style the slider with the forwarded ref (if any)\n        useEffect(() => {\n            if (!ref) {\n                return;\n            }\n            if (typeof ref === \"function\") {\n                ref(inputRef.current);\n            } else {\n                ref.current = inputRef.current;\n            }\n        }, [ref, inputRef]);\n\n        return (\n            <div\n                className={cn(\"jkl-slider\", className, {\n                    \"jkl-slider--invalid\": !!errorLabel,\n                })}\n            >\n                <Label standAlone htmlFor={uid} variant={variant}>\n                    {label}\n                </Label>\n                <input\n                    ref={inputRef}\n                    className=\"jkl-slider__slider\"\n                    type=\"range\"\n                    list=\"jkl-slider__values\"\n                    min={from}\n                    max={to}\n                    id={uid}\n                    value={value}\n                    {...rest}\n                    style={\n                        {\n                            \"--progress-width\": `${progressWidth}px`,\n                        } as React.CSSProperties\n                    }\n                />\n                <div id=\"jkl-slider__values\" className=\"jkl-slider__values\">\n                    {steps.map((step) => (\n                        <span\n                            key={step}\n                            className={cn({\n                                \"jkl-slider__value\": true,\n                                \"jkl-slider__value--current\": value === step + from,\n                            })}\n                        >\n                            {step + from}\n                        </span>\n                    ))}\n                </div>\n                <SupportLabel className=\"jkl-layout-spacing--xs-top\" helpLabel={helpLabel} errorLabel={errorLabel} />\n            </div>\n        );\n    },\n);\nSlider.displayName = \"Slider\";\n","import React, { VFC, useState } from \"react\";\nimport { ExampleComponentProps } from \"../../../doc-utils\";\nimport { Slider } from \"../src\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\n\nexport const Example: VFC<ExampleComponentProps> = ({ boolValues, choiceValues }) => {\n    const variant = choiceValues && (choiceValues[\"Etikettvariant\"] as LabelVariant);\n    const errorLabel = boolValues && boolValues[\"Med feil\"] ? \"Du må velge en verdi\" : undefined;\n    const helpLabel =\n        boolValues && boolValues[\"Med hjelpetekst\"] ? \"1 = veldig misførnøyd, 5 = veldig fornøyd\" : undefined;\n\n    const [value, setValue] = useState<number>();\n\n    return (\n        <Slider\n            variant={variant}\n            label=\"På en skala fra 1 til 5, hvor fornøyd er du med løsningen?\"\n            name=\"fornøyd\"\n            value={value}\n            onChange={(e) => setValue(parseInt(e.target.value))}\n            helpLabel={helpLabel}\n            errorLabel={errorLabel}\n        />\n    );\n};\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Example } from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Vi bruker slider der brukeren skal velge en tallverdi fra et spesifisert område. Det kan for eksampel være å gi en\n    vurdering fra 1 til 5.\n    </Ingress>\n    <ComponentExample component={Example} knobs={{\n      boolProps: [\"Med hjelpetekst\", \"Med feil\"],\n      choiceProps: [{\n        name: \"Etikettvariant\",\n        values: [\"small\", \"medium\", \"large\"],\n        defaultValue: 1\n      }]\n    }} mdxType=\"ComponentExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["Slider","forwardRef","ref","className","label","helpLabel","errorLabel","variant","id","from","to","value","rest","numsteps","steps","Array","keys","uid","useState","nanoid","progressWidth","setProgressWidth","inputRef","useRef","useEffect","gaps","totalWidth","current","clientWidth","cn","standAlone","htmlFor","type","list","min","max","style","map","step","key","displayName","Example","boolValues","choiceValues","undefined","setValue","name","onChange","e","parseInt","target","_frontmatter","makeShortcode","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","knobs","boolProps","choiceProps","values","defaultValue","isMDXComponent"],"sourceRoot":""}