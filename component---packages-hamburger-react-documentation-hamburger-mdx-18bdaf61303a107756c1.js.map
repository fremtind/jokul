{"version":3,"file":"component---packages-hamburger-react-documentation-hamburger-mdx-18bdaf61303a107756c1.js","mappings":"4MAWsBA,E,mECSTC,EAAY,SAAC,GAQZ,IAPVC,EAOS,EAPTA,OACAC,EAMS,EANTA,QAMS,IALTC,SAAAA,OAKS,aAJTC,YAAAA,OAIS,MAJK,YAIL,EAHTC,EAGS,EAHTA,UACAC,EAES,EAFTA,YACiBC,EACR,EADT,iBAEMC,EAAqBC,GAAAA,CACvB,gBACA,CACI,0BAA2BN,EAC3B,8BAAyD,YAA1BG,MAAAA,OAAA,EAAAA,EAAaI,UAC5C,6BAA8BJ,GAAwC,WAAzBA,EAAYI,UAE7DL,GAGEM,EAAiBF,GAAAA,CAAW,uBAAwB,CACtD,iCAAkCH,MAAAA,OAAlC,EAAkCA,EAAaM,WAGnD,OACI,0BACIC,KAAK,SACL,aAAYT,EACZF,QAASA,EACTG,UAAWG,EACX,gBAAeP,QAAUa,EACzB,gBAAc,OACd,cAAY,gBACZ,gBAAeP,GAEf,wBAAMF,UAAU,yBACfC,GACG,gBAAC,IAAD,CACID,UAAWM,EACXI,UAAWT,EAAYU,MACvBC,cAAehB,EACfiB,QAAQ,QAEPZ,EAAYa,QCpCjC,EAtBgB,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,WACf,GAA4BC,EAAAA,EAAAA,WAAS,GAA9BpB,EAAP,KAAeqB,EAAf,KAEA,OACI,gBAACtB,EAAD,CACIC,OAAQA,EACRE,SAAUiB,GAAcA,EAAU,UAClClB,QAAS,kBAAMoB,GAAWrB,IAC1BK,YACIc,GAAcA,EAAW,aACnB,CACIJ,MAAO,OACPG,KAAM,OACNT,SAAUU,EAAW,mBAAqB,SAAW,QACrDR,SAAUQ,EAAW,gCAEzBN,K,iBFXTS,EAAe,GAOtBC,GALgBzB,EAKiB,mBALT,SAA6B0B,GAEzD,OADAC,QAAQC,KAAK,aAAe5B,EAAO,4EAC5B,eAAS0B,KAIZG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAI5E,SAACT,EAAD,CAAkBU,MAAO,CACvBC,UAAW,CAAC,YAAa,YAAa,kBAAmB,2BACxDC,UAAWC,EAASJ,QAAQ,sBAKnCF,EAAWO,gBAAiB","sources":["webpack://@fremtind/portal/../packages/hamburger-react/documentation/Hamburger.mdx","webpack://@fremtind/portal/../packages/hamburger-react/src/Hamburger.tsx","webpack://@fremtind/portal/../packages/hamburger-react/documentation/Example.tsx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <ComponentExample knobs={{\n      boolProps: [\"Invertert\", \"Med tekst\", \"Tekst før knapp\", \"Skaler tekst ved hover\"]\n    }} component={Example} mdxType=\"ComponentExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\";\nimport { ContentToggle } from \"@fremtind/jkl-content-toggle-react\";\nimport classnames from \"classnames\";\n\ninterface Props {\n    isOpen: boolean;\n    onClick: (() => void) | ((evt: React.MouseEvent) => void);\n    className?: string;\n    /** @deprecated use data-theme[\"dark|light\"] where possible in stead. this prop is to support IE11 */\n    inverted?: boolean;\n    description?: string;\n    actionLabel?: {\n        open: string;\n        close: string;\n        animated?: boolean;\n        position?: \"before\" | \"after\";\n    };\n    \"aria-controls\"?: string;\n}\n\nexport const Hamburger = ({\n    isOpen,\n    onClick,\n    inverted = false,\n    description = \"Hovedmeny\",\n    className,\n    actionLabel,\n    \"aria-controls\": ariaControls,\n}: Props) => {\n    const componentClassname = classnames(\n        \"jkl-hamburger\",\n        {\n            \"jkl-hamburger--inverted\": inverted,\n            \"jkl-hamburger--label-before\": actionLabel?.position === \"before\",\n            \"jkl-hamburger--label-after\": actionLabel && actionLabel.position !== \"before\",\n        },\n        className,\n    );\n\n    const labelClassname = classnames(\"jkl-hamburger__label\", {\n        \"jkl-hamburger__label--animated\": actionLabel?.animated,\n    });\n\n    return (\n        <button\n            type=\"button\"\n            aria-label={description}\n            onClick={onClick}\n            className={componentClassname}\n            aria-expanded={isOpen || undefined}\n            aria-haspopup=\"menu\"\n            data-testid=\"jkl-hamburger\"\n            aria-controls={ariaControls}\n        >\n            <span className=\"jkl-hamburger__lines\"></span>\n            {actionLabel && (\n                <ContentToggle\n                    className={labelClassname}\n                    secondary={actionLabel.close}\n                    showSecondary={isOpen}\n                    variant=\"fade\"\n                >\n                    {actionLabel.open}\n                </ContentToggle>\n            )}\n        </button>\n    );\n};\n","import React, { useState } from \"react\";\nimport { ExampleComponentProps } from \"../../../doc-utils\";\nimport { Hamburger } from \"../src\";\n\nconst Example = ({ boolValues }: ExampleComponentProps) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n        <Hamburger\n            isOpen={isOpen}\n            inverted={boolValues && boolValues[\"Invertert\"]}\n            onClick={() => setIsOpen(!isOpen)}\n            actionLabel={\n                boolValues && boolValues[\"Med tekst\"]\n                    ? {\n                          close: \"Lukk\",\n                          open: \"Meny\",\n                          position: boolValues[\"Tekst før knapp\"] ? \"before\" : \"after\",\n                          animated: boolValues[\"Skaler tekst ved hover\"],\n                      }\n                    : undefined\n            }\n        />\n    );\n};\n\nexport default Example;\n"],"names":["name","Hamburger","isOpen","onClick","inverted","description","className","actionLabel","ariaControls","componentClassname","classnames","position","labelClassname","animated","type","undefined","secondary","close","showSecondary","variant","open","boolValues","useState","setIsOpen","_frontmatter","ComponentExample","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","knobs","boolProps","component","Example","isMDXComponent"],"sourceRoot":""}