{
    "componentChunkName": "component---src-templates-doc-page-layout-tsx",
    "path": "/uu/skjemavalidering/",
    "result": {"data":{"page":{"id":"0ddf7e0a-c1e0-5538-95bc-dfeb45c9ac66","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Skjemavalidering\",\n  \"tags\": [\"skjema\"],\n  \"wcagRules\": [\"1.3.3\", \"1.4.1\", \"3.3.2\", \"3.3.3\", \"3.3.4\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(List, {\n    mdxType: \"List\"\n  }, mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, \"Hvis en feil oppdages automatisk skal bruker f\\xE5 en feilmelding\")), mdx(\"p\", null, \"Feilmeldinger i skjema skal identifisere feltet med feil, beskrive feilen og v\\xE6re synlig uten at brukeren m\\xE5 gj\\xF8re ekstra handlinger.\\nFeilmeldingen skal v\\xE6re mulig \\xE5 oppfatte uavhengig av fargesyn:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Farge skal aldri v\\xE6re eneste virkemiddelet for \\xE5 formidle at det er en feilmelding.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I tillegg til farge kan man bruke tekst eller ikoner.\")), mdx(\"p\", null, \"Feilmeldingen skal v\\xE6re tekstlig og s\\xE5 spesifikk som mulig: \\\"Dette feltet er obligatorisk\\\" er ikke lov. Skriv heller \\\"Du m\\xE5 fylle inn et navn\\\".\"), mdx(\"p\", null, \"S\\xE5 langt det er mulig skal feilmeldingen inneholde et forslag til hvordan brukeren kan l\\xF8se det.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Skjemavalidering","react":null,"scss":null,"order":null,"author":null,"publishDate":null,"group":null}}},"pageContext":{"id":"0ddf7e0a-c1e0-5538-95bc-dfeb45c9ac66","title":"Skjemavalidering"}},
    "staticQueryHashes": ["1583095916","1756004727","2550854682","3000541721"]}