{
    "componentChunkName": "component---src-templates-doc-page-layout-tsx",
    "path": "/blog/setup-google-maps/",
    "result": {"data":{"page":{"id":"0000ad25-bff4-5de2-846c-522df72c1dfa","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Setting up Google Maps\",\n  \"author\": \"Sercan Leylek\",\n  \"description\": \"Google Maps video tutorial series\",\n  \"publishDate\": \"2021.10.27\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Ingress = makeShortcode(\"Ingress\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Ingress, {\n    mdxType: \"Ingress\"\n  }, \"Let's create a comprehensive project and deliver all the secrets of Google Maps + TypeScript + React? This is the first blog of Google Maps tutorial series with a course video.\"), mdx(\"p\", null, \"Coding with Google Maps is a fun, mysterious and challenging journey. If you do it with Typescript, both joy and pain get doubled.\"), mdx(\"p\", null, \"When I was coding a Google Maps component for the first time, I was starving for a comprehensive tutorial on this topic.\\nUnfortunately, the results were a bit disappointing, but like all developers I found a solution for each problem and the job was done.\"), mdx(\"p\", null, \"On the other hand, a design system is not a single deliverable, but a collection of different services to create other applications.\\nHowever, this definition should not limit us with reusable components only. J\\xF8kul's blog posts are also a part of the design system's deliverables.\\nOur team assessed the possibility of having a reusable Google Maps component among J\\xF8kul's packages. After gaining enough experience and knowledge,\\nwe decided not to take this path because Google Maps itself is a very large library and answering the demands of different parties did not seem feasible.\\nAs a result of these, our team decided to support the users of J\\xF8kul Design System with a comprehensive blog post series which will assist the consumers\\nwith technical knowledge and best practices while developing their own Google Maps component.\"), mdx(\"p\", null, \"So, while I was working on my map component, I discovered the answers to my questions via different websites. For example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How can I use TypeScript types from Google for my map project in React?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How should I load my Google Maps API script into my homepage? What could be the best practice?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Where should I use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useRef\"), \" to point out my Google Maps DOM element?\")), mdx(\"p\", null, \"Some of the answers that I found were outdated, some people were not quite sure of what they were advising, etc\\u2026 You know the drill.\"), mdx(\"p\", null, \"As a result, I created a sample project on GitHub and decided to sail for a new adventure as well. For the first time, I screencast while coding. The video is 55 minutes long and you can see the whole process.\"), mdx(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: \"https://www.youtube.com/embed/fMsAPI7de0A\",\n    title: \"YouTube video player\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true\n  }), mdx(\"h3\", null, \"Setup and Installation\"), mdx(\"p\", null, \"To kick off the project, we need to create a react application with typescript flag. Use the sample command below to start with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-npm\"\n  }, \"npx create-react-app google-maps --template typescript\\n\")), mdx(\"p\", null, \"After removing files like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"logo.svg\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.test.tsx\"), \", run the command below to install Google Maps TypeScript types. This will help you access types from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"google.maps\"), \" namespace such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"google.maps.Map\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"google.maps.LatLng\"), \", and so on.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-npm\"\n  }, \"npm install --save-dev @types/googlemaps\\n\")), mdx(\"p\", null, \"Bonus Hint: By doing so, you will also obtain \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"google.maps.places.AutocompletePrediction\"), \" type which can be used to build an address dropdown component.\"), mdx(\"p\", null, \"Now we are ready to give a shape to our React project. I set up the file and folder structure of my src folder as blueprinted below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-Folder\"\n  }, \"\\u251C\\u2500\\u2500 App.css\\n\\u251C\\u2500\\u2500 App.tsx\\n\\u251C\\u2500\\u2500 Map\\n   \\u251C\\u2500\\u2500 Map.scss\\n   \\u251C\\u2500\\u2500 Map.tsx\\n   \\u2514\\u2500\\u2500 index.ts\\n\\u251C\\u2500\\u2500 index.css\\n\\u251C\\u2500\\u2500 index.tsx\\n\\u251C\\u2500\\u2500 react-app-env.d.ts\\n\\u2514\\u2500\\u2500 utils\\n   \\u2514\\u2500\\u2500 GoogleMapsUtils.ts\\n\")), mdx(\"h3\", null, \"Loading the Google Maps library\"), mdx(\"p\", null, \"While developing a Google Maps component, we need to load the script tag which will download the API library for us. At the end, our web page should show something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<script\\nsrc=\\\"https://maps.googleapis.com/maps/api/js?key=<YOUR_API_KEY>&libraries=places&language=no&region=NO&v=quarterly\\\"\\nasync defer>\\n</script>\\n\")), mdx(\"p\", null, \"Before loading this tag into our DOM structure, we cannot run Google Maps related code pieces. Therefore, we should create a utility function under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"utils/GoogleMapsUtils.ts\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"export const loadMapApi = () => {\\n    const mapsURL = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=geometry,places&language=no&region=NO&v=quarterly`;\\n    const scripts = document.getElementsByTagName('script');\\n    // Go through existing script tags, and return google maps api tag when found.\\n    for (let i = 0; i < scripts.length; i++) {\\n        if (scripts[i].src.indexOf(mapsURL) === 0) {\\n            return scripts[i];\\n        }\\n    }\\n\\n    const googleMapScript = document.createElement('script');\\n    googleMapScript.src = mapsURL;\\n    googleMapScript.async = true;\\n    googleMapScript.defer = true;\\n    window.document.body.appendChild(googleMapScript);\\n\\n    return googleMapScript;\\n};\\n\")), mdx(\"p\", null, \"This function creates the aforementioned script tag and inserts it into the DOM if it is not found. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loadMapApi()\"), \" will be used by the page which uses our Map component. In my example, this page will be the homepage of the project (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.tsx\"), \").\"), mdx(\"h3\", null, \"Making the app ready for maps\"), mdx(\"p\", null, \"In this application, we have two fundamental tasks for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.tsx\"), \". The first is to load the map utility, and the second is to render our Map component. To do the first, I created the React hook below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const [scriptLoaded, setScriptLoaded] = useState(false);\\n\")), mdx(\"p\", null, \"This hook makes sure that Google Maps script tag is loaded successfully into the page. When scriptLoaded hook is set true we render the Map component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"useEffect(() => {\\n    const googleMapScript = loadMapApi();\\n    googleMapScript.addEventListener('load', function () {\\n        setScriptLoaded(true);\\n    });\\n}, []);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"return (\\n    <div className=\\\"App\\\">\\n        {scriptLoaded && (\\n            <Map\\n              mapType={google.maps.MapTypeId.ROADMAP}\\n              mapTypeControl={true}\\n            />\\n        )}\\n    </div>\\n);\\n\")), mdx(\"h3\", null, \"Time to render the map\"), mdx(\"p\", null, \"We finally reached to the heart of the application. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map.tsx\"), \" is the component I mentioned earlier. Let\\u2019s create its interface (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IMap\"), \") first.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"interface IMap {\\n    mapType: google.maps.MapTypeId;\\n    mapTypeControl?: boolean;\\n}\\n\")), mdx(\"p\", null, \"I wanted to receive two basic props. mapType can have ROADMAP, SATELLITE, TERRAIN or HYBRID values. These are specific map types defined by Google.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/blog/google.maps.MapTypeId.ROADMAP.png\",\n    \"alt\": \"Roadmap Example\"\n  })), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/blog/google.maps.MapTypeId.SATELLITE.png\",\n    \"alt\": \"Satellite Example\"\n  })), mdx(\"p\", null, \"And we will use mapTypeControl prop to show/hide the control menu on the left-top corner of your map. We may extend the number of props to increase the usability of our map component, but I wanted to use only two props to illustrate my example.\"), mdx(\"p\", null, \"I also use typescript\\u2019s custom type definition feature to increase the readability of my source code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"type GoogleLatLng = google.maps.LatLng;\\ntype GoogleMap = google.maps.Map;\\n\")), mdx(\"p\", null, \"Before I explain the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initMap\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultMapStart\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"startMap\"), \" functions, I would like to show you the render part of the Map component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const ref = useRef<HTMLDivElement>(null);\\n\\nreturn (\\n    <div className=\\\"map-container\\\">\\n        <div ref={ref} className=\\\"map-container__map\\\"></div>\\n    </div>\\n);\\n\")), mdx(\"p\", null, \"The inner div element is the reference point for Google Maps. The API will load my map content into this div element and I use the outer div just for styling purposes. On the other hand, the same ref value is used by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initMap\"), \" function where the map is triggered.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const initMap = (zoomLevel: number, address: GoogleLatLng): void => {\\n    if (ref.current) {\\n        setMap(\\n            new google.maps.Map(ref.current, {\\n                zoom: zoomLevel,\\n                center: address,\\n                mapTypeControl: mapTypeControl,\\n                streetViewControl: false,\\n                rotateControl: false,\\n                scaleControl: true,\\n                fullscreenControl: false,\\n                panControl: false,\\n                zoomControl: true,\\n                gestureHandling: 'cooperative',\\n                mapTypeId: mapType,\\n                draggableCursor: 'pointer',\\n            })\\n        );\\n    }\\n};\\n\")), mdx(\"p\", null, \"As you see above, before implementing the initMap function, I created a hook called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \". This hook is used to keep the map object created by google.maps.Map(\\u2026) function. The same function takes our div element via ref.current as its first parameter and the second parameter is a json object which keeps the preferences of our map.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initMap\"), \" receives two inputs: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zoomLevel\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"address\"), \". zoomLevel is straightforward to understand, but what address does will be more clear when we take a look at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultMapStart()\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const defaultMapStart = (): void => {\\n    const defaultAddress = new google.maps.LatLng(65.166013499, 13.3698147);\\n    initMap(4, defaultAddress);\\n};\\n\")), mdx(\"p\", null, \"So, this function basically calls the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initMap\"), \", but it also does some critical work as well. It decides where to focus and how much to focus when our map starts.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"const startMap = (): void => {\\n    if (!map) {\\n        defaultMapStart();\\n    }\\n};\\nuseEffect(startMap, [map]);\\n\")), mdx(\"p\", null, \"Finally, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"startMap\"), \" function calls \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultMapStart()\"), \" when the map hook is not null anymore. This check is necessary because of rendering delays and typescript will complain if you do not run this check.\"), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"This application may not seem so impressive in terms of functionality, but you see that we had to do a lot of things just to start our map. While shooting the video, I had a problem with the API key because I did not want to screencast it via my youtube video, but when I include it, the output is as shown below:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/blog/google.maps.MapTypeId.ROADMAP.png\",\n    \"alt\": \"Roadmap Example\"\n  })), mdx(\"p\", null, \"See you on the next tutorial/video where I will show how to add/remove markers on Google Maps. I hope you enjoyed this tutorial \\uD83D\\uDE42\"), mdx(\"br\", null), mdx(\"p\", null, \"(This article was previously published on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://storksnestblog.wordpress.com/2020/08/16/setting-up-google-maps-with-react-typescript/\"\n  }, \"Stork's Nest\"), \")\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Setting up Google Maps","react":null,"scss":null,"order":null,"author":"Sercan Leylek","publishDate":"2021.10.27","group":null}}},"pageContext":{"id":"0000ad25-bff4-5de2-846c-522df72c1dfa","title":"Setting up Google Maps"}},
    "staticQueryHashes": ["1583095916","1756004727","2550854682","3000541721"]}