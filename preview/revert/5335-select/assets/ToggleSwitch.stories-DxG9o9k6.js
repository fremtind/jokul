import{j as e}from"./jsx-runtime-DqZpzl9T.js";import{c as b}from"./clsx-B-dksMZM.js";import{r as y,R as m}from"./index-siqcju79.js";import{u as M}from"./useId-CahK3IZ3.js";import{u as _}from"./useSwipeGesture-BFRccSS5.js";import{C}from"./CheckIcon-BRyROgH7.js";import"./_commonjsHelpers-DaWZu8wl.js";import"./Icon-DnRkF4CO.js";const i=y.forwardRef(({"aria-pressed":s=!1,children:p,className:g,density:u,id:l,onChange:c,...f},h)=>{const v=M(l||"jkl-toggle-switch",{generateSuffix:!l}),[t,o]=m.useState(s);m.useEffect(()=>{o(s)},[s]);const{onClick:w,onPointerCancel:k,onPointerDown:E,onPointerMove:T,onPointerUp:j,...d}=f,x=n=>{o(!t),c?.(n,!t),w?.(n)},R=(n,r)=>{r!==t&&(o(r),c?.(n,r))},{gestureHandlers:S}=_({onClick:x,onChange:R,onPointerCancel:k,onPointerDown:E,onPointerMove:T,onPointerUp:j});return e.jsxs("button",{className:b("jkl-toggle-switch",g),id:v,ref:h,"aria-pressed":t,"data-density":u,...d,...d.disabled?{}:S,children:[p,e.jsx("div",{"aria-hidden":!0,className:"jkl-toggle-switch-widget",children:e.jsxs("div",{className:"jkl-toggle-switch-widget__slider",children:[e.jsx("div",{className:"jkl-toggle-switch-widget__knob"}),e.jsx(C,{variant:"small",bold:!0,className:"jkl-toggle-switch-widget__indicator"})]})})]})});i.displayName="ToggleSwitch";i.__docgenInfo={description:"",methods:[],displayName:"ToggleSwitch",props:{density:{required:!1,tsType:{name:"union",raw:'"comfortable" | "compact"',elements:[{name:"literal",value:'"comfortable"'},{name:"literal",value:'"compact"'}]},description:""},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:`(
    event: React.MouseEvent<T> | React.PointerEvent<T>,
    pressed: boolean,
) => void`,signature:{arguments:[{type:{name:"union",raw:"React.MouseEvent<T> | React.PointerEvent<T>",elements:[{name:"ReactMouseEvent",raw:"React.MouseEvent<T>",elements:[{name:"HTMLButtonElement"}]},{name:"ReactPointerEvent",raw:"React.PointerEvent<T>",elements:[{name:"HTMLButtonElement"}]}]},name:"event"},{type:{name:"boolean"},name:"pressed"}],return:{name:"void"}}},description:'Handler for å håndtere toggling av knappen. Tar inn en boolean som indikerer om knappen er er togglet på\neller ikke, samt en MouseEvent eller en PointerEvent avhengig av om togglingen skjedde via klikk eller swipe.\n@example\n```js\nfunction handleChange(event, pressed) {\n   console.log(`ToggleSwitch er ${pressed ? "på" : "av"}`);\n}\n```'},"aria-pressed":{defaultValue:{value:"false",computed:!1},required:!1}}};const D={title:"Komponenter/ToggleSwitch",component:i,parameters:{layout:"centered"},tags:["autodocs","forms"]},a={args:{children:"Mørk modus","aria-pressed":!1}};a.parameters={...a.parameters,docs:{...a.parameters?.docs,source:{originalSource:`{
  args: {
    children: "Mørk modus",
    "aria-pressed": false
  }
}`,...a.parameters?.docs?.source}}};const G=["ToggleSwitch"];export{a as ToggleSwitch,G as __namedExportsOrder,D as default};
