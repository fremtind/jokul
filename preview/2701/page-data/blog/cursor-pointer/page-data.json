{
    "componentChunkName": "component---src-templates-doc-page-layout-tsx",
    "path": "/blog/cursor-pointer/",
    "result": {"data":{"page":{"id":"4a10ab4a-ec21-5db6-b8b3-a8766be28099","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Å peke, eller ikke peke\",\n  \"author\": \"Jo Emil Holen\",\n  \"description\": \"Et valg mellom å følge operativsystem eller norm\",\n  \"publishDate\": \"2021.09.28\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Ingress = makeShortcode(\"Ingress\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Ingress, {\n    mdxType: \"Ingress\"\n  }, \"Operativsystemer og nettleserstandarder sier at det kun er linker som skal ha en egen musepeker, men likevel har normen p\\xE5 internett blitt at alle klikkbare elemenenter har det. Hvordan angriper man en s\\xE5nn problemstilling for \\xE5 ta et konsekvent valg?\"), mdx(\"p\", null, \"Om du trykker rundt i operativsystemet p\\xE5 datamaskinen din vil du se at n\\xE5r du f\\xF8rer musepekeren over en ting er det veldig sjelden du f\\xE5r en egen musepeker. Dette er stort sett forbeholdt linker, og s\\xE5nn har det v\\xE6rt ment helt siden vi f\\xF8rst s\\xE5 den spesielle pekeren i \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://adamsilver.io/blog/buttons-shouldnt-have-a-hand-cursor-part-2/\"\n  }, \"Apple sitt HyperCard i 1987\"), \".\"), mdx(\"p\", null, \"I designretningslinjenene til de forskjellige operativsystemene kan vi lese at en \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.w3.org/TR/CSS21/ui.html#propdef-cursor\"\n  }, \"musepeker av typen \\\"pointer\\\" indikerer en link\"), \".\\nDet samme ser vi p\\xE5 et ustilet HTML-element: Hverken knapper eller select har en egen musepeker ved hover som standard.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Men om vi ser p\\xE5 web er saken en helt annen.\"), \" Her har knapper, lenker, selects og andre klikkbare elementer mer eller mindre konsekvent en egen peker.\\nB\\xE5de p\\xE5 st\\xF8rre og mindre nettsteder ser man dette, ogs\\xE5 i designsystemer som \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.carbondesignsystem.com/components/select/usage/\"\n  }, \"Carbon\"), \" og \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://mui.com/components/buttons/\"\n  }, \"Material You\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-css\"\n  }, \"button {\\n    pointer: cursor;\\n}\\n\")), mdx(\"p\", null, \"Hvorfor det har blitt s\\xE5nn er vanskelig \\xE5 si. Kanskje det kommer fra en misforst\\xE5else om at klikkbare elementer skal ha en egen peker, eller kanskje man bare har fortsatt med det fordi \\\"alle andre gj\\xF8r det\\\". Kanskje har det sneket seg inn gjennom tredjeparts biblioteker.\"), mdx(\"p\", null, \"Selv er dette noe vi har gjort mindre bevisst. F\\xF8r denne problemstillingen ble tatt opp kunne man se at for eksempel knapper allerede hadde egen musepeker ved hover.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I J\\xF8kul har vi n\\xE5 tatt en avgj\\xF8relse om konsekvent \\xE5 f\\xF8lge normen:\"), \" Etter \\xE5 ha snakket om temaet i Designsystemforumet gjorde vi en avstemning p\\xE5 hva designere og utviklere mente om det. Noen mente at vi burde ta et sterkt standpunkt \\xE5 bidra til \\xE5 redde internett fra denne utingen. Andre mente at vi burde sikre at klikkbare elementer oppf\\xF8rte seg p\\xE5 en m\\xE5te som er kjent for brukeren.\"), mdx(\"p\", null, \"Med et flertall for konsekvent \\xE5 bruke egen peker p\\xE5 klikkbare elementer har vi satt brukeren i fokus, og ved \\xE5 gi en klar forventing om hvordan klikkbare elementer oppf\\xF8rer seg unng\\xE5r man forvirring.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Å peke, eller ikke peke","react":null,"scss":null,"order":null,"author":"Jo Emil Holen","publishDate":"2021.09.28","group":null}}},"pageContext":{"id":"4a10ab4a-ec21-5db6-b8b3-a8766be28099","title":"Å peke, eller ikke peke"}},
    "staticQueryHashes": ["1583095916","1756004727","2550854682","3000541721"]}