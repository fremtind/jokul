import{j as t}from"./jsx-runtime-D9p_MChh.js";import{c as _}from"./clsx-B-dksMZM.js";import{r as P,R as p}from"./index-CRL2yuNo.js";import{u as N}from"./useId-BJAJhdYZ.js";import{u as H}from"./useSwipeGesture-BBJTpXsK.js";import{C as q}from"./CheckIcon-DGlTyc0x.js";import"./_commonjsHelpers-gnU0ypJ3.js";import"./Icon-BsB2AusX.js";const c=P.forwardRef(({"aria-pressed":r=!1,children:v,className:w,density:h,id:d,onChange:e,...k},E)=>{const T=N(d||"jkl-toggle-switch",{generateSuffix:!d}),[n,o]=p.useState(r);p.useEffect(()=>{o(r)},[r]);const{onClick:i,onPointerCancel:j,onPointerDown:x,onPointerMove:R,onPointerUp:S,...m}=k,b=s=>{o(!n),e==null||e(s,!n),i==null||i(s)},y=(s,l)=>{l!==n&&(o(l),e==null||e(s,l))},{gestureHandlers:M}=H({onClick:b,onChange:y,onPointerCancel:j,onPointerDown:x,onPointerMove:R,onPointerUp:S});return t.jsxs("button",{className:_("jkl-toggle-switch",w),id:T,ref:E,"aria-pressed":n,"data-density":h,...m,...m.disabled?{}:M,children:[v,t.jsx("div",{"aria-hidden":!0,className:"jkl-toggle-switch-widget",children:t.jsxs("div",{className:"jkl-toggle-switch-widget__slider",children:[t.jsx("div",{className:"jkl-toggle-switch-widget__knob"}),t.jsx(q,{variant:"small",bold:!0,className:"jkl-toggle-switch-widget__indicator"})]})})]})});c.displayName="ToggleSwitch";c.__docgenInfo={description:"",methods:[],displayName:"ToggleSwitch",props:{density:{required:!1,tsType:{name:"union",raw:'"comfortable" | "compact"',elements:[{name:"literal",value:'"comfortable"'},{name:"literal",value:'"compact"'}]},description:""},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:`(
    event: React.MouseEvent<T> | React.PointerEvent<T>,
    pressed: boolean,
) => void`,signature:{arguments:[{type:{name:"union",raw:"React.MouseEvent<T> | React.PointerEvent<T>",elements:[{name:"ReactMouseEvent",raw:"React.MouseEvent<T>",elements:[{name:"HTMLButtonElement"}]},{name:"ReactPointerEvent",raw:"React.PointerEvent<T>",elements:[{name:"HTMLButtonElement"}]}]},name:"event"},{type:{name:"boolean"},name:"pressed"}],return:{name:"void"}}},description:'Handler for å håndtere toggling av knappen. Tar inn en boolean som indikerer om knappen er er togglet på\neller ikke, samt en MouseEvent eller en PointerEvent avhengig av om togglingen skjedde via klikk eller swipe.\n@example\n```js\nfunction handleChange(event, pressed) {\n   console.log(`ToggleSwitch er ${pressed ? "på" : "av"}`);\n}\n```'},"aria-pressed":{defaultValue:{value:"false",computed:!1},required:!1}}};const U={title:"Komponenter/ToggleSwitch",component:c,parameters:{layout:"centered"},tags:["autodocs"]},a={args:{children:"Mørk modus"}};var u,g,f;a.parameters={...a.parameters,docs:{...(u=a.parameters)==null?void 0:u.docs,source:{originalSource:`{
  args: {
    children: "Mørk modus"
  }
}`,...(f=(g=a.parameters)==null?void 0:g.docs)==null?void 0:f.source}}};const V=["ToggleSwitch"];export{a as ToggleSwitch,V as __namedExportsOrder,U as default};
