import{r as n,R as a}from"./index-siqcju79.js";/* empty css               */import{c as v}from"./clsx-B-dksMZM.js";import"./_commonjsHelpers-DaWZu8wl.js";const i=n.forwardRef(function(m,b){const{as:l="a","aria-selected":f,className:N,onBeforeKeyboardNavigation:o,...u}=m,g=l,s=n.useCallback((r,e)=>{o&&o(r,e)===!1||(e.focus(),e.click())},[o]),c=n.useCallback(r=>{if(r.key==="ArrowLeft"){const e=r.currentTarget,t=r.currentTarget.previousSibling;t?s(e,t):s(e,e.parentElement?.lastChild?.previousSibling)}if(r.key==="ArrowRight"){const e=r.currentTarget,t=r.currentTarget.nextSibling;t&&t.nodeName==="A"?s(e,t):s(e,e.parentElement?.firstChild)}},[s]);return a.createElement(g,{ref:b,...u,role:"tab","aria-selected":f,className:v("jkl-tab",N),onKeyDown:c,tabIndex:f?0:-1})});i.__docgenInfo={description:"",methods:[],displayName:"NavTab",props:{as:{required:!1,tsType:{name:"ElementType"},description:`Her kan du angi hva slags element komponenten skal rendres
som. Det kan enten v√¶re en string for native HTML elementer
eller en komponent (som Link fra react-router og lignende).`},ref:{required:!1,tsType:{name:'ReactComponentPropsWithRef["ref"]',raw:'React.ComponentPropsWithRef<ElementType>["ref"]'},description:""}}};const T=({"aria-label":d,children:m,className:b,density:l="comfortable",...f})=>{const[N,o]=n.useState(),[u,g]=n.useState(),s=n.useRef(null),c=n.useRef(null),r=n.useRef(null),e=a.Children.toArray(m).findIndex(t=>a.isValidElement(t)?t.props["aria-selected"]===!0:!1);return n.useEffect(()=>{c.current&&o(c.current.getBoundingClientRect()),r.current&&g(r.current.getBoundingClientRect())},[e,l]),a.createElement("div",{...f,"data-layout-density":l,className:v("jkl-tabs",b),ref:s},a.createElement("div",{role:"tablist","aria-label":d,ref:c,className:"jkl-tablist"},a.Children.map(m,(t,R)=>a.isValidElement(t)?a.cloneElement(t,{ref:e===R?r:void 0}):null),a.createElement("span",{className:"jkl-tablist__indicator",style:{left:(u?.left||0)-(N?.left||0)+(s.current?.scrollLeft||0),bottom:-1,width:(u?.width||0)-(l==="compact"?32:38)}})))};T.__docgenInfo={description:"",methods:[],displayName:"NavTabs",props:{children:{required:!0,tsType:{name:"union",raw:"ReactNode | ReactNode[]",elements:[{name:"ReactNode"},{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]"}]},description:""},"aria-label":{required:!1,tsType:{name:"string"},description:""},className:{required:!1,tsType:{name:"string"},description:""},density:{required:!1,tsType:{name:"union",raw:'"comfortable" | "compact"',elements:[{name:"literal",value:'"comfortable"'},{name:"literal",value:'"compact"'}]},description:"",defaultValue:{value:'"comfortable"',computed:!1}},id:{required:!1,tsType:{name:"string"},description:""}}};const C={title:"Komponenter/Tabs/NavTabs",component:T,subcomponents:{NavTab:i},tags:["autodocs"]},p={name:"NavTabs",args:{children:a.createElement("p",null,"e")},render:d=>a.createElement(T,{...d},a.createElement(i,{"aria-selected":!0},"Alle"),a.createElement(i,{"aria-selected":!1},"NICE"),a.createElement(i,{"aria-selected":!1},"Prolife"))};p.parameters={...p.parameters,docs:{...p.parameters?.docs,source:{originalSource:`{
  name: "NavTabs",
  args: {
    children: <p>e</p>
  },
  render: args => <Tabs {...args}>
            <NavTab aria-selected={true}>Alle</NavTab>
            <NavTab aria-selected={false}>NICE</NavTab>
            <NavTab aria-selected={false}>Prolife</NavTab>
        </Tabs>
}`,...p.parameters?.docs?.source}}};const w=["TabsStory"];export{p as TabsStory,w as __namedExportsOrder,C as default};
