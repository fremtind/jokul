{"version":3,"file":"component---packages-loader-react-documentation-loader-mdx-03c82621386c9d9158be.js","mappings":"gVAYaA,EAAS,SAAC,GAOV,QANTC,QAAAA,OAMS,MANC,QAMD,EALTC,EAKS,EALTA,gBACAC,EAIS,EAJTA,UAIS,IAHTC,eAAAA,OAGS,MAHQ,aAGR,MAFTC,WAAAA,OAES,MAFI,SAEJ,EADNC,GACM,YACHC,EAAqBC,GAAAA,CAAW,aAAcL,EAAW,CAC3D,qBAAkC,WAAZF,EACtB,oBAAiC,UAAZA,IAGzB,OACI,sCACI,YAAU,OACV,aAAYC,EACZ,YAAWG,EACXF,UAAWI,EACX,kBAAiBH,EACjB,cAAY,aACZK,KAAK,QACLC,MAAOR,GACHI,GAEJ,wBAAMH,UAAU,0CAChB,wBAAMA,UAAU,4CAChB,wBAAMA,UAAU,6CChCb,SAASQ,EAAT,GAAgE,IAAvCC,EAAuC,EAAvCA,aAEhCX,EAAyB,QAC7B,OAFsBW,GAAiBA,EAAY,SAG/C,IAAK,SACDX,EAAU,SACV,MACJ,IAAK,QACDA,EAAU,QAOlB,OACI,uBAAKE,UAAU,sBACX,2BACI,gBAACH,EAAD,CAAQC,QAASA,EAASC,gBAAgB,wC,qBChB7CW,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,KAGZG,EAAUL,EAAc,WACxBM,EAAmBN,EAAc,oBACjCO,EAAc,CAClBR,aAAAA,GAEIS,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGT,GACF,YACD,OAAO,SAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,eAI5E,SAACP,EAAD,CAASO,QAAQ,WAAjB,6JAIA,SAACN,EAAD,CAAkBO,UAAWC,EAASC,MAAO,CAC3CC,YAAa,CAAC,CACZf,KAAM,UACNgB,OAAQ,CAAC,QAAS,SAAU,SAC5BC,aAAc,KAEfN,QAAQ,sBACX,oOAAqN,uBAAYO,WAAW,KAAvB,gBAArN,MACA,4BACA,oBACE,eAAIA,WAAW,MAAf,gDAAoE,cAAGA,WAAW,KAC9E,KAAQ,yBADwD,WAApE,gBAGA,eAAIA,WAAW,MAAf,wEAMNT,EAAWU,gBAAiB","sources":["webpack://@fremtind/portal/../packages/loader-react/src/Loader.tsx","webpack://@fremtind/portal/../packages/loader-react/documentation/Example.tsx","webpack://@fremtind/portal/../packages/loader-react/documentation/Loader.mdx"],"sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\nexport type LoaderVariant = \"small\" | \"medium\" | \"large\";\n\ninterface Props {\n    variant?: LoaderVariant;\n    textDescription: string;\n    className?: string;\n    dataTestAutoId?: string;\n    politeness?: \"polite\" | \"assertive\";\n}\nexport const Loader = ({\n    variant = \"large\",\n    textDescription,\n    className,\n    dataTestAutoId = \"jkl-loader\",\n    politeness = \"polite\",\n    ...rest\n}: Props) => {\n    const componentClassName = classNames(\"jkl-loader\", className, {\n        \"jkl-loader--medium\": variant === \"medium\",\n        \"jkl-loader--small\": variant === \"small\",\n    });\n\n    return (\n        <span\n            aria-busy=\"true\"\n            aria-label={textDescription}\n            aria-live={politeness}\n            className={componentClassName}\n            data-testautoid={dataTestAutoId}\n            data-testid=\"jkl-loader\"\n            role=\"alert\"\n            title={textDescription}\n            {...rest}\n        >\n            <span className=\"jkl-loader__dot jkl-loader__dot--left\" />\n            <span className=\"jkl-loader__dot jkl-loader__dot--middle\" />\n            <span className=\"jkl-loader__dot jkl-loader__dot--right\" />\n        </span>\n    );\n};\n","import React from \"react\";\nimport { ExampleComponentProps } from \"../../../doc-utils\";\nimport { Loader, LoaderVariant } from \"../src\";\nimport \"./styles.scss\";\n\ntype VariantChoice = \"Large\" | \"Medium\" | \"Small\";\n\nexport default function LoaderExample({ choiceValues }: ExampleComponentProps) {\n    const variantChoice = choiceValues && (choiceValues[\"Variant\"] as VariantChoice);\n    let variant: LoaderVariant = \"large\";\n    switch (variantChoice) {\n        case \"Medium\":\n            variant = \"medium\";\n            break;\n        case \"Small\":\n            variant = \"small\";\n            break;\n        case \"Large\":\n        default:\n            break;\n    }\n\n    return (\n        <div className=\"jkl-loader-example\">\n            <div>\n                <Loader variant={variant} textDescription=\"Eksempelbeskrivelse for en loader\" />\n            </div>\n        </div>\n    );\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    En lasteindikator viser brukeren at systemet jobber. Vi bruker lasteindikatoren når vi har handlinger eller\n    prosesser som tar lengre tid enn ett sekund.\n    </Ingress>\n    <ComponentExample component={Example} knobs={{\n      choiceProps: [{\n        name: \"Variant\",\n        values: [\"Large\", \"Medium\", \"Small\"],\n        defaultValue: 0\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Plasser lasteindikatoren sammen med handlingen som utløser den. Den kan ha ulik posisjon og størrelse, avhengig av konteksten den skal fungere i. Lasteindikatoren tar farge etter teksten rundt ved hjelp av `}<inlineCode parentName=\"p\">{`currentColor`}</inlineCode>{`.`}</p>\n    <h3>{`Bruk`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`På en knapp som brukeren har klikket på (se `}<a parentName=\"li\" {...{\n          \"href\": \"/komponenter/buttons/\"\n        }}>{`Buttons`}</a>{` for bruk).`}</li>\n      <li parentName=\"ul\">{`På et kort eller i felt der noe blir beregnet før innholdet vises.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["Loader","variant","textDescription","className","dataTestAutoId","politeness","rest","componentClassName","classNames","role","title","LoaderExample","choiceValues","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","Example","knobs","choiceProps","values","defaultValue","parentName","isMDXComponent"],"sourceRoot":""}