{"version":3,"file":"component---src-texts-getstarted-portal-guide-mdx-4357534791fb9adb7e27.js","mappings":"qQAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,kDACA,wOACA,wPACA,gCACA,2EAA4D,cAAGC,WAAW,IACtE,KAAQ,iDADgD,YAA5D,iPAEsQ,cAAGA,WAAW,IAChR,KAAQ,+CAD0P,kBAFtQ,4FAIuH,cAAGA,WAAW,IACjI,KAAQ,yBAD2G,aAJvH,MAOA,2CACA,2SACA,gIAAiH,uBAAYA,WAAW,KAAvB,WAAjH,QAA4K,uBAAYA,WAAW,KAAvB,WAA5K,mBAAkP,eAAIA,WAAW,KAAf,SAAlP,yFAA4W,uBAAYA,WAAW,KAAvB,aAA5W,QAAya,uBAAYA,WAAW,KAAvB,aAAza,mBAAif,mBAAQA,WAAW,KAAnB,SAAjf,MACA,oCACA,wRACA,mBAAG,uBAAYA,WAAW,KAAvB,4BACH,8BACA,uHAAwG,eAAIA,WAAW,KAAf,QAAxG,yHACA,qBAAK,iBAAMA,WAAW,OAAjB,yEAIL,8OACA,qBAAK,iBAAMA,WAAW,OAAjB,uHAIL,yDACA,mFAAoE,uBAAYA,WAAW,KAAvB,QAApE,WAA+H,uBAAYA,WAAW,KAAvB,6BAA/H,mJAAuV,uBAAYA,WAAW,KAAvB,SAAvV,gBAAwZ,cAAGA,WAAW,IACla,KAAQ,mGAD4Y,eAAxZ,qFAE6G,uBAAYA,WAAW,KAAvB,kBAF7G,8MAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,2EAQL,4bACA,0CACA,8GAA+F,uBAAYA,WAAW,KAAvB,oBAA/F,iKAA4T,uBAAYA,WAAW,KAAvB,oBAA5T,8IACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,yRAWL,+MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,yaAaL,wDACA,iGAAkF,uBAAYA,WAAW,KAAvB,iBAAlF,8HAAyQ,uBAAYA,WAAW,KAAvB,MAAzQ,WAAkU,uBAAYA,WAAW,KAAvB,QAAlU,wEACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,6GAIL,gDAAiC,uBAAYA,WAAW,KAAvB,UAAjC,uCAKJJ,EAAWK,gBAAiB","sources":["webpack://@fremtind/portal/./src/texts/getstarted/PortalGuide.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Dokumentasjon til portalen`}</h1>\n    <p>{`For at designsystemet skal fungere må systemdokumentasjonen være god. Hvis utviklere og designere ikke vet hvilke muligheter og begrensninger som finnes i systemet, kommer de til å gjøre feil og dobbeltarbeid.`}</p>\n    <p>{`Vi prøver å levere god dokumentasjon for Jøkul, og vi har bygd opp rammeverket for dokumentasjon slik at Jøkul har det som trengs og sånn at vi kan levere en smidig utvikleropplevelse. Det skal bare være én kilde til sannhet.`}</p>\n    <h2>{`Markdown`}</h2>\n    <p>{`All dokumentasjon på portalen en skrevet med språket `}<a parentName=\"p\" {...{\n        \"href\": \"https://daringfireball.net/projects/markdown/\"\n      }}>{`Markdown`}</a>{`. Dette er et markeringsspråk som lar deg definere strukturen i det du skriver ved hjelp av enkle tegn i teksten. Her følger en kort introduksjon til de viktigste funksjonene. For en mer utfyllende gjennomgang med eksempler anbefaler vi `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.markdownguide.org/basic-syntax/\"\n      }}>{`Markdown Guide`}</a>{`. Hvis du vil ha forhåndsvisning mens du skriver kan du bruke online-verktøy som f.eks. `}<a parentName=\"p\" {...{\n        \"href\": \"https://dillinger.io/\"\n      }}>{`Dillinger`}</a>{`.`}</p>\n    <h3>{`Avsnitt og utheving`}</h3>\n    <p>{`Du markerer et nytt avsnitt ved å sette inn en tom linje. Dette må du også gjøre før og etter alle overskrifter. Hvis du ønsker å sette inn et linjeskift uten å starte et nytt avsnitt, må du legge inn to mellomrom på slutten av linjen, hvis ikke vil linjeskiftet bli ignorert.`}</p>\n    <p>{`Utheving av tekst gjøres ved å sette stjerne eller understrek før og etter teksten som skal utheves: Både `}<inlineCode parentName=\"p\">{`_dette_`}</inlineCode>{` og `}<inlineCode parentName=\"p\">{`*dette*`}</inlineCode>{` vil vises som `}<em parentName=\"p\">{`dette`}</em>{`. Ønsker du kraftigere utheving kan du bruke to stjerner eller to understreker: Både `}<inlineCode parentName=\"p\">{`__dette__`}</inlineCode>{` og `}<inlineCode parentName=\"p\">{`**dette**`}</inlineCode>{` vil vises som `}<strong parentName=\"p\">{`dette`}</strong>{`.`}</p>\n    <h3>{`Overskrifter`}</h3>\n    <p>{`Overskrifter må stå på en egen linje, og være et eget avsnitt (altså med tom linje over og under). Overskriftsnivået angis med firkanttegn (hashtags) på starten av linjen, etterfulgt av et mellomrom. Antall firkanttegn angir overskriftsnivået, for eksempel:`}</p>\n    <p><inlineCode parentName=\"p\">{`# Overskrift på nivå 1`}</inlineCode></p>\n    <h3>{`Lister`}</h3>\n    <p>{`Punktlister angis med en stjerne eller bindestrek foran hvert punkt, etterfulgt av et mellomrom. `}<em parentName=\"p\">{`Ikke`}</em>{` bruk tomme linjer mellom punktene. Du kan skape lister med innrykk ved å sette inn fire mellomrom før listepunktet:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`- Et punkt\n    - Et innrykket punkt\n- Et nytt punkt på toppnivå\n`}</code></pre>\n    <p>{`Nummererte lister angis med tall og punktum på starten av linjen, etterfulgt av mellomrom. Du må starte på 1, men tallene du skriver ellers har ingen påvirkning på resultatet; det vil alltid bli stigende rekkefølge:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`1. Det første punktet\n8. Det andre punktet (selv om det står åtte)\n1. Det tredje punktet (selv om det står 1)\n`}</code></pre>\n    <h2>{`Slik dokumenterer vi komponentene`}</h2>\n    <p>{`For å dokumentere en ny komponent i portalen oppretter du en `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` fil i `}<inlineCode parentName=\"p\">{`<pakkenavn>/documentation`}</inlineCode>{`. MDX er en versjon av Markdown som lar deg bygge inn React direkte i dokumentet. MDX-filen plukkes opp automatisk av portalen hvis den har en `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{` definert i `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.gatsbyjs.org/docs/adding-markdown-pages/#frontmatter-for-metadata-in-markdown-files\"\n      }}>{`frontmatter`}</a>{` (se under). I tillegg til tittelen forventer portalen å finne pakkenavnet (uten `}<inlineCode parentName=\"p\">{`@fremtind/jkl-`}</inlineCode>{`) til stilpakken og React-pakken. Lenker til GitHub blir generert automatisk ut fra disse. Du kan ha flere slike dokumentasjonsfiler i samme pakke dersom det for eksempel eksporteres flere komponenter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdx\"\n      }}>{`---\ntitle: Accordion\nreact: accordion-react\nscss: accordion\n---\n`}</code></pre>\n    <p>{`Komponentdokumentasjonen skal bestå av en kort beskrivelse av komponentens tiltenkte funksjon og bruk, et eksempel på komponenten, og eventuell utfyllende dokumentasjon av bruk med eksempler der det trengs. For å kunne vise eksempel på komponenten, samt riktig og feil bruk av den, har vi laget noen hjelpekomponenter som automatisk er tilgjengelige når du skriver komponentdokumentasjonen. Disse beskrives nærmere under.`}</p>\n    <h3>{`Komponenteksempler`}</h3>\n    <p>{`For å vise eksempel på komponenten i portalen har vi laget en hjelpekomponent som heter `}<inlineCode parentName=\"p\">{`ComponentExample`}</inlineCode>{`. Denne kan du bruke i komponentdokumentasjonen uten å måtte importere den eksplisitt. Den tar inn en React-komponent som inneholder eksempelet du vil vise. `}<inlineCode parentName=\"p\">{`ComponentExample`}</inlineCode>{` tar i tillegg inn en liste over egenskaper som skal kunne skrus av og på i eksempelet, samt en liste over verdier som kan ha flere valg:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-mdx\"\n      }}>{`<ComponentExample component={DittEksempel} knobs={\n    boolProps={[\"En verdi\", \"En annen verdi\"]}\n    choiceProps={[{\n        name: \"Verdi med valg\",\n        values: [\"verdi1\", \"verdi2\"],\n        selectedValue: 0 // indeksen til forhåndsvalgt alternativ\n    }]}\n} />\n`}</code></pre>\n    <p>{`Disse verdiene blir vist som valg i portalen med avkrysningsbokser eller radioknapper. De valgte verdiene blir eksponert for eksempelet slik at du kan bruke dem til å endre egenskaper:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// typer for verdiene:\nimport { ExampleComponentProps } from \"doc-utils\";\n\nexport function DittEksempel({ boolValues, choiceValues }: ExampleComponentProps) {\n    boolValues[\"En verdi\"] // boolsk verdi\n    choiceValues[\"Verdi med valg\"] // \"verdi1\" eller \"verdi2\"\n\n    // Bruk dem i eksempelet slik:\n    <MinKomponent boolskEgenskap={boolValues[\"En verdi\"]} valgEgenskap={choiceValues[\"Verdi med valg\"]} />\n}\n`}</code></pre>\n    <h3>{`Eksempler på riktig og feil bruk`}</h3>\n    <p>{`For å vise eksempler på riktig og feil bruk kan du bruke hjelpekomponenten `}<inlineCode parentName=\"p\">{`DoDontExample`}</inlineCode>{`. Denne kan du bruke i komponentdokumentasjonen uten å måtte importere den eksplisitt. Komponenten tar inn type eksempel (`}<inlineCode parentName=\"p\">{`do`}</inlineCode>{` eller `}<inlineCode parentName=\"p\">{`dont`}</inlineCode>{`), et bilde som viser eksempelet, og en tekst som beskriver bruken:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<DoDontExample type=\"do\" description=\"Kun én primærknapp\" image=\"/assets/do-donts/button-do-1.png\" />\n`}</code></pre>\n    <p>{`Bildet legger du i mappen `}<inlineCode parentName=\"p\">{`static`}</inlineCode>{` under portal-pakken i prosjektet.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}