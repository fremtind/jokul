{"version":3,"file":"component---src-texts-blog-intersection-observer-intersection-mdx-c3fd150e086dce7d1a2d.js","mappings":"sQAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,yJAA0I,uBAAYC,WAAW,KAAvB,6BAA1I,wEACA,mCACA,4bACA,gBAAKC,UAAU,yBACf,mBAAQC,IAAI,mJAAmJC,MAAO,CAClK,MAAS,OACT,OAAU,QACV,OAAU,IACV,aAAgB,MAChB,SAAY,UACXC,MAAM,wBAAwBC,MAAM,qJAAqJC,QAAQ,+FAEtM,oDAAqC,uBAAYN,WAAW,KAAvB,0BAArC,WACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,wOAWL,4EAA6D,cAAGA,WAAW,IACvE,KAAQ,6CADiD,kBAA7D,0KAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,uTAYL,kDAAmC,uBAAYA,WAAW,KAAvB,UAAnC,2HAAgN,cAAGA,WAAW,IAC1N,KAAQ,iDADoM,eAAhN,sBAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,ofAgBL,+RAAgR,uBAAYA,WAAW,KAAvB,YAAhR,0CACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,yiBAiBL,kcACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,4pBAkBL,wKACA,gIACA,0CACA,mBAAG,gBAAKA,WAAW,IACf,IAAO,qDACP,IAAO,SAEX,kCAAmB,cAAGA,WAAW,IAC7B,KAAQ,0BADO,QAAnB,8UAGA,ubACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,w3BAwBL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,mvBAiCL,uCACA,yQAA0P,cAAGA,WAAW,IACpQ,KAAQ,iDAD8O,YAA1P,2KAGA,mBAAG,gBAAKA,WAAW,IACf,IAAO,+CACP,IAAO,SAEX,kCACA,oBACE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,+GADQ,6CAGpB,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,8DADQ,8BAQ1BJ,EAAWW,gBAAiB","sources":["webpack://@fremtind/portal/./src/texts/blog/intersectionObserver/Intersection.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Use the intersection observer api to unlock cool UX features in your web application. Fremtind provides a thin wrapper hook in the `}<inlineCode parentName=\"p\">{`@fremtind/jkl-react-hooks`}</inlineCode>{` package, to make it easier to use intersection observers in React.`}</p>\n    <h2>{`The obvious`}</h2>\n    <p>{`The obvious use case is to lazy load content. When the content is outside the viewport, it doesn't provide your users with anything (at least untill they scroll). So it would be pretty nice to just defer loading the content that is below the fold. In this example we'll use the observer to set opacity on the element, with a transition and little delay you'll see the element fade into the viewport when you scroll it in.`}</p>\n    <div className=\"jkl-portal-paragraph\">\n    <iframe src=\"https://codesandbox.io/embed/competent-cloud-jy2kb?autoresize=1&fontsize=14&hidenavigation=1&module=%2Fsrc%2FIntersectionComponent.js&theme=dark\" style={{\n        \"width\": \"100%\",\n        \"height\": \"500px\",\n        \"border\": \"0\",\n        \"borderRadius\": \"4px\",\n        \"overflow\": \"hidden\"\n      }} title=\"competent-cloud-jy2kb\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n    </div>\n    <p>{`Lets look a bit closer at how `}<inlineCode parentName=\"p\">{`useIntersectionObsever`}</inlineCode>{` work.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from \"react\";\nimport { useIntersectionObserver } from \"@fremtind/jkl-react-hooks\";\n\nconst MyComponent = () => {\n    useIntersectionObserver(targetRef, onIntersect, fallback, options);\n\n    return null;\n};\n`}</code></pre>\n    <p>{`Load the hook into you React component and follow the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/hooks-rules.html\"\n      }}>{`rules of hooks`}</a>{`. The intersection hook takes a reference to a component, a function that is fired by the observer, a fallback function and a options object. Lets add the reference.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useRef } from \"react\";\nimport { useIntersectionObserver } from \"@fremtind/jkl-react-hooks\";\n\nconst MyComponent = () => {\n    const targetRef = useRef(null);\n    useIntersectionObserver(targetRef, onIntersect, fallback, options);\n\n    return <div ref={targetRef}>content</div>;\n};\n`}</code></pre>\n    <p>{`Like that, we've loaded the `}<inlineCode parentName=\"p\">{`useRef`}</inlineCode>{` hook from React, and applied that reference to our returning div. If you want to do this with your custom components, `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/forwarding-refs.html\"\n      }}>{`forwardRefs`}</a>{` might be useful.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useRef } from \"react\";\nimport { useIntersectionObserver } from \"@fremtind/jkl-react-hooks\";\n\nconst MyComponent = () => {\n    const targetRef = useRef(null);\n    const [isIntersecting, setIsIntersecting] = useState(false);\n    const onIntersect = (entires) => {\n        setIsIntersecting(entires.some((entry) => entry.isIntersecting));\n    };\n    useIntersectionObserver(targetRef, onIntersect, fallback, options);\n\n    return <div ref={targetRef}>content</div>;\n};\n`}</code></pre>\n    <p>{`The buisness end of the hook is the onIntersect callback. This is a function where you get an array of observered elements back. In this case we want to see if anything in the array is intersecting with the viewport. We need to store that somewhere, so we'll add a `}<inlineCode parentName=\"p\">{`useState`}</inlineCode>{` hook to hold the intersection value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useRef } from \"react\";\nimport { useIntersectionObserver } from \"@fremtind/jkl-react-hooks\";\n\nconst MyComponent = () => {\n    const targetRef = useRef(null);\n    const [isIntersecting, setIsIntersecting] = useState(false);\n    const onIntersect = (entires) => {\n        setIsIntersecting(entires.some((entry) => entry.isIntersecting));\n    };\n    const fallback = () => setIsIntersecting(true);\n    useIntersectionObserver(targetRef, onIntersect, fallback, options);\n\n    return <div ref={targetRef}>content</div>;\n};\n`}</code></pre>\n    <p>{`Browser support for the intersection observer api is pretty strong, but lets get it out of the way, IE 11 do not support this API. So if you need to support IE11 in your application, use the fallback function to set the component in the state you need. Here we need to make sure the content is visible for IE users, without this, they will never load the content. Enough about IE11, I don't want to make myself more aggrevated.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useRef } from \"react\";\nimport { useIntersectionObserver } from \"@fremtind/jkl-react-hooks\";\n\nconst MyComponent = () => {\n    const targetRef = useRef(null);\n    const [isIntersecting, setIsIntersecting] = useState(false);\n    const onIntersect = (entires) => {\n        setIsIntersecting(entires.some((entry) => entry.isIntersecting));\n    };\n    const fallback = () => setIsIntersecting(true);\n    const options = { rootMargin: \"0px\", threshold: [0.0, 1.0] };\n    useIntersectionObserver(targetRef, onIntersect, fallback, options);\n\n    return <div ref={targetRef} style={{ display: isIntersecting ? \"block\" : \"none\" }}></div>;\n};\n`}</code></pre>\n    <p>{`Finally we need to supply an options object. This provides the constraints for the observer, when it should fire and where its margins should be.`}</p>\n    <p>{`Now this is the most basic example, but it's still useful and quite easy to expand. Lets do that, expand.`}</p>\n    <h2>{`The not so obvious`}</h2>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/assets/blog/intersectionObserver/intersection.gif\",\n        \"alt\": null\n      }}></img></p>\n    <p>{`See it live `}<a parentName=\"p\" {...{\n        \"href\": \"https://tp0f6.csb.app/\"\n      }}>{`here`}</a>{`. Codesandbox flakes out abit when its inside a iframe, so maybe don't try to do fancy stuff with intersection observers inside iframes. Anyways, these couple of files creates a pretty cool little effect, where the header changes style and attaches to the top of the viewport, using the intersection observer and position sticky.`}</p>\n    <p>{`The magic here is to play with the rootMargins. By setting it to -98% of the bottom, the intersecting happens at the top of the container, not the bottom as usual. Then we can use that to change the class name and the apperance of the div. This shows that you can use the observer for more than just lazy loading content below the fold. This can enable us to more closely replicate native app feeling in our webapps.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// IntersectionComponent.jsx\nimport React, { useRef, useState } from \"react\";\nimport { useIntersectionObserver } from \"@fremtind/jkl-react-hooks\";\n\nexport const IntersectionComponent = ({ children }) => {\n    const [isIntersecting, setIsIntersecting] = useState(false);\n    const targetRef = useRef(null);\n    const onIntersect = (entries) => setIsIntersecting(entries.some((entry) => entry.isIntersecting));\n    const fallback = () => console.log(\"useful for browser that do not support intersection observer\");\n    const options = {\n        rootMargin: \"0px 0px -98% 0px\",\n        threshold: [0, 1.0],\n    };\n    useIntersectionObserver(targetRef, onIntersect, fallback, options);\n\n    return (\n        <div className={\\`target \\${isIntersecting ? \"target--small\" : \"target--large\"}\\`} ref={targetRef}>\n            <div>{children}</div>\n        </div>\n    );\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`.target {\n    overflow: hidden;\n    transition: ease-in-out 500ms;\n    padding: 1rem 0.5rem;\n    transition-property: color, font-size, box-shadow, background-color;\n    & > div {\n        transition: ease-in-out 500ms;\n        transition-property: transform;\n    }\n\n    &--small {\n        color: rebeccapurple;\n        box-shadow: 0px 5px 4px -6px rgba(0, 0, 0, 0.75);\n        font-size: 2rem;\n        background-color: white;\n        position: sticky;\n        top: 0;\n        & > div {\n            transform: translateX(0%);\n        }\n    }\n    &--large {\n        color: black;\n        font-size: 3rem;\n        background-color: transparent;\n        & > div {\n            transform: translateX(10%);\n        }\n    }\n}\n`}</code></pre>\n    <h2>{`Focus on mobile`}</h2>\n    <p>{`On desktop, focus and hover states help interactive elements stand out. We don't have the same luxury on mobile, but we can use the intersection observer to know when an element is in a prime clickarea, and set the hover state programmaticly. `}<a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/intersection-3-n62x8\"\n      }}>{`See code`}</a>{`, open preview in separate tab to actually see the effect. Mark that this is not hover, the mouse in complety stationary, the effect is triggered by the intersection.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/assets/blog/intersectionObserver/mobile.gif\",\n        \"alt\": null\n      }}></img></p>\n    <h3>{`References`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#The_root_element_and_root_margin\"\n        }}>{`Intersection observer API documentation`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://jokul.fremtind.no/komponenter/intersectionobserver\"\n        }}>{`useIntersectionObserver`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","className","src","style","title","allow","sandbox","isMDXComponent"],"sourceRoot":""}