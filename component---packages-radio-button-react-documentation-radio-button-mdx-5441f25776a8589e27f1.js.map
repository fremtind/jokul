{"version":3,"file":"component---packages-radio-button-react-documentation-radio-button-mdx-5441f25776a8589e27f1.js","mappings":"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","sources":["webpack://@fremtind/portal/../packages/radio-button-react/src/RadioButtonOption.tsx","webpack://@fremtind/portal/../packages/radio-button-react/src/RadioButtons.tsx","webpack://@fremtind/portal/../packages/radio-button-react/documentation/Example.tsx","webpack://@fremtind/portal/../packages/radio-button-react/documentation/RadioButton.mdx"],"sourcesContent":["import React, { ChangeEventHandler, useState, InputHTMLAttributes, forwardRef } from \"react\";\nimport classNames from \"classnames\";\nimport { nanoid } from \"nanoid\";\n\ninterface Props extends InputHTMLAttributes<HTMLInputElement> {\n    value: string;\n    label: string;\n    name: string;\n    onChange: ChangeEventHandler<HTMLInputElement>;\n    inline?: boolean;\n    checked?: boolean;\n    invalid?: boolean;\n    forceCompact?: boolean;\n    /** @deprecated */\n    inverted?: boolean;\n}\n\nexport const RadioButtonOption = forwardRef<HTMLInputElement, Props>(\n    (\n        {\n            value,\n            label,\n            onChange,\n            name = \"\",\n            inline = false,\n            checked,\n            invalid = false,\n            forceCompact,\n            inverted,\n            ...radioProps\n        },\n        ref,\n    ) => {\n        const [inputId] = useState(`jkl-radio-button-${nanoid(8)}`);\n        const componentClassName = classNames(\"jkl-radio-button\", {\n            \"jkl-radio-button--compact\": forceCompact,\n            \"jkl-radio-button--inline\": inline,\n            \"jkl-radio-button--error\": invalid,\n            \"jkl-radio-button--inverted\": inverted,\n        });\n\n        return (\n            <div className={componentClassName}>\n                <input\n                    id={inputId}\n                    className=\"jkl-radio-button__input\"\n                    type=\"radio\"\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    checked={checked}\n                    ref={ref}\n                    {...radioProps}\n                />\n                <label data-testid=\"jkl-radio-button__label-tag\" htmlFor={inputId} className=\"jkl-radio-button__label\">\n                    <span aria-hidden className=\"jkl-radio-button__dot\" />\n                    <span className=\"jkl-radio-button__text\">{label}</span>\n                </label>\n            </div>\n        );\n    },\n);\nRadioButtonOption.displayName = \"RadioButtonOption\";\n","import React, { ChangeEventHandler, forwardRef } from \"react\";\nimport { FieldGroup } from \"@fremtind/jkl-field-group-react\";\nimport { LabelVariant, ValuePair, getValuePair, DataTestAutoId } from \"@fremtind/jkl-core\";\nimport { RadioButtonOption } from \"./RadioButtonOption\";\n\ninterface Props extends DataTestAutoId {\n    name: string;\n    legend: string;\n    choices: Array<string | ValuePair>;\n    selectedValue?: string;\n    inline?: boolean;\n    onChange: ChangeEventHandler<HTMLInputElement>;\n    helpLabel?: string;\n    errorLabel?: string;\n    variant?: LabelVariant;\n    forceCompact?: boolean;\n    className?: string;\n    /** @deprecated */\n    inverted?: boolean;\n}\n\nexport const RadioButtons = forwardRef<HTMLInputElement, Props>(\n    (\n        {\n            name,\n            legend,\n            choices,\n            selectedValue,\n            onChange,\n            inline = false,\n            helpLabel,\n            errorLabel,\n            variant,\n            forceCompact,\n            className,\n            \"data-testautoid\": testAutoId,\n            inverted,\n        },\n        ref,\n    ) => (\n        <FieldGroup\n            legend={legend}\n            helpLabel={helpLabel}\n            errorLabel={errorLabel}\n            variant={variant}\n            forceCompact={forceCompact}\n            className={className}\n            inverted={inverted}\n            data-testautoid={testAutoId}\n        >\n            {choices.map(getValuePair).map(({ label, value }, i) => (\n                <RadioButtonOption\n                    ref={i === 0 ? ref : undefined}\n                    key={value}\n                    name={name}\n                    value={value}\n                    label={label}\n                    inline={inline}\n                    checked={value === selectedValue}\n                    onChange={onChange}\n                    invalid={!!errorLabel}\n                    forceCompact={forceCompact}\n                    inverted={inverted}\n                />\n            ))}\n        </FieldGroup>\n    ),\n);\nRadioButtons.displayName = \"RadioButtons\";\n","import React, { VFC } from \"react\";\nimport { LabelVariant } from \"@fremtind/jkl-core\";\nimport { ExampleComponentProps } from \"../../../doc-utils\";\nimport { RadioButtons } from \"../src\";\n\nconst Example: VFC<ExampleComponentProps> = ({ boolValues, choiceValues }) => {\n    const choices = [\n        \"Jeg vil at dere skal ringe meg\",\n        \"Nei\",\n        \"Jeg vil at dere sender et brev til meg til min registrerte adresse fra folkeregisteret\",\n        \"Jeg vil at dere skal sende en e-post\",\n    ];\n    const [selectedValue, setSelectedValue] = React.useState(\"Yes\");\n    const errorLabel = boolValues && boolValues[\"Med feil\"] ? \"Her er det noe feil\" : undefined;\n    const variant = choiceValues && choiceValues[\"Variant\"] ? (choiceValues[\"Variant\"] as LabelVariant) : \"medium\";\n\n    return (\n        <RadioButtons\n            legend=\"Hvordan vil du bli kontaktet?\"\n            name=\"likesradiobuttons\"\n            choices={choices}\n            inline={boolValues && boolValues[\"Inline\"]}\n            forceCompact={boolValues && boolValues[\"Kompakt\"]}\n            selectedValue={selectedValue}\n            onChange={(e) => setSelectedValue(e.target.value)}\n            helpLabel=\"Hvis du trenger hjelp, kan du kontakte supporten vår\"\n            errorLabel={errorLabel}\n            variant={variant}\n            inverted={boolValues && boolValues[\"Invertert\"]}\n        />\n    );\n};\n\nexport default Example;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport Example from \"./Example\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Vi bruker radioknapper når vi vil at brukeren skal velge ett av flere alternativ. Bruk helst radioknapper for inntil\n    fire alternativ. Hvis du trenger å gi brukeren flere muligheter enn det, er det ofte bedre med en nedtrekksliste.\n    </Ingress>\n    <ComponentExample component={Example} knobs={{\n      boolProps: [\"Kompakt\", \"Inline\", \"Med feil\", \"Invertert\"],\n      choiceProps: [{\n        name: \"Variant\",\n        values: [\"small\", \"medium\", \"large\"],\n        defaultValue: 0\n      }]\n    }} mdxType=\"ComponentExample\" />\n    <p>{`Over radioknappene setter vi inn en tydelig overskrift, som forteller hva det er brukeren skal velge mellom. I tillegg skal hver radioknapp ha en kort og tydelig ledetekst til høyre for knappen, som beskriver alternativet.`}</p>\n    <h2>{`Bruk`}</h2>\n    <p>{`En gruppe radioknapper kan enten settes opp under eller ved siden av hverandre. Det er mest brukervennlig å sette dem opp vertikalt.`}</p>\n    <p>{`En av radioknappene bør alltid være valgt på forhånd. Det kan være det alternativet som de fleste vil velge, eller det som har minst følger for brukeren. I noen tilfeller kan det være viktig at brukeren selv velger, uten å bli påvirket av et forhåndsvalg. Da kan vi sette opp radioknapper uten forhåndsvalg. `}<strong parentName=\"p\">{`Vis eksempler på det`}</strong></p>\n    <h2>{`Tekst og validering`}</h2>\n    <p>{`Bruk prinsippene for skjemadesign når du velger størrelse på overskriften til en gruppe radioknapper. Skriv en kort og tydelig overskrift, som forteller hva brukeren skal velge. Hvis det er behov for det, kan vi legge inn en hjelpetekst under gruppen, for å forklare mer.`}</p>\n    <p>{`Hvis radioknappene ikke validerer, viser systemet en feilmelding som forklarer hva som er galt. Feilmeldingen erstatter en eventuell hjelpetekst, så den må eventuelt gjenta det viktigste fra hjelpeteksten.`}</p>\n    <p>{`Eksempel fra helsevurdering:\n`}<strong parentName=\"p\">{`Hjelpetekst`}</strong>{`: `}<em parentName=\"p\">{`Velg om du har hatt diagnosen de siste 5, 10 eller 15 årene`}</em>{`. `}<strong parentName=\"p\">{`Feilmelding`}</strong>{`: `}<em parentName=\"p\">{`Du har ikke valgt hvor lenge du har hatt diagnosen`}</em>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["RadioButtonOption","forwardRef","ref","value","label","onChange","name","inline","checked","invalid","forceCompact","inverted","radioProps","inputId","useState","nanoid","componentClassName","classNames","className","id","type","htmlFor","displayName","RadioButtons","legend","choices","selectedValue","helpLabel","errorLabel","variant","testAutoId","map","getValuePair","i","undefined","key","boolValues","choiceValues","React","setSelectedValue","e","target","_frontmatter","makeShortcode","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","component","Example","knobs","boolProps","choiceProps","values","defaultValue","parentName","isMDXComponent"],"sourceRoot":""}