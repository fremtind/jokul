{"version":3,"sources":["webpack://@fremtind/portal/../packages/list-react/src/List.tsx","webpack://@fremtind/portal/../packages/list-react/src/ListItem.tsx","webpack://@fremtind/portal/../packages/list-react/documentation/Example.tsx","webpack://@fremtind/portal/../packages/list-react/documentation/internal/props.tsx","webpack://@fremtind/portal/../packages/list-react/documentation/List.mdx"],"names":["makeListComponent","listType","children","className","componentClassName","classNames","C","UnorderedList","OrderedList","List","makeListItem","listItemType","cn","ListItem","CrossListItem","CheckListItem","Ordered","Unordered","Indent","IconedList","boolProps","_frontmatter","makeShortcode","name","props","console","warn","Ingress","ComponentExample","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","knobs","component","isMDXComponent"],"mappings":"sQASA,SAASA,EAAkBC,GACvB,OAAO,YAA2C,IAAxCC,EAAuC,EAAvCA,SAAuC,IAA7BC,iBAA6B,MAAjB,WAAiB,EACvCC,EAAqBC,IAAW,WAAYF,EAAW,CACzD,oBAAkC,YAAbF,IAGnBK,EAAiB,YAAbL,EAAyB,KAAO,KAE1C,OACI,gBAACK,EAAD,CAAG,cAAY,WAAWH,UAAWC,GAChCF,IAMV,IAAMK,EAAgBP,EAAkB,aAClCQ,EAAcR,EAAkB,WAChCS,EAAOF,EClBpB,SAASG,EAAaC,GAelB,OAd4B,SAAC,GAAkC,IAAD,IAA/BR,iBAA+B,MAAnB,GAAmB,EAAfD,EAAe,EAAfA,SAC3C,OACI,sBACIC,UAAWS,IAAG,iBAAkBT,EAAW,CACvC,yBAA2C,WAAjBQ,EAC1B,wBAA0C,UAAjBA,EACzB,wBAA0C,UAAjBA,IAE7B,cAAY,iBAEXT,IAOV,IAAMW,EAAWH,EAAa,UACxBI,EAAgBJ,EAAa,SAC7BK,EAAgBL,EAAa,SC1B7BM,EAAU,kBACnB,gBAACR,EAAD,KACI,gBAACK,EAAD,eACA,gBAACA,EAAD,cAEI,gBAACL,EAAD,KACI,gBAACK,EAAD,gBACA,gBAACA,EAAD,kBAGR,gBAACA,EAAD,eACA,gBAACA,EAAD,iBAIKI,EAAY,kBACrB,gBAACV,EAAD,KACI,gBAACM,EAAD,uBACA,gBAACA,EAAD,uBACA,gBAACA,EAAD,wBAIKK,EAAS,kBAClB,gBAACX,EAAD,KACI,gBAACM,EAAD,sBAEI,gBAACN,EAAD,KACI,gBAACM,EAAD,8BACA,gBAACA,EAAD,gCAGR,gBAACA,EAAD,wBAIKM,EAAa,kBACtB,gBAACV,EAAD,KACI,gBAACM,EAAD,eACA,gBAACA,EAAD,oBACA,gBAACD,EAAD,oBACA,gBAACA,EAAD,6BC5CKM,EAAY,G,iBCUZC,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,KAGZG,EAAUL,EAAc,WACxBM,EAAmBN,EAAc,oBACjCO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGT,GACF,YACD,OAAO,SAACM,EAAD,iBAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,eAI5E,SAACP,EAAD,CAASO,QAAQ,WAAjB,uNAIA,yCACA,mHACA,SAACN,EAAD,CAAkBO,MAAO,CACvBf,aACCgB,UAAWpB,EAASkB,QAAQ,sBAC/B,0CACA,+SACA,SAACN,EAAD,CAAkBO,MAAO,CACvBf,aACCgB,UAAWnB,EAAWiB,QAAQ,sBACjC,wCACA,iWACA,SAACN,EAAD,CAAkBO,MAAO,CACvBf,aACCgB,UAAWlB,EAAQgB,QAAQ,sBAC9B,uCACA,8JACA,SAACN,EAAD,CAAkBO,MAAO,CACvBf,aACCgB,UAAWjB,EAAYe,QAAQ,sBAKtCF,EAAWK,gBAAiB","file":"component---packages-list-react-documentation-list-mdx-e743125a8346c1d5bb6a.js","sourcesContent":["import React, { FC } from \"react\";\nimport classNames from \"classnames\";\n\ninterface Props {\n    className?: string;\n}\n\ntype validLists = \"unordered\" | \"ordered\";\n\nfunction makeListComponent(listType: validLists): FC<Props> {\n    return ({ children, className = \"jkl-body\" }) => {\n        const componentClassName = classNames(\"jkl-list\", className, {\n            \"jkl-list--ordered\": listType === \"ordered\",\n        });\n\n        const C = listType === \"ordered\" ? \"ol\" : \"ul\";\n\n        return (\n            <C data-testid=\"jkl-list\" className={componentClassName}>\n                {children}\n            </C>\n        );\n    };\n}\n\nexport const UnorderedList = makeListComponent(\"unordered\");\nexport const OrderedList = makeListComponent(\"ordered\");\nexport const List = UnorderedList;\n","import React, { FC } from \"react\";\nimport cn from \"classnames\";\n\ninterface Props {\n    className?: string;\n}\n\ntype validListItems = \"normal\" | \"check\" | \"cross\";\n\nfunction makeListItem(listItemType: validListItems): FC<Props> {\n    const ListItem: FC<Props> = ({ className = \"\", children }) => {\n        return (\n            <li\n                className={cn(\"jkl-list__item\", className, {\n                    \"jkl-list__item--iconed\": listItemType !== \"normal\",\n                    \"jkl-list__item--check\": listItemType === \"check\",\n                    \"jkl-list__item--cross\": listItemType === \"cross\",\n                })}\n                data-testid=\"jkl-list-item\"\n            >\n                {children}\n            </li>\n        );\n    };\n    return ListItem;\n}\n\nexport const ListItem = makeListItem(\"normal\");\nexport const CrossListItem = makeListItem(\"cross\");\nexport const CheckListItem = makeListItem(\"check\");\n","import React from \"react\";\nimport { UnorderedList, OrderedList, ListItem, List, CheckListItem, CrossListItem } from \"../src\";\n\nexport const Ordered = () => (\n    <OrderedList>\n        <ListItem>Steg 1</ListItem>\n        <ListItem>\n            Steg 2\n            <OrderedList>\n                <ListItem>Steg 2a</ListItem>\n                <ListItem>Steg 2b</ListItem>\n            </OrderedList>\n        </ListItem>\n        <ListItem>Steg 3</ListItem>\n        <ListItem>Steg 4</ListItem>\n    </OrderedList>\n);\n\nexport const Unordered = () => (\n    <UnorderedList>\n        <ListItem>Listeelement 1</ListItem>\n        <ListItem>Listeelement 2</ListItem>\n        <ListItem>Listelement 3</ListItem>\n    </UnorderedList>\n);\n\nexport const Indent = () => (\n    <UnorderedList>\n        <ListItem>\n            Listeelement 1\n            <UnorderedList>\n                <ListItem>Nøstet listeelement 1</ListItem>\n                <ListItem>Nøstet listeelement 2</ListItem>\n            </UnorderedList>\n        </ListItem>\n        <ListItem>Listelement 2</ListItem>\n    </UnorderedList>\n);\n\nexport const IconedList = () => (\n    <List>\n        <CheckListItem>Dekkes</CheckListItem>\n        <CheckListItem>Dekkes også</CheckListItem>\n        <CrossListItem>Dekkes ikke</CrossListItem>\n        <CrossListItem>Dekkes heller ikke</CrossListItem>\n    </List>\n);\n\nconst Example = () => (\n    <section>\n        <Ordered />\n        <Unordered />\n        <Indent />\n        <IconedList />\n    </section>\n);\n\nexport default Example;\n","export const boolProps = [];\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/jokul/jokul/portal/src/components/Layout/DocPageLayout.tsx\";\nimport { Ordered, Unordered, Indent, IconedList } from \"./Example\";\nimport { boolProps } from \"./internal/props\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Ingress = makeShortcode(\"Ingress\");\nconst ComponentExample = makeShortcode(\"ComponentExample\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Ingress mdxType=\"Ingress\">\n    Lister er strukturelementer. De gjør at vi kan utheve viktig informasjon for brukerne eller fortelle dem at de må\n    gjøre noe i en bestemt rekkefølge. Det finnes to forskjellige lister: nummererte og unummererte.\n    </Ingress>\n    <h2>{`Nummererte lister`}</h2>\n    <p>{`Vi bruker nummererte lister når vi skal presentere instruksjoner, der rekkefølgen er viktig.`}</p>\n    <ComponentExample knobs={{\n      boolProps\n    }} component={Ordered} mdxType=\"ComponentExample\" />\n    <h2>{`Unummererte lister`}</h2>\n    <p>{`I unummererte lister bruker vi kulepunkter. Formålet med en slik liste er å organisere informasjonen og fremheve viktige opplysninger. Her er ikke rekkefølgen brukeren skal utføre noe i viktig, men vi må likevel passe på at vi presenterer det innholdet som er mest relevant først.`}</p>\n    <ComponentExample knobs={{\n      boolProps\n    }} component={Unordered} mdxType=\"ComponentExample\" />\n    <h2>{`Innrykk i lister`}</h2>\n    <p>{`Vi kan bruke innrykk under et enkelt listepunkt når det punktet har tilleggsinformasjon som vi må dele opp videre. Men bruk det sparsommelig. Før du bruker det, tenk nøye over om dette er et hovedpunkt som kan stå for seg selv, eller om det er informasjon som passer best som underpunkt. Selvstendige punkter skal ikke ha innrykk.`}</p>\n    <ComponentExample knobs={{\n      boolProps\n    }} component={Indent} mdxType=\"ComponentExample\" />\n    <h2>{`Lister med ikon`}</h2>\n    <p>{`Vi bruker lite ikoner i profilen, men det er enkelte unntak. Brukes typisk i en oversikt over hva som er dekket og hva som ikke dekkes.`}</p>\n    <ComponentExample knobs={{\n      boolProps\n    }} component={IconedList} mdxType=\"ComponentExample\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}